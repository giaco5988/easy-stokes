%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: domain_drop_in_pipe.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Giacomo
%%CreationDate: 01.04.20
%%BoundingBox: 0 0 495 165
%%HiResBoundingBox: 0 0 495 164.5107
%%CropBox: 0 0 495 164.5107
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 44 8%%BeginData: 5222 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDC6FF7DA8FD7EFF52A8FD7DFFA852A8FD7DFFA87D7DFD0A%FFA87DFD05FF7D7EFD51FFA8A8A8FF7DA8FD14FF527DFD06FF7DA87DFF7D%7DFD05FFA852FD52FF53A8FF7EA8FD1CFF7DA87E52A852FD05FF847DA8FD%51FF7D7DA8A8FFA8FD0AFFA87DA87DA8FFFFAFFFFFFFA87E527DA8FF52A8%52A87DA8FF7E7DA8A8A87EFD52FF7D7DA8FFFF7DA8FD05FFA8FFFFFFFD05%A8FFFFFF7DA8A8FF7E7DA8FFA87DA87DFFFFFFA852FF52A8FD54FFA827FF%A87D527D52A87D7D597D53FFFFA87DA884A8FD04FFA8FFFF7D7DA8FF7D7D%FF52A8FFFF7D7DA852A8FD57FFA87D7D7DA8FFA87DA852A8FD0AFF7D7DA8%FFA8FFFFFFA8FFFFA8A8FFFFFFA8FD5CFFA8FFFFFFA8FF7D7DFD0BFFA853%7DFD7EFF7D7DFD7CFFA87DA852FD7DFF7D7DA8FDFCFFFD47FFAF7D7D7D7E%7D7D7DA8FD067D53847D847DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA8FD10FFA8A8A87DA8A8A9A8A8A8AFA8%7D527D527DA8FFA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8FFA8A8A8A9A8A8A8%FFA8FFA8FFA8A9A8FFA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8%A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8%AFA8A8A8A9FD05A8FD12FFA8FD09FFA8A8FFFF7D7DA8FD0FFFA8FD07FFA8%A87DA87DA8A8FFA8FD4CFFA9FFFFFFA8FD08FFA87DFD04FF7D7DFD0DFFA8%7D7DA8A8FFFFA87D84FD04A87D84FD077D7E7D7D7D847D7D7D847DA87EAF%FD1FFF7E7DA8FD17FFFD047DA8A8FD08FFA8A8FD05FF7D7DFD0EFFA852FF%FF7D52FD0BFFA8FFA8FFFD0AA87E84FD047DA8FD11FF7D7DFD07FFA852A8%7DFD17FFA87DFF52FFA8FD08FFA97DFD06FF7DA8FD0DFFA8A8FFA87DFD1F%FF7D7D7DFD0FFF52277DFD08FF8452A8FD17FF537D52FFA8A8FD08FFA87D%A8FFA8A8A8FF7D7DFD0DFFA8A8FF52FD22FFA852A8FD0BFFA82027F8FD07%7DA8A87D7DFD17FFA87DFF7D7EFFA8FD09FF28A859FF52FFA8A87DA8FD0E%FF7DA8FD24FF52A8FD0CFF7D277DFD07FFAFA9FD18FFA852FF7D7DA8FD09%FFA87DFF537D7DFFA8A8A853FD0EFF7DA8FD25FF52FD0DFF7D7DFD27FFA8%FD08FFA884A8A8A87DFFA8FFFF7DFD0EFF7DFD26FFA87DFD34FFA8FD09FF%A85253A87DA87D52A8FF7DFD0DFFA87DFD26FFA87DFD2BFFA8FFA8FFA8FF%A8FFA9A884FFFFFFA8FFFFFFA87D527D52A8537DF827537DA8FFA8FFA8FF%A8FFA8FFFFFFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFAFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%FD04A8FFFD05A8FFA8A8A8FFA8A8A8FFA8A8527DA8A87DA87D27F85253FD%04A8AFA8FFA8A8A8FFA8A87D7DAFA8A8FFFD05A8FFA8A8A8FFA8A8A8FFA8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A9A8AFA8FFA87DA8FFA8A8A8FFA8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8AFA8FFA8A8A8FFA8A8A8FFA8FFA8A8A8%FFA8A8FD15FF84FD04FFA827A9FFA8A8FD0DFFA8FD27FFA8FD3EFFA8A8FD%04FFA8FFFFFFA8FD0DFFA8A8FD06FFA8FFA8FD07FFA87DA8FD13FFA8FD3F%FFA87DFD07FFA8A8FD0EFF7DFD06FF7DA87DFF7EFD04FFA8FD047DFD12FF%7DA8FD05FFA8FFA8FD07FFA87DA8FD2CFFA87DFD07FFA87DFD0FFFA8FD05%FF52A852FF7DFFA8AFFFA8597DA87DA8FD0FFFA8A8A8FD06FF7DA87D847D%7DFD04FF7D7D527D7DA8FD29FFA87DFD07FFA8FD0FFFA87DFD04FFA87DA8%A8FF7DA8FF7DFF7D7DA8FF7DFD10FFA8A8FD07FF53A852A8A87DFD04FF53%A87DFF7DFD2AFFA87EFD06FF7DA8FD10FFA8FD04FFA8A8FFFFFF7DAFA8A8%FF7EFFFFFFA8A8FD0BFFA8FF7D84FD08FFA852A8A8A87D7DFF52FF7D7D7D%FF7D7DFD2AFFA87DFD05FF7DFD13FF7DA8FD12FFA9FD05FFA8FFA8A8A87D%A8FD0AFFA8A8FFFFFF7DA8FFA8FFA8A8FFFF7D7DFD2AFFA8A8FD04FF7E7D%FD14FFA8A87DFFA8FFA8A8A87DA8A853FF7D7DA87DA8A87DFF7DA8A87DA8%A8A8FFA8FD46FF7DFFFFFF7DFD18FFFD04A8FF7DFFA8FD4EFFA8FFA8AFA8%AFA9FFA8FFA8FFFD057DA8A8FFA8FFFFA8A8FFA8FFA8FFA9A8A8FFA8FFA8%FFA8A8FD04FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFA8A8FFA8FFA8FFFFA8%A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FF%A8FFA8FFFFA8A8FFA8FFA8FFA9A9FD0FFFA87DA8A87DFF7DFFA87DA8A87D%7D7DA87DA8A87DA8A87DFF7DA8A87DA87DA8FF7DFF7DA8A87DA8A87DFF7D%A8A87DA8A8A8FF7DFFA87EA87DA8A87DFF7DA8A87DA8A87DFF7DA8A87EFF%7DA8AF7DFF7DA8A87DA8A87DFF7DA8A87DA8A8A8FF7DFFA8A8A87DA8A87D%FF7DA8A87DA8A87DFF7DFD0EFFA8FD78FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2020-04-01T20:43:19+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>88</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVC5vrO1e3juJkie7k9G2VyAZJOLPwQdzxRj8hiqvirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqFXVtKfUH01L2BtRjHJ7ISoZlWgNTH&#xA;XkBQjtiq6y1LTr9ZGsbqG6WJjHKYJFkCuOqtxJofbFURirsVdirsVeX+fJr6Dzt5XvL6DkkOrqLD&#xA;02LLHamyuI5ZJAFPEyTSpyJ2oFHiSVeoYFQl9q+k6e0a397BaNNURLPKkZcjrx5kV+jFUn1vzvYa&#xA;bBZXNtC2qWt9IIYp7OWBlMjSpEI05SL6kh9QsFXsreGKsjxVIn81IvmuLy6bKb1ZUeRbkNEV9OON&#xA;XMpTn6vpcnEfPjTn8OKp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeeeYrm&#xA;90/81rP6hFyvtd0OWztZCpZFltLuN/Uk2+zFHcu/2hWnHqwxVGyecNB8vXljoFkWnige4/S1yY53&#xA;MYhhM80hkSNlmneWSMOinlyevXbFU0n/ADB8pwWUd7LdyC3mV5IiLa5LNFFEs0kwQRl/RWORSZac&#xA;BUb1xVWsPO3lnUNTOmWl2ZLwSSQhfRmVDJCiyOiysgjYhHV9m3U1G2KqPmDVNctb5Y7FqQmMMR+j&#xA;Li8+Ik1/exXEC/7Hj9OKozy7fandwStfmsisAn+hzWO1P5ZpZy3zBGKuuL/zIk8iQaRFNCrERym7&#xA;CFl7Er6Zp9+KsU81a/5mt/My2Flq0Npb87KORFtll9L6/crbwB3dt3fhMegA+DrWpKrPMtxJffmD&#xA;oOmQXtubny9Y3er3TTr6gM7Rraw8oY3jIbhJM/tgVLvIXljR/Nfk0ajJq1362uudR121tZoxEt3d&#xA;iG4MYUo5haJY0EbIVkUb8qmuFVfXvzB1i1k8yahDdQwReXb63soNEIiM12p9GS4llLkMgaOZvS48&#xA;QOPNuQ2xVlNj5YS7vtO1+9v5ri8iP1uOCKVXs0lntRBKICVMvoMPiCepx5fFSuBWS4q7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVpjjMiyFQZFBVXoOQViCwB8DxFfliqQXPkLyzc&#xA;X8t88Ei3Eq3KN6c8yJS9ULcERqwSsnEMTT7QDdQMVRGq+UPL+qQQwXlrWKGBrRVR3jLWsnH1Ldyh&#xA;UtE/pryQ7Gm+KoPy55ItdKv7nVLqb67qk89xMkwEkcUS3DL8EUDSyohEcaRlh1C9qmqrJcVdiry/&#xA;z4+m22uWut213z+p63psGtXMcpkubQHgqWsMQUcYpzKhnHPoxPEnCr04xREklFJNCSQN+Jqv3Hpg&#xA;VaLa2ExmESCY9ZAo5H6euKtW1pa2sfpW0KQR1LcI1CLU9TRQOuKtm1tjI8hiQySqElcqOTIK0Vj3&#xA;G52xVUxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZZYoYnlldY4o1LySOQqqqipJJ2AAxVJ/8b+S/wDq&#xA;/wCm/wDSXB/zXirv8beTP+r/AKd/0lwf814q4+ePJags2v6aANyTdwUA/wCDxVTi8/eRJq+l5j0u&#xA;SnXhe27U+58VVP8AG3kz/q/6d/0lwf8ANeKu/wAbeTP+r/p3/SXB/wA14q7/ABt5M/6v+nf9JcH/&#xA;ADXirv8AG3kz/q/6d/0lwf8ANeKu/wAbeTP+r/p3/SXB/wA14q7/ABt5M/6v+nf9JcH/ADXirv8A&#xA;G3kz/q/6d/0lwf8ANeKu/wAbeTP+r/p3/SXB/wA14q7/ABt5M/6v+nf9JcH/ADXirv8AG3kz/q/6&#xA;d/0lwf8ANeKpZPf/AJV3GpLqc99o0l+rpKLhri3LepEOMch+KhdBsrHcdsVTP/G3kz/q/wCnf9Jc&#xA;H/NeKu/xt5M/6v8Ap3/SXB/zXirv8beTP+r/AKd/0lwf814q7/G3kz/q/wCnf9JcH/NeKu/xt5M/&#xA;6v8Ap3/SXB/zXirv8beTP+r/AKd/0lwf814q7/G3kz/q/wCnf9JcH/NeKu/xt5M/6v8Ap3/SXB/z&#xA;Xirv8beTP+r/AKd/0lwf814q7/G3kz/q/wCnf9JcH/NeKu/xt5M/6v8Ap3/SXB/zXirv8beTP+r/&#xA;AKd/0lwf814q2vnTyczBV17TixNABdwEkn/Z4qnOKuxV2KpfreuaTo9qk+qSGO3nlS2QiKSXlJMw&#xA;RE4xq5+NiFHidsVSa4ufLmoyQxWcUZntL6BLqCSAwyoXBZeUcqI9GG6mlD2wqyD9Gab/AMskP/It&#xA;f6YFcdL0wgg2cBB2IMaf0xVhWi+SPKGq3fmMX2kWsrRas6wzCNY5Yx9Ut/7uVOMifaP2WGFVWbS7&#xA;/wApD6wsR17y2n+9EU0Ym1G0TvIklOV1Gv7St+8A3DP9nFWV2lvod5aw3dpDbT2twiywTRojI6OO&#xA;SspAoQQa4FVf0Zpv/LJD/wAi1/pirv0Zpv8AyyQ/8i1/piqT66buydDpvl+31CFEaa9keRICqL+x&#xA;AvpyerK29FYovi4riq6x1Py3ceXz5gmgtrbSSjzx3UioENspPCepUUWRAHX2IxVK7e71zWUFxoug&#xA;WdjprisF5qwKTSqejpaRIXVD29SRG/ycKq36K86R7+hoNz/k+hPb/RWtx+rFXBvNkW1x5U0yWn7V&#xA;pfB6jxpNaW9PlX6TgVsX+rgUbyTJy78ZtPIr7EyqafRhVaNZvab+QNSr/raJ/wBl+BXfpm8/6kHU&#xA;/wDgtE/7L8Vd+n4YxW68nalbU+1/o9ncEd/+PWe4rt4frxVfB5u8gvPHb3DRaddSnhHb6lbPYOz9&#xA;eKi6jh5n/VrXtirIhpumEAi1gIO4IjT+mKu/Rmm/8skP/Itf6Yq79Gab/wAskP8AyLX+mKu/Rmm/&#xA;8skP/Itf6YqgtWn8saRAk+orbWySyJBCHROUksjBUjjUDk7sTsqiuKo39Gab/wAskP8AyLX+mKu/&#xA;Rmm/8skP/Itf6Yqw/wAq+bbDzBqFpFHokMNhqVpPqGn3XJWkNtDNHCjzRGJRGZjLyQB2+EGtOmKs&#xA;w/Rmm/8ALJD/AMi1/pirhpmnA1FrDX/jGv8ATFUTirsVdirCPPay6l5l8q6HGZ4YVvm1K8uoYS6p&#xA;9Uhf6uhkZJIlLzurDl/LiqUeRSJku729hnXzDc61x1O6uYnieWK3mmt7MbqkY4wRA8I9hy5ftblX&#xA;p2BXYq8vk836z5eu/OV9HpqXGk6dqUEtxK8jpLMbmOCForcBGQvGAGoW+IsF2rXCrJbDzRqd1rnm&#xA;e3LW0elaBxiF2Uk5Gd7dbhg/x8SsSOvKlCa9sCpf5DbUtH1EaNqKRww6xbHWdPtogyxW0rOv12zj&#xA;DE0SN5o5F93fYAYqzvFXYqh9St57nTrq2t5RBPNDJHFMRyCO6kKxWorQmtMVYvd2FtqfmTT/AC2E&#xA;5aN5etob66hP2ZJyzR2MbbAFY/RklK/zBDirMMVdirsVdirsVdirsVU7m2trqB7e5iSeCQcZIpFD&#xA;ow8GVqg4qxS58sah5dH13yeSLaIcp/LMj/6JKgG4tOVfqsv8oX92T9pf2gqyLRdYsdZ0q21OxYtb&#xA;XK8k5Aq6kEqyOp3V0YFWXsRTFUbiqldxTy20scExt5nUrHOFVyjEbNxaqmnvir5y1z8s/wAz9I/M&#xA;3RfM2tazJ5h0uK6VBq4jDGy9WqLI9nX0440dgxKfCKVNMVe3/oPzj/1M3/TjB/XCqIs9L80QNK8+&#xA;uLeExOsMclpHGiykfA7emwYgHqtRXAqA8oeRLXy9qN3foUVri3t7O3tYvUMNvBbmR+EXqs5AeSZm&#xA;4iiqOIA2qVWVYq7FXYq7FUvTWeRp9Ru12JqYqDYVp179sVc2scZOH1K7O9OQi2++uKoLWL6V2sxH&#xA;Y3UnpXMcrlY6gKpIPfCqOk1bgqt9Tum5dliqR8Ibff8AyqfOuBVlxrfo2j3H1C8k4KW9GOLlIact&#xA;gtevwfiMVePNqfmfUfMGr3Nlpl59Qi1Fp4bafTpJ3hu/q8I9cqsqIZY1p6auCFPxdaUKEu/MPzF5&#xA;j0Hytrl5plhfWVtcai+o3U99bvDHPFe8YJbOdeRWhDDi4YNsAKdcUp35R/Nw+ervyzqKaFe2NzZX&#xA;syXU3DnZzRyWNwrxwTnjyf1Aj+nSvw9+uBXrR1ekpj+pXRo3HmIvh60rWvTFWpNY4Gn1K7bYGqxV&#xA;G/04quk1Xgqn6ndNyrssdSKAHff3xVjPljVK6/5wuWtLpnGp20CqI/iWNdMtZApFezyOf9kMVZKu&#xA;rcoy/wBSuhSvwmLc0p0FffFXRat6hP8AoV0lKfaip1PzxVpNZ5Gn1G7XYmpioNhWnXv2xVcdVpcG&#xA;H6ndGj8PUEfwdacq16Yqtk1jgafUrttgarFUb/TircmrcAP9Cumr/LFWmw67++KuOrUiEn1O6Naf&#xA;AIvi3LDpX/J/EYq2uq8oy/1O6FK/CY/iNKdq9+W3yOKtR6tz/wCPK6XcD4oqdfpxVjXlnU1tvM3m&#xA;Wxis7kW7zQ6gsfp/YkuYSJV67c3g508W98Ksl/S37/0vqd19rj6npfB1pWtemBWn1niafUbttgai&#xA;Ko3Fade3fFW5dW9Mj/Qrp61+zFXofnirm1akfP6ldHp8Ii33r2r2474q4atWIyfU7oUr8Bi+LYqO&#xA;lf8AK/A4q6PVuYP+hXS0/mipXY9N/bFWo9Y5mn1K7XYmrRUG304q2NXrKI/qV0Ktx5mL4etK1r0x&#xA;Vp9Z4mn1G7bYGoiqNxWnXt3xVdNqvpNT6ndP13SOo2NPHFUdirsVdirsVdirHPKH+93mf/trv/1C&#xA;W2KorzP5S0XzPb21nrUX1qwtp1uTZsaRyyICEEo/aReVePQmlcVULqCxfzJommR2DCLS4ptRt54v&#xA;3VvbuIzZxx8AKMXjuZaKD8PGvhirIMVdirsVSqwN5Fr+qQzLClrcCG5s2TgsshCCKf1ADzbhwj+I&#xA;joQK7YqmpIAqdgMVYLoP5iT6nPoERSAnWYL+/CoaH6tFNwskj5uAZZkcE1NPhfoOirJtD1+31TSY&#xA;dRZDZiaWSAQzMnISRTNBxqpKklk2ocVSLz15xvtHkktNOe2hnt9Nu9Wu7q8R5Yo4bbiiIIo5IWZ5&#xA;pJKD49gp6mgxVM/LnmebVLqSwu7CWxvrewsb+dXKlSL71hxUAlhwe2dTyAOKp9irsVdiqldXdraQ&#xA;me6mjt4QQDLKwRQWIVRyYgbk0GKpb5civ2gn1DU7KKx1G9lZpIY6M4hRituszqzq8gipy47Amg6V&#xA;KqN1bU7TStKvNUvGK2ljBJc3DDqI4kLtStOy4qlo85aGs9xDcyGz+qQWlxcPccY0Q3xdYYa1NZf3&#xA;Rqo8R44qmmn6hYajZQ31hcR3dncKHguIWDxup7qy1BxVI9e8+6Not8bS4iuJlie2S/uoVRobU3sy&#xA;wW/rFnRqu7dI1YgbkAUxVNNK8w6Hq7Trpd/BetalRcLA6uU9Qck5AHYMN1PftiqYYq7FXYq7FXYq&#xA;7FXYq7FXYq7FWOeUP97vM/8A213/AOoS2xVMte1y10Wx+tzxTXDO6w29rbRmWaaaQ0SNF2FT4sQo&#xA;6sQN8VdoumXNkLyS6vJLy4vbl7li9VSNWoscMUfJ1RY41VTQ/E1WO5xVMcVdirsVSjXtNkdodYsb&#xA;YXOtaZHP9QhaUwLKJko8Ej8X+ByqtuPtKp7Yqovq2n6zZS6M10NM1q+siz6fI8RvbcXEbAMYlZql&#xA;aHpUbYq608v+UvL9haLFb2enpYxmG1uykMTpyXizK5UfE/7Xj3xVKksfJsFofLM2txXM9hOusTWs&#xA;0ts13Gsc4vC5jjVGWMyHly4Vo2x6YqpTS+QJ9VPme/mi1D66sFtp5mtmmWE2TO4MFUYqxe4ry+VO&#xA;mFUwhuNEt/NGr6p9cvWvEtIoL63a2kMCw2ru8fpFYA0jK1xJ9h2J5d6CgVH/AOLdE9Ozk53HG/JW&#xA;2/0S6qSr+meY9Ksfxfz08emKtnzRYEX4htr6eTTm4TIlldLzbmUpA8kaRzUYbmNiB1O2Ktpq2rzz&#xA;2X1bSJFtLhQ9zPdSpC0AqRxMQ9R2fatNhv1xVStPL084im8xzxateW9x9atOMAhgt348VEUfKRjx&#xA;qSGkZjXcU2xVO8VSDz1od7r3lubRrV/TF9LbxXcoIDJa+uhuSvIEFjCGC7dTiqW6l5L1C1Ooapok&#xA;41DX770aHVpFW2SSLgouFWG3kCyqkY4fAVB3pu3JVEeXfL2taZa+X7blFaw6fFcpqNrbytLDJ6hB&#xA;j+KSNHkk5fGZaLvz+H4tlUHY/l/9a1W/1TXJ5X+sar+kI9NV4zbN9UCxWUknweoSqRI/Hnx5dRXF&#xA;UR5J0HX9Pv8AVLzWLPTbRrpbeG0XTZZJQlvbCRY4KPBbLHHErDiqg/EznYUAVZbirsVdirsVdirs&#xA;VWTmYQyGBFknCkxI7FEZ6fCGYK5UE9TxNPA4qk5u/Ov1S3YaVppvGdhdQnUZxGkYpxaOT6jykY71&#xA;UotPE4qrtceaPXvVXT7E28aE6dIb2YPNJtRZ0+qEQqf5laT5Yqh5bzzuLe1aLSdMa5fl9ejbUrhU&#xA;jo1E9JxYMZapueSpQ7b9cVY9aaZ+alr+lJbSHRLSa+vfrwR7m6ugymOKJoef1a39I0hqJOEnWnDa&#xA;pVTbS9L8wWGpfXFsLaWXU2Ems3M2qXMzw0disVrG1pweKNW+Afuu9RWrFVHfWvOP1W6b9F6d9aR1&#xA;FlF+kJ/Tkjr8TSyfUuUTAdFVHr4jriqpHc+aTe2iSafYrZPEpvp1vZmlilKnmkURtFWVA1AGaRCR&#xA;vxHTFVFbvzt+jnkbSdNGpCQCO2GpTmAxU3cz/UQ4ev7PpEf5XbFVf6x5o+v8P0fZfUPSr9Y+uy+t&#xA;63CvD0fqnHhz25+pWm/H9nFUN9c88/o8SfojTP0j6pU2/wCk7j0fR4gh/W+ocufLbh6VKb8u2Kql&#xA;2muS6jOf0Tp09pBC5066mupBO8zRgenJH9UdYUYllZ1kc8d+JrQKpPaeW57TSrW0tvKHl63Q3LT3&#xA;VjFOUt4zQIJ4uOnj1JSgoaonQDkeyqdGXzPHNfLBpmn+gq109/rsqPM4oAJ0FoRCOI6q0nQbeCrS&#xA;XXnArYc9M08NIxGpgahORCnOgMB+pD1z6fxUf09/hrT4sVc915wC3/DTNPLRsBpgOoTgTJzoTOfq&#xA;R9A+n8VE9Tf4a0+LFV8dz5qM9kJNOsVgkWuout9MzwvU7QobRRMKU3Zo/liqkbvzn9WuWGlad9ZW&#xA;QC0i/SM/pyRVPJpJPqNY2ApRQjg/zDFVeG48zm+tUmsLJLF4g17Ol7K80c3AlkiiNqiyoHoA7SIS&#xA;N+I6FVC/XPPP6PMn6I0z9I+qFFv+k7j0fR4kl/W+ocufLbh6VKb8u2Kon6x5o+v8P0fZfUPSr9Y+&#xA;uy+t63CvD0fqnHhz25+pWm/H9nFVBrvzt+jkkXSdNOpGQiS2OpTiARU2cT/US5ev7PpAf5XbFVaS&#xA;580i9u0j0+xaySJjYztezLLLKFHBJYhaMsSFqgssjkDfiemKqf1rzj9VtW/RenfWndhexfpCf044&#xA;6/C0Un1LlKxHVWRKeJ64qva582etehdNsDDGpOnOb+YNM1RQTr9TIhBXeqtJ/HFWvrXm3/QP9xth&#xA;+8P+5T/T5v3K8gK2/wDof788Kmj+nvt74qt+t+cvTvT+i9O9SNh+jl/SE/GZedGM5+pfuSE+IBRJ&#xA;U7bfaxVVW480evZK2n2It5EB1GQXsxeGTeqwJ9UAmUfzM0fyxVRju/OZt5mk0vTluVkUW8a6jOyP&#xA;ESebu5slKMBSihWB/mGKp1irsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -164.511 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 164.511 li
495 164.511 li
495 0 li
cp
clp
[1 0 0 1 0 0 ]ct
29.5 77.7104 mo
33.8398 77.7104 li
38.1802 77.7104 li
42.52 77.7104 li
46.8599 77.7104 li
51.2002 77.7104 li
55.54 77.7104 li
59.8799 77.7104 li
64.2202 77.7104 li
68.5601 77.7104 li
72.8999 77.7104 li
77.2402 77.7104 li
81.5801 77.7104 li
85.9199 77.7104 li
90.2598 77.7104 li
94.6001 77.7104 li
98.9399 77.7104 li
103.28 77.7104 li
107.62 77.7104 li
111.96 77.7104 li
116.3 77.7104 li
120.64 77.7104 li
124.98 77.7104 li
129.32 77.7104 li
133.66 77.7104 li
138 77.7104 li
142.34 77.7104 li
146.68 77.7104 li
151.02 77.7104 li
155.36 77.7104 li
159.7 77.7104 li
164.04 77.7104 li
168.38 77.7104 li
172.72 77.7104 li
177.06 77.7104 li
181.4 77.7104 li
185.74 77.7104 li
190.08 77.7104 li
194.42 77.7104 li
198.76 77.7104 li
203.1 77.7104 li
207.44 77.7104 li
211.78 77.7104 li
216.12 77.7104 li
220.46 77.7104 li
224.8 77.7104 li
229.14 77.7104 li
233.48 77.7104 li
237.82 77.7104 li
242.16 77.7104 li
246.5 77.7104 li
250.84 77.7104 li
255.18 77.7104 li
259.52 77.7104 li
263.86 77.7104 li
268.2 77.7104 li
272.54 77.7104 li
276.88 77.7104 li
281.22 77.7104 li
285.56 77.7104 li
289.9 77.7104 li
294.24 77.7104 li
298.58 77.7104 li
302.92 77.7104 li
307.26 77.7104 li
311.6 77.7104 li
315.94 77.7104 li
320.28 77.7104 li
324.62 77.7104 li
328.96 77.7104 li
333.3 77.7104 li
337.64 77.7104 li
341.98 77.7104 li
346.32 77.7104 li
350.66 77.7104 li
355 77.7104 li
359.34 77.7104 li
363.68 77.7104 li
368.02 77.7104 li
372.36 77.7104 li
376.7 77.7104 li
381.04 77.7104 li
385.38 77.7104 li
389.72 77.7104 li
394.06 77.7104 li
398.4 77.7104 li
402.74 77.7104 li
407.08 77.7104 li
411.42 77.7104 li
415.76 77.7104 li
420.1 77.7104 li
424.439 77.7104 li
428.78 77.7104 li
433.12 77.7104 li
437.46 77.7104 li
441.8 77.7104 li
446.14 77.7104 li
450.48 77.7104 li
454.82 77.7104 li
459.16 77.7104 li
463.5 77.7104 li
463.5 75.7105 li
459.16 75.7104 li
454.82 75.7104 li
450.48 75.7104 li
446.14 75.7104 li
441.8 75.7104 li
437.46 75.7104 li
433.12 75.7104 li
428.78 75.7104 li
424.439 75.7104 li
420.1 75.7104 li
415.76 75.7104 li
411.42 75.7104 li
407.08 75.7104 li
402.74 75.7104 li
398.4 75.7104 li
394.06 75.7104 li
389.72 75.7104 li
385.38 75.7104 li
381.04 75.7104 li
376.7 75.7104 li
372.36 75.7104 li
368.02 75.7104 li
363.68 75.7104 li
359.34 75.7104 li
355 75.7104 li
350.66 75.7104 li
346.32 75.7104 li
341.98 75.7104 li
337.64 75.7104 li
333.3 75.7104 li
328.96 75.7104 li
324.62 75.7104 li
320.28 75.7104 li
315.94 75.7104 li
311.6 75.7104 li
307.26 75.7104 li
302.92 75.7104 li
298.58 75.7104 li
294.24 75.7104 li
289.9 75.7104 li
285.56 75.7104 li
281.22 75.7104 li
276.88 75.7104 li
272.54 75.7104 li
268.2 75.7104 li
263.86 75.7104 li
259.52 75.7104 li
255.18 75.7104 li
250.84 75.7104 li
246.5 75.7104 li
242.16 75.7104 li
237.82 75.7104 li
233.48 75.7104 li
229.14 75.7104 li
224.8 75.7104 li
220.46 75.7104 li
216.12 75.7104 li
211.78 75.7104 li
207.44 75.7104 li
203.1 75.7104 li
198.76 75.7104 li
194.42 75.7104 li
190.08 75.7104 li
185.74 75.7104 li
181.4 75.7104 li
177.06 75.7104 li
172.72 75.7104 li
168.38 75.7104 li
164.04 75.7104 li
159.7 75.7104 li
155.36 75.7104 li
151.02 75.7104 li
146.68 75.7104 li
142.34 75.7104 li
138 75.7104 li
133.66 75.7104 li
129.32 75.7104 li
124.98 75.7104 li
120.64 75.7104 li
116.3 75.7104 li
111.96 75.7104 li
107.62 75.7104 li
103.28 75.7104 li
98.9399 75.7104 li
94.6001 75.7104 li
90.2598 75.7104 li
85.9199 75.7104 li
81.5801 75.7104 li
77.2402 75.7104 li
72.8999 75.7104 li
68.5601 75.7104 li
64.2202 75.7104 li
59.8799 75.7104 li
55.54 75.7104 li
51.2002 75.7104 li
46.8599 75.7104 li
42.52 75.7104 li
38.1802 75.7104 li
33.8398 75.7104 li
29.5 75.7104 li
29.5 77.7104 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
29.5 164.511 mo
33.8398 164.511 li
35.5 164.511 li
35.5 162.511 li
33.8398 162.511 li
29.5 162.511 li
29.5 164.511 li
cp
39.5 164.511 mo
42.52 164.511 li
45.5 164.511 li
45.5 162.511 li
42.52 162.511 li
39.5 162.511 li
39.5 164.511 li
cp
49.5 164.511 mo
51.2002 164.511 li
55.5 164.511 li
55.5 162.511 li
51.2002 162.511 li
49.5 162.511 li
49.5 164.511 li
cp
59.5 164.511 mo
59.8799 164.511 li
64.2202 164.511 li
65.5 164.511 li
65.5 162.511 li
64.2202 162.511 li
59.8799 162.511 li
59.5 162.511 li
59.5 164.511 li
cp
69.5 164.511 mo
72.8999 164.511 li
75.5 164.511 li
75.5 162.511 li
72.8999 162.511 li
69.5 162.511 li
69.5 164.511 li
cp
79.5 164.511 mo
81.5801 164.511 li
85.5 164.511 li
85.5 162.511 li
81.5801 162.511 li
79.5 162.511 li
79.5 164.511 li
cp
89.5 164.511 mo
90.2598 164.511 li
94.6001 164.511 li
95.5 164.511 li
95.5 162.511 li
94.6001 162.511 li
90.2598 162.511 li
89.5 162.511 li
89.5 164.511 li
cp
99.5 164.511 mo
103.28 164.511 li
105.5 164.511 li
105.5 162.511 li
103.28 162.511 li
99.5 162.511 li
99.5 164.511 li
cp
109.5 164.511 mo
111.96 164.511 li
115.5 164.511 li
115.5 162.511 li
111.96 162.511 li
109.5 162.511 li
109.5 164.511 li
cp
119.5 164.511 mo
120.64 164.511 li
124.98 164.511 li
125.5 164.511 li
125.5 162.511 li
124.98 162.511 li
120.64 162.511 li
119.5 162.511 li
119.5 164.511 li
cp
129.5 164.511 mo
133.66 164.511 li
135.5 164.511 li
135.5 162.511 li
133.66 162.511 li
129.5 162.511 li
129.5 164.511 li
cp
139.5 164.511 mo
142.34 164.511 li
145.5 164.511 li
145.5 162.511 li
142.34 162.511 li
139.5 162.511 li
139.5 164.511 li
cp
149.5 164.511 mo
151.02 164.511 li
155.36 164.511 li
155.5 164.511 li
155.5 162.511 li
155.36 162.511 li
151.02 162.511 li
149.5 162.511 li
149.5 164.511 li
cp
159.5 164.511 mo
159.7 164.511 li
164.04 164.511 li
165.5 164.511 li
165.5 162.511 li
164.04 162.511 li
159.7 162.511 li
159.5 162.511 li
159.5 164.511 li
cp
169.5 164.511 mo
172.72 164.511 li
175.5 164.511 li
175.5 162.511 li
172.72 162.511 li
169.5 162.511 li
169.5 164.511 li
cp
179.5 164.511 mo
181.4 164.511 li
185.5 164.511 li
185.5 162.511 li
181.4 162.511 li
179.5 162.511 li
179.5 164.511 li
cp
189.5 164.511 mo
190.08 164.511 li
194.42 164.511 li
195.5 164.511 li
195.5 162.511 li
194.42 162.511 li
190.08 162.511 li
189.5 162.511 li
189.5 164.511 li
cp
199.5 164.511 mo
203.1 164.511 li
205.5 164.511 li
205.5 162.511 li
203.1 162.511 li
199.5 162.511 li
199.5 164.511 li
cp
209.5 164.511 mo
211.78 164.511 li
215.5 164.511 li
215.5 162.511 li
211.78 162.511 li
209.5 162.511 li
209.5 164.511 li
cp
219.5 164.511 mo
220.46 164.511 li
224.8 164.511 li
225.5 164.511 li
225.5 162.511 li
224.8 162.511 li
220.46 162.511 li
219.5 162.511 li
219.5 164.511 li
cp
229.5 164.511 mo
233.48 164.511 li
235.5 164.511 li
235.5 162.511 li
233.48 162.511 li
229.5 162.511 li
229.5 164.511 li
cp
239.5 164.511 mo
242.16 164.511 li
245.5 164.511 li
245.5 162.511 li
242.16 162.511 li
239.5 162.511 li
239.5 164.511 li
cp
249.5 164.511 mo
250.84 164.511 li
255.18 164.511 li
255.5 164.511 li
255.5 162.511 li
255.18 162.511 li
250.84 162.511 li
249.5 162.511 li
249.5 164.511 li
cp
259.5 164.511 mo
259.52 164.511 li
263.86 164.511 li
265.5 164.511 li
265.5 162.511 li
263.86 162.511 li
259.52 162.511 li
259.5 162.511 li
259.5 164.511 li
cp
269.5 164.511 mo
272.54 164.511 li
275.5 164.511 li
275.5 162.511 li
272.54 162.511 li
269.5 162.511 li
269.5 164.511 li
cp
279.5 164.511 mo
281.22 164.511 li
285.5 164.511 li
285.5 162.511 li
281.22 162.511 li
279.5 162.511 li
279.5 164.511 li
cp
289.5 164.511 mo
289.9 164.511 li
294.24 164.511 li
295.5 164.511 li
295.5 162.511 li
294.24 162.511 li
289.9 162.511 li
289.5 162.511 li
289.5 164.511 li
cp
299.5 164.511 mo
302.92 164.511 li
305.5 164.511 li
305.5 162.511 li
302.92 162.511 li
299.5 162.511 li
299.5 164.511 li
cp
309.5 164.511 mo
311.6 164.511 li
315.5 164.511 li
315.5 162.511 li
311.6 162.511 li
309.5 162.511 li
309.5 164.511 li
cp
319.5 164.511 mo
320.28 164.511 li
324.62 164.511 li
325.5 164.511 li
325.5 162.511 li
324.62 162.511 li
320.28 162.511 li
319.5 162.511 li
319.5 164.511 li
cp
329.5 164.511 mo
333.3 164.511 li
335.5 164.511 li
335.5 162.511 li
333.3 162.511 li
329.5 162.511 li
329.5 164.511 li
cp
339.5 164.511 mo
341.98 164.511 li
345.5 164.511 li
345.5 162.511 li
341.98 162.511 li
339.5 162.511 li
339.5 164.511 li
cp
349.5 164.511 mo
350.66 164.511 li
355 164.511 li
355.5 164.511 li
355.5 162.511 li
355 162.511 li
350.66 162.511 li
349.5 162.511 li
349.5 164.511 li
cp
359.5 164.511 mo
363.68 164.511 li
365.5 164.511 li
365.5 162.511 li
363.68 162.511 li
359.5 162.511 li
359.5 164.511 li
cp
369.5 164.511 mo
372.36 164.511 li
375.5 164.511 li
375.5 162.511 li
372.36 162.511 li
369.5 162.511 li
369.5 164.511 li
cp
379.5 164.511 mo
381.04 164.511 li
385.38 164.511 li
385.5 164.511 li
385.5 162.511 li
385.38 162.511 li
381.04 162.511 li
379.5 162.511 li
379.5 164.511 li
cp
389.5 164.511 mo
389.72 164.511 li
394.06 164.511 li
395.5 164.511 li
395.5 162.511 li
394.06 162.511 li
389.72 162.511 li
389.5 162.511 li
389.5 164.511 li
cp
399.5 164.511 mo
402.74 164.511 li
405.5 164.511 li
405.5 162.511 li
402.74 162.511 li
399.5 162.511 li
399.5 164.511 li
cp
409.5 164.511 mo
411.42 164.511 li
415.5 164.511 li
415.5 162.511 li
411.42 162.511 li
409.5 162.511 li
409.5 164.511 li
cp
419.5 164.511 mo
420.1 164.511 li
424.439 164.511 li
425.5 164.511 li
425.5 162.511 li
424.439 162.511 li
420.1 162.511 li
419.5 162.511 li
419.5 164.511 li
cp
429.5 164.511 mo
433.12 164.511 li
435.5 164.511 li
435.5 162.511 li
433.12 162.511 li
429.5 162.511 li
429.5 164.511 li
cp
439.5 164.511 mo
441.8 164.511 li
445.5 164.511 li
445.5 162.511 li
441.8 162.511 li
439.5 162.511 li
439.5 164.511 li
cp
449.5 164.511 mo
450.48 164.511 li
454.82 164.511 li
455.5 164.511 li
455.5 162.511 li
454.82 162.511 li
450.48 162.511 li
449.5 162.511 li
449.5 164.511 li
cp
459.5 164.511 mo
463.5 164.511 li
463.5 162.511 li
459.5 162.511 li
cp
f
332.092 120.024 mo
331.736 115.94 li
331.707 115.772 li
330.753 112.144 li
330.704 112.002 li
329.327 108.817 li
329.268 108.701 li
327.609 105.918 li
327.546 105.825 li
325.697 103.395 li
325.633 103.319 li
323.659 101.198 li
323.596 101.137 li
321.54 99.2826 li
321.48 99.233 li
319.372 97.6099 li
319.315 97.5695 li
317.176 96.1476 li
317.122 96.1146 li
314.964 94.8675 li
314.915 94.8408 li
312.749 93.7466 li
312.703 93.7248 li
310.537 92.7658 li
310.494 92.7481 li
308.331 91.9073 li
308.292 91.8932 li
306.136 91.1554 li
306.1 91.1438 li
303.951 90.4987 li
303.918 90.4897 li
301.78 89.9248 li
301.75 89.9174 li
299.62 89.4242 li
299.593 89.4183 li
297.474 88.9891 li
297.449 88.9845 li
295.339 88.6115 li
295.317 88.6079 li
293.217 88.2841 li
293.197 88.2812 li
291.103 88.0019 li
291.085 87.9997 li
289.001 87.7609 li
288.984 87.7592 li
286.906 87.5551 li
286.892 87.5538 li
284.821 87.3809 li
284.808 87.3799 li
282.742 87.2349 li
282.73 87.2341 li
280.669 87.113 li
280.658 87.1125 li
278.6 87.0143 li
278.59 87.0139 li
276.537 86.9363 li
276.529 86.936 li
274.478 86.875 li
274.471 86.8748 li
272.422 86.8284 li
272.415 86.8282 li
270.368 86.7955 li
270.362 86.7955 li
268.315 86.7735 li
268.311 86.7735 li
266.266 86.7603 li
266.262 86.7603 li
264.217 86.7554 li
264.215 86.7554 li
262.17 86.7544 li
262.168 86.7544 li
260.124 86.7573 li
258.077 86.7622 li
256.033 86.7651 li
253.989 86.7666 li
253.991 86.7666 li
251.945 86.7632 li
251.948 86.7632 li
249.903 86.7534 li
249.908 86.7535 li
247.863 86.7344 li
247.867 86.7345 li
245.823 86.7066 li
245.83 86.7067 li
243.789 86.6657 li
243.795 86.6659 li
241.757 86.6117 li
241.764 86.6119 li
239.729 86.544 li
239.736 86.5443 li
237.704 86.4613 li
237.712 86.4617 li
235.687 86.3616 li
235.695 86.362 li
233.674 86.2448 li
233.683 86.2454 li
231.669 86.1116 li
231.677 86.1121 li
229.671 85.9632 li
229.68 85.9639 li
227.682 85.7979 li
227.689 85.7985 li
225.701 85.6183 li
225.707 85.6189 li
223.729 85.427 li
223.736 85.4277 li
221.768 85.2236 li
221.772 85.224 li
219.814 85.014 li
219.817 85.0143 li
217.868 84.7995 li
215.931 84.5842 li
215.929 84.584 li
214 84.374 li
213.994 84.3734 li
212.074 84.1757 li
212.064 84.1748 li
210.149 83.9956 li
210.135 83.9944 li
208.226 83.8425 li
208.206 83.8411 li
206.299 83.7283 li
206.273 83.7271 li
204.368 83.6651 li
204.333 83.6646 li
202.429 83.6694 li
202.386 83.6705 li
200.48 83.7574 li
200.427 83.7612 li
198.524 83.9502 li
198.462 83.9584 li
196.563 84.2684 li
196.492 84.2826 li
194.603 84.7328 li
194.525 84.7547 li
192.656 85.3636 li
192.575 85.394 li
190.736 86.1747 li
190.654 86.2141 li
188.857 87.1784 li
188.778 87.2258 li
187.036 88.3796 li
186.962 88.4336 li
185.284 89.7808 li
185.216 89.8403 li
183.614 91.3832 li
183.554 91.4465 li
182.037 93.1872 li
181.984 93.2531 li
180.56 95.1969 li
180.514 95.2641 li
179.19 97.4164 li
179.152 97.4843 li
177.938 99.8524 li
177.907 99.92 li
176.812 102.517 li
176.786 102.585 li
175.825 105.427 li
175.804 105.495 li
174.994 108.604 li
174.979 108.673 li
174.345 112.077 li
174.334 112.149 li
173.914 115.886 li
173.909 115.96 li
173.756 120.073 li
175.754 120.148 li
175.906 116.072 li
176.318 112.408 li
176.939 109.074 li
177.731 106.034 li
178.669 103.26 li
179.735 100.731 li
180.914 98.4314 li
182.197 96.3466 li
183.573 94.4693 li
185.033 92.7935 li
186.571 91.3121 li
188.178 90.0218 li
189.844 88.9188 li
191.56 87.9979 li
193.317 87.2519 li
195.106 86.6689 li
196.921 86.2365 li
198.753 85.9373 li
200.598 85.7541 li
202.455 85.6694 li
204.321 85.6646 li
206.194 85.7256 li
208.078 85.837 li
209.97 85.9875 li
211.878 86.1661 li
211.869 86.1651 li
213.79 86.3629 li
213.784 86.3623 li
215.713 86.5723 li
215.71 86.572 li
217.648 86.7873 li
219.597 87.0023 li
219.6 87.0026 li
221.558 87.2126 li
221.562 87.2129 li
223.53 87.417 li
223.536 87.4177 li
225.514 87.6096 li
225.521 87.6102 li
227.509 87.7904 li
227.516 87.791 li
229.514 87.957 li
229.523 87.9577 li
231.529 88.1066 li
231.537 88.1072 li
233.55 88.241 li
233.558 88.2415 li
235.579 88.3587 li
235.588 88.3591 li
237.614 88.4592 li
237.622 88.4596 li
239.654 88.5426 li
239.662 88.5429 li
241.697 88.6108 li
241.704 88.611 li
243.742 88.6652 li
243.748 88.6653 li
245.789 88.7063 li
245.796 88.7064 li
247.84 88.7343 li
247.844 88.7343 li
249.889 88.7534 li
249.894 88.7534 li
251.939 88.7632 li
251.942 88.7632 li
253.988 88.7666 li
253.99 88.7666 li
256.035 88.7651 li
258.081 88.7622 li
260.127 88.7573 li
262.171 88.7544 li
262.169 88.7544 li
264.214 88.7554 li
264.212 88.7554 li
266.257 88.7602 li
266.253 88.7602 li
268.298 88.7734 li
268.294 88.7734 li
270.341 88.7953 li
270.336 88.7953 li
272.383 88.828 li
272.377 88.8279 li
274.426 88.8743 li
274.418 88.8741 li
276.469 88.9351 li
276.461 88.9348 li
278.515 89.0125 li
278.505 89.012 li
280.558 89.11 li
282.607 89.2303 li
284.662 89.3745 li
286.718 89.5462 li
288.781 89.7488 li
290.848 89.9856 li
292.922 90.2623 li
295.002 90.5829 li
297.089 90.9518 li
299.182 91.3758 li
301.284 91.8623 li
303.391 92.4191 li
305.507 93.0539 li
307.626 93.779 li
309.748 94.6039 li
311.87 95.5432 li
313.988 96.6132 li
316.095 97.8307 li
318.179 99.2159 li
320.229 100.794 li
322.225 102.593 li
324.136 104.646 li
325.92 106.991 li
327.517 109.67 li
328.838 112.726 li
329.751 116.198 li
330.099 120.197 li
332.092 120.024 li
cp
f
330.099 120.024 mo
329.751 124.022 li
329.29 125.778 li
331.224 126.287 li
331.707 124.449 li
331.736 124.281 li
332.092 120.197 li
330.099 120.024 li
cp
328.015 129.398 mo
327.517 130.551 li
325.92 133.23 li
325.083 134.33 li
326.675 135.541 li
327.546 134.395 li
327.609 134.302 li
329.268 131.52 li
329.327 131.405 li
329.851 130.192 li
328.015 129.398 li
cp
322.544 137.285 mo
322.225 137.628 li
320.229 139.426 li
318.18 141.005 li
318.16 141.018 li
319.267 142.684 li
319.315 142.651 li
319.372 142.611 li
321.48 140.988 li
321.54 140.938 li
323.596 139.085 li
323.659 139.023 li
324.008 138.648 li
322.544 137.285 li
cp
314.832 143.12 mo
313.988 143.607 li
311.87 144.677 li
309.748 145.616 li
309.581 145.681 li
310.307 147.545 li
310.494 147.472 li
310.537 147.454 li
312.703 146.495 li
312.749 146.474 li
314.915 145.38 li
314.964 145.353 li
315.833 144.851 li
314.832 143.12 li
cp
305.866 147.044 mo
305.507 147.167 li
303.392 147.802 li
301.284 148.358 li
300.183 148.613 li
300.634 150.562 li
301.75 150.303 li
301.78 150.296 li
303.918 149.732 li
303.951 149.722 li
306.1 149.077 li
306.136 149.065 li
306.513 148.936 li
305.866 147.044 li
cp
296.316 149.405 mo
295.003 149.637 li
292.922 149.958 li
290.848 150.235 li
290.443 150.282 li
290.671 152.268 li
291.085 152.221 li
291.103 152.219 li
293.197 151.939 li
293.217 151.937 li
295.318 151.612 li
295.339 151.609 li
296.665 151.374 li
296.316 149.405 li
cp
286.495 150.693 mo
284.662 150.847 li
282.609 150.99 li
280.558 151.111 li
280.547 151.111 li
280.641 153.109 li
280.658 153.108 li
280.669 153.108 li
282.73 152.987 li
282.742 152.986 li
284.808 152.841 li
284.822 152.84 li
286.663 152.686 li
286.495 150.693 li
cp
276.56 151.282 mo
276.461 151.286 li
276.469 151.286 li
274.418 151.347 li
274.426 151.347 li
272.377 151.393 li
272.383 151.393 li
270.583 151.422 li
270.616 153.422 li
272.416 153.392 li
272.422 153.392 li
274.471 153.346 li
274.478 153.346 li
276.529 153.285 li
276.537 153.284 li
276.636 153.281 li
276.56 151.282 li
cp
266.593 151.458 mo
266.254 151.46 li
266.257 151.46 li
264.212 151.466 li
264.214 151.466 li
262.169 151.467 li
262.172 151.467 li
260.602 151.464 li
260.598 153.464 li
262.168 153.467 li
262.17 153.467 li
264.215 153.466 li
264.218 153.466 li
266.263 153.46 li
266.266 153.46 li
266.606 153.458 li
266.593 151.458 li
cp
256.601 151.456 mo
256.036 151.455 li
253.99 151.454 li
253.988 151.454 li
251.942 151.457 li
251.938 151.457 li
250.594 151.464 li
250.605 153.464 li
251.949 153.457 li
251.945 153.457 li
253.991 153.454 li
253.989 153.454 li
256.034 153.455 li
256.598 153.456 li
256.601 151.456 li
cp
246.586 151.504 mo
245.796 151.515 li
245.789 151.515 li
243.748 151.556 li
243.742 151.556 li
241.704 151.61 li
241.697 151.61 li
240.568 151.648 li
240.635 153.647 li
241.764 153.609 li
241.757 153.609 li
243.795 153.555 li
243.789 153.555 li
245.83 153.514 li
245.823 153.515 li
246.614 153.504 li
246.586 151.504 li
cp
236.556 151.814 mo
235.588 151.862 li
235.579 151.862 li
233.558 151.979 li
233.55 151.98 li
231.537 152.114 li
231.529 152.114 li
230.543 152.188 li
230.691 154.182 li
231.677 154.109 li
231.669 154.109 li
233.683 153.975 li
233.674 153.976 li
235.695 153.859 li
235.686 153.859 li
236.654 153.812 li
236.556 151.814 li
cp
226.541 152.518 mo
225.521 152.611 li
225.515 152.611 li
223.536 152.802 li
223.53 152.803 li
221.562 153.007 li
221.558 153.008 li
220.554 153.115 li
220.767 155.104 li
221.772 154.996 li
221.768 154.997 li
223.736 154.793 li
223.729 154.793 li
225.707 154.602 li
225.701 154.602 li
226.721 154.51 li
226.541 152.518 li
cp
216.574 153.553 mo
215.711 153.649 li
215.713 153.648 li
213.784 153.858 li
213.789 153.858 li
211.869 154.056 li
211.878 154.055 li
210.624 154.172 li
210.81 156.164 li
212.064 156.046 li
212.074 156.045 li
213.995 155.847 li
214 155.847 li
215.929 155.637 li
215.931 155.636 li
216.794 155.541 li
216.574 153.553 li
cp
206.669 154.467 mo
206.194 154.495 li
204.321 154.557 li
202.455 154.552 li
200.778 154.474 li
200.686 156.472 li
202.385 156.551 li
202.429 156.552 li
204.333 156.557 li
204.369 156.556 li
206.273 156.494 li
206.299 156.492 li
206.787 156.464 li
206.669 154.467 li
cp
196.927 153.986 mo
196.92 153.985 li
195.107 153.552 li
193.317 152.969 li
191.56 152.222 li
191.554 152.219 li
190.609 153.982 li
190.654 154.006 li
190.736 154.045 li
192.575 154.827 li
192.656 154.857 li
194.525 155.466 li
194.603 155.488 li
196.492 155.939 li
196.563 155.953 li
196.605 155.96 li
196.927 153.986 li
cp
188.204 150.216 mo
188.178 150.198 li
186.571 148.908 li
185.033 147.427 li
184.046 146.294 li
182.538 147.607 li
183.554 148.774 li
183.614 148.837 li
185.216 150.38 li
185.284 150.44 li
186.962 151.787 li
187.036 151.84 li
187.1 151.883 li
188.204 150.216 li
cp
181.784 143.203 mo
180.914 141.789 li
179.735 139.489 li
179.112 138.012 li
177.269 138.79 li
177.907 140.301 li
177.938 140.368 li
179.152 142.736 li
179.19 142.804 li
180.081 144.251 li
181.784 143.203 li
cp
177.776 134.322 mo
177.731 134.187 li
176.938 131.146 li
176.468 128.617 li
174.501 128.983 li
174.979 131.547 li
174.994 131.616 li
175.804 134.726 li
175.825 134.794 li
175.882 134.963 li
177.776 134.322 li
cp
175.971 124.722 mo
175.906 124.149 li
175.754 120.073 li
173.756 120.148 li
173.909 124.26 li
173.914 124.335 li
173.983 124.945 li
175.971 124.722 li
cp
f
0 120.61 mo
12 120.61 li
12 119.61 li
0 119.61 li
cp
14 120.61 mo
16 120.61 li
16 119.61 li
14 119.61 li
cp
18 120.61 mo
30 120.61 li
30 119.61 li
18 119.61 li
cp
32 120.61 mo
34 120.61 li
34 119.61 li
32 119.61 li
cp
36 120.61 mo
48 120.61 li
48 119.61 li
36 119.61 li
cp
50 120.61 mo
52 120.61 li
52 119.61 li
50 119.61 li
cp
54 120.61 mo
66 120.61 li
66 119.61 li
54 119.61 li
cp
68 120.61 mo
70 120.61 li
70 119.61 li
68 119.61 li
cp
71.9999 120.61 mo
83.9999 120.61 li
83.9999 119.61 li
71.9999 119.61 li
cp
85.9999 120.61 mo
87.9999 120.61 li
87.9999 119.61 li
85.9999 119.61 li
cp
89.9999 120.61 mo
102 120.61 li
102 119.61 li
89.9999 119.61 li
cp
104 120.61 mo
106 120.61 li
106 119.61 li
104 119.61 li
cp
108 120.61 mo
120 120.61 li
120 119.61 li
108 119.61 li
cp
122 120.61 mo
124 120.61 li
124 119.61 li
122 119.61 li
cp
126 120.61 mo
138 120.61 li
138 119.61 li
126 119.61 li
cp
140 120.61 mo
142 120.61 li
142 119.61 li
140 119.61 li
cp
144 120.61 mo
156 120.61 li
156 119.61 li
144 119.61 li
cp
158 120.61 mo
160 120.61 li
160 119.61 li
158 119.61 li
cp
162 120.61 mo
174 120.61 li
174 119.61 li
162 119.61 li
cp
176 120.61 mo
178 120.61 li
178 119.61 li
176 119.61 li
cp
180 120.61 mo
192 120.61 li
192 119.61 li
180 119.61 li
cp
194 120.61 mo
196 120.61 li
196 119.61 li
194 119.61 li
cp
198 120.61 mo
210 120.61 li
210 119.61 li
198 119.61 li
cp
212 120.61 mo
214 120.61 li
214 119.61 li
212 119.61 li
cp
216 120.61 mo
228 120.61 li
228 119.61 li
216 119.61 li
cp
230 120.61 mo
232 120.61 li
232 119.61 li
230 119.61 li
cp
234 120.61 mo
246 120.61 li
246 119.61 li
234 119.61 li
cp
248 120.61 mo
250 120.61 li
250 119.61 li
248 119.61 li
cp
252 120.61 mo
264 120.61 li
264 119.61 li
252 119.61 li
cp
266 120.61 mo
268 120.61 li
268 119.61 li
266 119.61 li
cp
270 120.61 mo
282 120.61 li
282 119.61 li
270 119.61 li
cp
283.999 120.61 mo
285.999 120.61 li
285.999 119.61 li
283.999 119.61 li
cp
287.999 120.61 mo
299.999 120.61 li
299.999 119.61 li
287.999 119.61 li
cp
301.999 120.61 mo
303.999 120.61 li
303.999 119.61 li
301.999 119.61 li
cp
305.999 120.61 mo
317.999 120.61 li
317.999 119.61 li
305.999 119.61 li
cp
319.999 120.61 mo
321.999 120.61 li
321.999 119.61 li
319.999 119.61 li
cp
323.999 120.61 mo
335.999 120.61 li
335.999 119.61 li
323.999 119.61 li
cp
337.999 120.61 mo
339.999 120.61 li
339.999 119.61 li
337.999 119.61 li
cp
341.999 120.61 mo
353.999 120.61 li
353.999 119.61 li
341.999 119.61 li
cp
355.999 120.61 mo
357.999 120.61 li
357.999 119.61 li
355.999 119.61 li
cp
359.999 120.61 mo
371.999 120.61 li
371.999 119.61 li
359.999 119.61 li
cp
373.999 120.61 mo
375.999 120.61 li
375.999 119.61 li
373.999 119.61 li
cp
377.999 120.61 mo
389.999 120.61 li
389.999 119.61 li
377.999 119.61 li
cp
391.999 120.61 mo
393.999 120.61 li
393.999 119.61 li
391.999 119.61 li
cp
395.999 120.61 mo
407.999 120.61 li
407.999 119.61 li
395.999 119.61 li
cp
409.999 120.61 mo
411.999 120.61 li
411.999 119.61 li
409.999 119.61 li
cp
413.999 120.61 mo
425.999 120.61 li
425.999 119.61 li
413.999 119.61 li
cp
427.999 120.61 mo
429.999 120.61 li
429.999 119.61 li
427.999 119.61 li
cp
431.999 120.61 mo
443.999 120.61 li
443.999 119.61 li
431.999 119.61 li
cp
445.999 120.61 mo
447.999 120.61 li
447.999 119.61 li
445.999 119.61 li
cp
449.999 120.61 mo
461.999 120.61 li
461.999 119.61 li
449.999 119.61 li
cp
463.999 120.61 mo
465.999 120.61 li
465.999 119.61 li
463.999 119.61 li
cp
467.999 120.61 mo
479.999 120.61 li
479.999 119.61 li
467.999 119.61 li
cp
481.999 120.61 mo
483.999 120.61 li
483.999 119.61 li
481.999 119.61 li
cp
485.999 120.61 mo
495 120.61 li
495 119.61 li
485.999 119.61 li
cp
f
113.364 96.2709 mo
105.484 83.9105 91.6464 75.7106 75.9004 75.7104 cv
75.9004 77.7105 li
90.9405 77.7103 104.146 85.5387 111.677 97.3462 cv
113.364 96.2709 li
cp
f
120.3 120.11 mo
120.301 111.34 117.755 103.157 113.364 96.2709 cv
111.677 97.3463 li
115.871 103.923 118.3 111.729 118.3 120.11 cv
120.3 120.11 li
cp
f
75.9004 164.511 mo
77.9746 164.511 80.0164 164.368 82.0159 164.093 cv
81.7429 162.112 li
79.8335 162.375 77.8832 162.511 75.9004 162.511 cv
75.9004 164.511 li
cp
86.0371 163.348 mo
88.048 162.878 90.0064 162.272 91.9019 161.54 cv
91.1809 159.674 li
89.3714 160.373 87.502 160.952 85.5823 161.4 cv
86.0371 163.348 li
cp
95.6454 159.889 mo
97.485 158.974 99.2521 157.936 100.936 156.784 cv
99.8066 155.134 li
98.1987 156.233 96.5113 157.225 94.7548 158.099 cv
95.6454 159.889 li
cp
104.202 154.323 mo
105.778 153.018 107.263 151.605 108.645 150.097 cv
107.17 148.746 li
105.85 150.187 104.432 151.536 102.926 152.783 cv
104.202 154.323 li
cp
111.266 146.959 mo
112.501 145.335 113.626 143.624 114.631 141.836 cv
112.888 140.856 li
111.928 142.563 110.853 144.197 109.674 145.748 cv
111.266 146.959 li
cp
116.468 138.182 mo
117.296 136.326 118.001 134.402 118.571 132.421 cv
116.649 131.868 li
116.105 133.758 115.432 135.595 114.642 137.367 cv
116.468 138.182 li
cp
119.52 128.443 mo
119.897 126.457 120.141 124.424 120.245 122.355 cv
118.247 122.255 li
118.148 124.233 117.915 126.174 117.555 128.07 cv
119.52 128.443 li
cp
f
75.5 121.11 mo
107 121.11 li
107 119.11 li
75.5 119.11 li
f
119.07 120.11 mo
113.391 122.218 106.344 125.813 101.977 129.62 cv
105.416 120.11 li
101.977 110.601 li
106.344 114.407 113.391 118.004 119.07 120.11 cv
cp
f
gsave
161.455 101.464 mo
174.755 101.464 li
174.755 84.6646 li
161.455 84.6646 li
161.455 101.464 li
cp
clp
162.135 89.5488 mo
163.116 86.6587 165.856 86.6333 166.133 86.6333 cv
169.929 86.6333 170.206 91.0322 170.206 93.0186 cv
170.206 94.5522 170.08 94.9795 169.904 95.4819 cv
169.351 97.3174 168.597 100.233 168.597 100.887 cv
168.597 101.164 168.722 101.34 168.923 101.34 cv
169.25 101.34 169.451 100.787 169.728 99.8315 cv
170.307 97.7197 170.557 96.2871 170.658 95.5068 cv
170.708 95.1797 170.758 94.8535 170.859 94.5269 cv
171.664 92.0376 173.273 88.2925 174.278 86.3066 cv
174.454 86.0044 174.756 85.4507 174.756 85.3501 cv
174.756 85.0986 174.504 85.0986 174.454 85.0986 cv
174.378 85.0986 174.228 85.0986 174.152 85.2749 cv
172.845 87.6636 171.84 90.1772 170.833 92.7168 cv
170.809 91.9365 170.784 90.0273 169.804 87.5884 cv
169.2 86.0542 168.194 84.8232 166.46 84.8232 cv
163.317 84.8232 161.558 88.6436 161.558 89.4229 cv
161.558 89.6753 161.784 89.6753 162.035 89.6753 cv
162.135 89.5488 li
f
grestore
gsave
20.3999 107.447 mo
38.6001 107.447 li
38.6001 89.373 li
20.3999 89.373 li
20.3999 107.447 li
cp
clp
29.0571 91.2271 mo
29.208 90.624 29.2837 90.3726 29.7617 90.2974 cv
29.9883 90.272 30.792 90.272 31.2954 90.272 cv
33.0801 90.272 35.8701 90.272 35.8701 92.7603 cv
35.8701 93.6152 35.4688 95.3506 34.4878 96.3301 cv
33.835 96.9844 32.5015 97.7881 30.2397 97.7881 cv
27.4229 97.7881 li
29.0571 91.2271 li
cp
32.6772 98.1147 mo
35.2173 97.562 38.209 95.8018 38.209 93.2632 cv
38.209 91.1011 35.9458 89.4922 32.6523 89.4922 cv
25.4883 89.4922 li
24.9854 89.4922 24.7588 89.4922 24.7588 89.9951 cv
24.7588 90.272 24.9854 90.272 25.4634 90.272 cv
25.5132 90.272 25.9907 90.272 26.418 90.3218 cv
26.8711 90.3726 27.0972 90.3979 27.0972 90.7236 cv
27.0972 90.8242 27.0718 90.8994 26.9966 91.2017 cv
23.6279 104.702 li
23.3765 105.683 23.3257 105.883 21.3398 105.883 cv
20.8867 105.883 20.6606 105.883 20.6606 106.386 cv
20.6606 106.663 20.9624 106.663 21.0127 106.663 cv
21.7173 106.663 23.4771 106.587 24.1802 106.587 cv
24.8843 106.587 26.6699 106.663 27.3726 106.663 cv
27.5742 106.663 27.876 106.663 27.876 106.159 cv
27.876 105.883 27.6494 105.883 27.1729 105.883 cv
26.2422 105.883 25.5376 105.883 25.5376 105.431 cv
25.5376 105.28 25.5879 105.154 25.6133 105.003 cv
27.2725 98.3418 li
30.2646 98.3418 li
32.5518 98.3418 33.0044 99.7495 33.0044 100.63 cv
33.0044 101.006 32.8032 101.786 32.6523 102.364 cv
32.4766 103.067 32.251 103.999 32.251 104.5 cv
32.251 107.216 35.2676 107.216 35.5947 107.216 cv
37.7305 107.216 38.6108 104.677 38.6108 104.325 cv
38.6108 104.024 38.3345 104.024 38.3091 104.024 cv
38.083 104.024 38.0327 104.199 37.9819 104.375 cv
37.353 106.235 36.2729 106.663 35.6943 106.663 cv
34.8647 106.663 34.689 106.109 34.689 105.129 cv
34.689 104.349 34.8398 103.067 34.9404 102.264 cv
34.9907 101.912 35.041 101.434 35.041 101.082 cv
35.041 99.1455 33.3569 98.3662 32.6772 98.1147 cv
f
grestore
gsave
416.193 101.465 mo
428.094 101.465 li
428.094 84.6646 li
416.193 84.6646 li
416.193 101.465 li
cp
clp
427.684 86.7373 mo
427.709 86.5864 427.76 86.4604 427.76 86.2847 cv
427.76 85.8569 427.457 85.6055 427.03 85.6055 cv
426.779 85.6055 426.101 85.7817 426 86.6875 cv
425.547 85.7563 424.668 85.1035 423.661 85.1035 cv
420.796 85.1035 417.679 88.6235 417.679 92.2422 cv
417.679 94.7314 419.212 96.2148 421.021 96.2148 cv
422.506 96.2148 423.687 95.0337 423.938 94.7568 cv
423.963 94.7817 li
423.436 97.02 423.135 98.0503 423.135 98.1006 cv
423.033 98.3271 422.178 100.815 419.514 100.815 cv
419.035 100.815 418.207 100.79 417.502 100.564 cv
418.258 100.338 418.533 99.6841 418.533 99.2568 cv
418.533 98.854 418.258 98.377 417.578 98.377 cv
417.024 98.377 416.221 98.8286 416.221 99.835 cv
416.221 100.865 417.15 101.368 419.564 101.368 cv
422.707 101.368 424.517 99.4077 424.895 97.8989 cv
427.684 86.7373 li
cp
424.416 92.9971 mo
424.266 93.6514 423.687 94.2788 423.135 94.7568 cv
422.605 95.21 421.826 95.6616 421.098 95.6616 cv
419.841 95.6616 419.463 94.3545 419.463 93.3491 cv
419.463 92.1421 420.191 89.1753 420.871 87.8936 cv
421.551 86.6621 422.631 85.6558 423.687 85.6558 cv
425.346 85.6558 425.697 87.6924 425.697 87.8184 cv
425.697 87.9438 425.647 88.0952 425.623 88.1953 cv
424.416 92.9971 li
f
grestore
gsave
199.061 146.233 mo
257.861 146.233 li
257.861 129.433 li
199.061 129.433 li
199.061 146.233 li
cp
clp
204.519 131.878 mo
204.644 131.352 204.896 130.396 204.896 130.271 cv
204.896 129.843 204.595 129.592 204.167 129.592 cv
204.091 129.592 203.387 129.617 203.161 130.496 cv
199.542 145.052 li
199.466 145.354 199.466 145.404 199.466 145.454 cv
199.466 145.832 199.741 146.134 200.169 146.134 cv
200.697 146.134 200.999 145.681 201.049 145.604 cv
201.15 145.379 201.476 144.071 202.432 140.2 cv
203.236 140.88 204.368 140.979 204.87 140.979 cv
206.63 140.979 207.611 139.849 208.213 139.145 cv
208.44 140.276 209.371 140.979 210.477 140.979 cv
211.356 140.979 211.935 140.401 212.337 139.598 cv
212.765 138.692 213.091 137.159 213.091 137.108 cv
213.091 136.856 212.865 136.856 212.79 136.856 cv
212.538 136.856 212.513 136.957 212.438 137.31 cv
212.01 138.943 211.557 140.427 210.527 140.427 cv
209.848 140.427 209.772 139.773 209.772 139.271 cv
209.772 138.718 210.074 137.536 210.275 136.655 cv
210.979 133.94 li
211.055 133.563 211.307 132.608 211.406 132.231 cv
211.532 131.652 211.784 130.697 211.784 130.547 cv
211.784 130.094 211.432 129.867 211.055 129.867 cv
210.93 129.867 210.275 129.893 210.074 130.748 cv
208.893 135.448 li
208.591 136.706 208.314 137.763 208.239 138.014 cv
208.213 138.14 207.007 140.427 204.971 140.427 cv
203.714 140.427 203.11 139.598 203.11 138.239 cv
203.11 137.511 203.286 136.806 203.462 136.103 cv
204.519 131.878 li
f
219.709 133.325 mo
219.709 132.851 219.674 132.833 219.182 132.833 cv
218.06 133.939 216.463 133.956 215.743 133.956 cv
215.743 134.589 li
216.164 134.589 217.322 134.589 218.287 134.097 cv
218.287 143.045 li
218.287 143.624 218.287 143.853 216.533 143.853 cv
215.867 143.853 li
215.867 144.483 li
216.182 144.466 218.34 144.413 218.989 144.413 cv
219.533 144.413 221.744 144.466 222.129 144.483 cv
222.129 143.853 li
221.463 143.853 li
219.709 143.853 219.709 143.624 219.709 143.045 cv
219.709 133.325 li
f
230.205 140.678 mo
230.205 139.019 229.576 138.039 228.595 138.039 cv
227.765 138.039 227.263 138.667 227.263 139.37 cv
227.263 140.049 227.765 140.703 228.595 140.703 cv
228.898 140.703 229.224 140.603 229.475 140.376 cv
229.601 140.3 li
229.626 140.3 229.651 140.325 229.651 140.678 cv
229.651 142.538 228.772 144.046 227.942 144.877 cv
227.666 145.152 227.666 145.203 227.666 145.278 cv
227.666 145.454 227.791 145.556 227.917 145.556 cv
228.193 145.556 230.205 143.619 230.205 140.678 cv
f
237.131 145.052 mo
237.057 145.354 237.057 145.404 237.057 145.454 cv
237.057 145.832 237.332 146.134 237.76 146.134 cv
238.289 146.134 238.59 145.681 238.639 145.604 cv
238.766 145.379 239.568 142.011 240.248 139.296 cv
240.75 140.3 241.557 140.979 242.736 140.979 cv
245.678 140.979 248.922 137.435 248.922 133.688 cv
248.922 131.024 247.262 129.592 245.428 129.592 cv
242.988 129.592 240.35 132.105 239.596 135.172 cv
237.131 145.052 li
cp
242.713 140.427 mo
240.951 140.427 240.549 138.415 240.549 138.188 cv
240.549 138.089 240.676 137.586 240.75 137.259 cv
241.455 134.443 241.707 133.538 242.26 132.532 cv
243.342 130.697 244.598 130.144 245.377 130.144 cv
246.307 130.144 247.111 130.874 247.111 132.608 cv
247.111 133.991 246.383 136.806 245.703 138.039 cv
244.873 139.622 243.668 140.427 242.713 140.427 cv
f
255.129 133.325 mo
255.129 132.851 255.094 132.833 254.602 132.833 cv
253.48 133.939 251.883 133.956 251.162 133.956 cv
251.162 134.589 li
251.584 134.589 252.742 134.589 253.707 134.097 cv
253.707 143.045 li
253.707 143.624 253.707 143.853 251.953 143.853 cv
251.287 143.853 li
251.287 144.483 li
251.602 144.466 253.76 144.413 254.41 144.413 cv
254.953 144.413 257.164 144.466 257.549 144.483 cv
257.549 143.853 li
256.883 143.853 li
255.129 143.853 255.129 143.624 255.129 143.045 cv
255.129 133.325 li
f
grestore
gsave
350.909 150.21 mo
410.409 150.21 li
410.409 133.411 li
350.909 133.411 li
350.909 150.21 li
cp
clp
356.367 135.856 mo
356.492 135.329 356.744 134.373 356.744 134.247 cv
356.744 133.819 356.443 133.569 356.015 133.569 cv
355.939 133.569 355.235 133.595 355.009 134.474 cv
351.39 149.029 li
351.314 149.331 351.314 149.382 351.314 149.433 cv
351.314 149.81 351.59 150.11 352.018 150.11 cv
352.545 150.11 352.848 149.658 352.897 149.583 cv
352.998 149.356 353.324 148.05 354.28 144.177 cv
355.084 144.856 356.217 144.957 356.719 144.957 cv
358.479 144.957 359.459 143.827 360.062 143.122 cv
360.288 144.253 361.219 144.957 362.324 144.957 cv
363.204 144.957 363.783 144.379 364.186 143.575 cv
364.613 142.669 364.939 141.136 364.939 141.085 cv
364.939 140.834 364.713 140.834 364.639 140.834 cv
364.387 140.834 364.361 140.935 364.286 141.286 cv
363.857 142.921 363.405 144.403 362.375 144.403 cv
361.695 144.403 361.62 143.751 361.62 143.247 cv
361.62 142.694 361.922 141.513 362.123 140.633 cv
362.828 137.917 li
362.903 137.54 363.154 136.586 363.254 136.208 cv
363.381 135.63 363.632 134.675 363.632 134.524 cv
363.632 134.071 363.279 133.845 362.903 133.845 cv
362.777 133.845 362.123 133.87 361.922 134.726 cv
360.74 139.427 li
360.439 140.683 360.162 141.739 360.087 141.991 cv
360.062 142.116 358.855 144.403 356.818 144.403 cv
355.563 144.403 354.959 143.575 354.959 142.216 cv
354.959 141.487 355.135 140.783 355.311 140.081 cv
356.367 135.856 li
f
374.54 145.268 mo
373.943 145.268 li
373.89 145.653 373.715 146.688 373.486 146.864 cv
373.346 146.97 371.996 146.97 371.75 146.97 cv
368.521 146.97 li
370.363 145.338 370.978 144.847 372.03 144.022 cv
373.329 142.986 374.54 141.899 374.54 140.232 cv
374.54 138.108 372.68 136.812 370.434 136.812 cv
368.258 136.812 366.785 138.338 366.785 139.951 cv
366.785 140.847 367.539 140.935 367.715 140.935 cv
368.136 140.935 368.645 140.636 368.645 140.004 cv
368.645 139.688 368.521 139.074 367.608 139.074 cv
368.153 137.828 369.346 137.442 370.17 137.442 cv
371.926 137.442 372.838 138.812 372.838 140.232 cv
372.838 141.758 371.75 142.969 371.188 143.601 cv
366.96 147.776 li
366.785 147.935 366.785 147.97 366.785 148.46 cv
374.013 148.46 li
374.54 145.268 li
f
382.053 144.655 mo
382.053 142.996 381.424 142.017 380.443 142.017 cv
379.614 142.017 379.111 142.644 379.111 143.349 cv
379.111 144.026 379.614 144.681 380.443 144.681 cv
380.746 144.681 381.072 144.58 381.323 144.354 cv
381.449 144.278 li
381.475 144.278 381.5 144.304 381.5 144.655 cv
381.5 146.516 380.621 148.024 379.79 148.854 cv
379.514 149.13 379.514 149.181 379.514 149.256 cv
379.514 149.433 379.639 149.532 379.765 149.532 cv
380.041 149.532 382.053 147.597 382.053 144.655 cv
f
388.979 149.029 mo
388.904 149.331 388.904 149.382 388.904 149.433 cv
388.904 149.81 389.18 150.11 389.607 150.11 cv
390.137 150.11 390.438 149.658 390.487 149.583 cv
390.613 149.356 391.417 145.987 392.097 143.272 cv
392.598 144.278 393.404 144.957 394.585 144.957 cv
397.525 144.957 400.77 141.412 400.77 137.666 cv
400.77 135.002 399.11 133.569 397.275 133.569 cv
394.836 133.569 392.197 136.083 391.443 139.149 cv
388.979 149.029 li
cp
394.561 144.403 mo
392.8 144.403 392.397 142.393 392.397 142.166 cv
392.397 142.066 392.523 141.563 392.598 141.236 cv
393.303 138.421 393.555 137.516 394.107 136.511 cv
395.189 134.675 396.445 134.122 397.225 134.122 cv
398.154 134.122 398.96 134.851 398.96 136.586 cv
398.96 137.968 398.23 140.783 397.552 142.017 cv
396.722 143.6 395.516 144.403 394.561 144.403 cv
f
409.961 145.268 mo
409.363 145.268 li
409.311 145.653 409.135 146.688 408.906 146.864 cv
408.767 146.97 407.416 146.97 407.17 146.97 cv
403.941 146.97 li
405.783 145.338 406.397 144.847 407.451 144.022 cv
408.749 142.986 409.961 141.899 409.961 140.232 cv
409.961 138.108 408.1 136.812 405.854 136.812 cv
403.678 136.812 402.205 138.338 402.205 139.951 cv
402.205 140.847 402.959 140.935 403.135 140.935 cv
403.557 140.935 404.064 140.636 404.064 140.004 cv
404.064 139.688 403.941 139.074 403.029 139.074 cv
403.573 137.828 404.766 137.442 405.59 137.442 cv
407.345 137.442 408.258 138.812 408.258 140.232 cv
408.258 141.758 407.17 142.969 406.608 143.601 cv
402.381 147.776 li
402.205 147.935 402.205 147.97 402.205 148.46 cv
409.433 148.46 li
409.961 145.268 li
f
grestore
412.159 97.4102 mo
380.659 97.4102 li
380.659 99.4102 li
412.159 99.4102 li
f
368.589 98.4102 mo
374.269 96.3027 381.315 92.707 385.683 88.9004 cv
382.243 98.4102 li
385.683 107.92 li
381.315 104.113 374.269 100.517 368.589 98.4102 cv
cp
f
80.5801 76.7104 mo
80.5801 163.511 li
82.5801 163.511 li
82.5801 76.7104 li
f
gsave
81.8506 117.433 mo
113.351 117.433 li
113.351 99.3594 li
81.8506 99.3594 li
81.8506 117.433 li
cp
clp
84.2734 114.713 mo
86.9385 112.124 li
90.8599 108.655 92.3682 107.297 92.3682 104.783 cv
92.3682 101.917 90.1064 99.9063 87.0386 99.9063 cv
84.1978 99.9063 82.3374 102.22 82.3374 104.457 cv
82.3374 105.864 83.5952 105.864 83.6699 105.864 cv
84.0972 105.864 84.9775 105.563 84.9775 104.532 cv
84.9775 103.879 84.5249 103.225 83.6445 103.225 cv
83.4443 103.225 83.394 103.225 83.3184 103.25 cv
83.896 101.615 85.2544 100.685 86.7124 100.685 cv
88.9995 100.685 90.0811 102.721 90.0811 104.783 cv
90.0811 106.794 88.8232 108.781 87.4409 110.339 cv
82.6143 115.719 li
82.3374 115.996 82.3374 116.045 82.3374 116.649 cv
91.665 116.649 li
92.3682 112.275 li
91.7402 112.275 li
91.6143 113.029 91.4385 114.135 91.187 114.512 cv
91.0107 114.713 89.3516 114.713 88.7979 114.713 cv
84.2734 114.713 li
f
109.575 102.119 mo
109.825 101.087 110.278 100.333 112.29 100.258 cv
112.416 100.258 112.717 100.233 112.717 99.7554 cv
112.717 99.73 112.717 99.4785 112.39 99.4785 cv
111.561 99.4785 110.681 99.5537 109.825 99.5537 cv
108.971 99.5537 108.041 99.4785 107.211 99.4785 cv
107.061 99.4785 106.759 99.4785 106.759 99.9814 cv
106.759 100.258 107.01 100.258 107.211 100.258 cv
108.644 100.284 108.921 100.811 108.921 101.364 cv
108.845 101.892 li
106.583 110.866 li
105.728 114.235 102.838 116.423 100.323 116.423 cv
98.6133 116.423 97.2563 115.317 97.2563 113.154 cv
97.2563 113.104 97.2563 112.301 97.5332 111.194 cv
99.9707 101.415 li
100.197 100.51 100.248 100.258 102.083 100.258 cv
102.737 100.258 102.937 100.258 102.937 99.7554 cv
102.937 99.4785 102.661 99.4785 102.586 99.4785 cv
101.882 99.4785 100.071 99.5537 99.3682 99.5537 cv
98.6387 99.5537 96.8535 99.4785 96.125 99.4785 cv
95.9238 99.4785 95.6475 99.4785 95.6475 99.9814 cv
95.6475 100.258 95.8735 100.258 96.3506 100.258 cv
96.4009 100.258 96.8789 100.258 97.3062 100.308 cv
97.7593 100.359 97.9844 100.384 97.9844 100.71 cv
97.9844 100.861 97.709 101.917 97.5581 102.495 cv
97.0044 104.708 li
96.7783 105.689 95.5718 110.44 95.4712 110.917 cv
95.2949 111.621 95.2949 111.999 95.2949 112.376 cv
95.2949 115.443 97.583 117.203 100.222 117.203 cv
103.39 117.203 106.507 114.361 107.337 111.043 cv
109.575 102.119 li
f
grestore
42.02 76.7104 mo
42.02 120.11 li
43.02 120.11 li
43.02 76.7104 li
f
gsave
157.9 64.8496 mo
337.1 64.8496 li
337.1 12.4756 li
157.9 12.4756 li
157.9 64.8496 li
cp
clp
172.918 32.4009 mo
174.15 30.4404 175.205 30.3652 176.137 30.3145 cv
176.438 30.2891 176.463 29.8618 176.463 29.8364 cv
176.463 29.6357 176.338 29.5347 176.137 29.5347 cv
175.482 29.5347 174.754 29.6104 174.074 29.6104 cv
173.244 29.6104 172.391 29.5347 171.585 29.5347 cv
171.436 29.5347 171.108 29.5347 171.108 30.0132 cv
171.108 30.2891 171.334 30.3145 171.51 30.3145 cv
172.188 30.3652 172.667 30.6167 172.667 31.1436 cv
172.667 31.521 172.289 32.0747 172.289 32.1001 cv
164.572 44.3672 li
162.862 31.0684 li
162.862 30.6421 163.439 30.3145 164.598 30.3145 cv
164.948 30.3145 165.225 30.3145 165.225 29.8115 cv
165.225 29.585 165.023 29.5347 164.873 29.5347 cv
163.867 29.5347 162.787 29.6104 161.756 29.6104 cv
161.304 29.6104 160.826 29.585 160.373 29.585 cv
159.92 29.585 159.443 29.5347 159.016 29.5347 cv
158.84 29.5347 158.537 29.5347 158.537 30.0132 cv
158.537 30.3145 158.764 30.3145 159.166 30.3145 cv
160.574 30.3145 160.6 30.5405 160.675 31.1689 cv
162.661 46.6802 li
162.736 47.1836 162.837 47.2588 163.163 47.2588 cv
163.566 47.2588 163.666 47.1328 163.867 46.8062 cv
172.918 32.4009 li
f
181.777 38.7656 mo
181.848 38.4849 li
181.848 38.3975 181.777 38.2402 181.567 38.2402 cv
181.217 38.2402 179.761 38.3804 179.322 38.415 cv
179.182 38.4321 178.936 38.4497 178.936 38.8184 cv
178.936 39.0645 179.182 39.0645 179.393 39.0645 cv
180.234 39.0645 180.234 39.1875 180.234 39.3271 cv
180.234 39.4507 180.199 39.5562 180.164 39.7134 cv
179.164 43.7129 li
178.795 43.1348 178.199 42.6787 177.356 42.6787 cv
175.111 42.6787 172.83 45.1523 172.83 47.6792 cv
172.83 49.3813 173.971 50.5903 175.48 50.5903 cv
176.427 50.5903 177.27 50.0469 177.971 49.3633 cv
178.305 50.4155 179.322 50.5903 179.778 50.5903 cv
180.41 50.5903 180.848 50.2056 181.164 49.6606 cv
181.551 48.9771 181.777 47.9766 181.777 47.9067 cv
181.777 47.6792 181.551 47.6792 181.498 47.6792 cv
181.252 47.6792 181.234 47.749 181.111 48.2227 cv
180.9 49.0649 180.566 50.0996 179.831 50.0996 cv
179.375 50.0996 179.251 49.7134 179.251 49.2397 cv
179.251 48.9077 179.286 48.749 179.34 48.5215 cv
181.777 38.7656 li
cp
178.041 48.2227 mo
177.918 48.7134 177.531 49.0649 177.146 49.3984 cv
176.988 49.5386 176.286 50.0996 175.532 50.0996 cv
174.883 50.0996 174.252 49.6436 174.252 48.3975 cv
174.252 47.4678 174.76 45.5386 175.164 44.8369 cv
175.971 43.4331 176.865 43.1694 177.356 43.1694 cv
178.585 43.1694 178.918 44.5024 178.918 44.6968 cv
178.865 44.9414 li
178.041 48.2227 li
f
186.384 46.8716 mo
186.4 46.7666 186.805 45.1875 186.839 45.1001 cv
186.875 44.959 187.383 44.082 187.943 43.6602 cv
188.138 43.521 188.611 43.1694 189.365 43.1694 cv
189.541 43.1694 189.979 43.187 190.331 43.4155 cv
189.77 43.5728 189.559 44.0645 189.559 44.3799 cv
189.559 44.7661 189.857 45.0303 190.262 45.0303 cv
190.663 45.0303 191.242 44.6968 191.242 43.959 cv
191.242 43.0469 190.278 42.6787 189.383 42.6787 cv
188.471 42.6787 187.682 43.0469 186.91 43.9243 cv
186.593 42.8535 185.523 42.6787 185.103 42.6787 cv
184.453 42.6787 184.015 43.082 183.732 43.5728 cv
183.33 44.2578 183.085 45.2749 183.085 45.3623 cv
183.085 45.5908 183.33 45.5908 183.383 45.5908 cv
183.629 45.5908 183.646 45.5386 183.769 45.0649 cv
184.032 43.9946 184.365 43.1694 185.049 43.1694 cv
185.506 43.1694 185.629 43.5557 185.629 44.0293 cv
185.629 44.3628 185.471 45.0117 185.348 45.4863 cv
185.225 45.96 185.049 46.6782 184.962 47.0645 cv
184.4 49.3096 li
184.33 49.5386 184.225 49.9766 184.225 50.0293 cv
184.225 50.4155 184.541 50.5903 184.821 50.5903 cv
185.085 50.5903 185.436 50.4331 185.576 50.082 cv
185.611 49.9766 185.805 49.2051 185.908 48.7661 cv
186.384 46.8716 li
f
201.446 45.7485 mo
201.446 43.8018 199.99 42.6787 198.27 42.6787 cv
195.674 42.6787 193.219 45.1177 193.219 47.5205 cv
193.219 49.2744 194.498 50.5903 196.41 50.5903 cv
198.92 50.5903 201.446 48.2754 201.446 45.7485 cv
cp
196.429 50.0996 mo
195.551 50.0996 194.674 49.5386 194.674 48.1528 cv
194.674 47.4331 195.008 45.7139 195.691 44.7139 cv
196.446 43.6255 197.463 43.1694 198.252 43.1694 cv
199.199 43.1694 200.008 43.8193 200.008 45.1177 cv
200.008 45.5386 199.797 47.2759 199.025 48.5034 cv
198.357 49.5386 197.306 50.0996 196.429 50.0996 cv
f
203.316 52.5557 mo
203.193 53.0474 203.158 53.1875 202.457 53.1875 cv
202.229 53.1875 201.982 53.1875 201.982 53.5562 cv
201.982 53.7495 202.141 53.8193 202.229 53.8193 cv
202.685 53.8193 203.264 53.7495 203.736 53.7495 cv
204.333 53.7495 205 53.8193 205.579 53.8193 cv
205.738 53.8193 205.93 53.7666 205.93 53.4331 cv
205.93 53.1875 205.686 53.1875 205.474 53.1875 cv
205.088 53.1875 204.613 53.1875 204.613 52.9771 cv
204.613 52.8896 204.736 52.4336 204.809 52.1694 cv
205.018 51.2397 205.264 50.293 205.456 49.5562 cv
205.666 49.9067 206.211 50.5903 207.264 50.5903 cv
209.404 50.5903 211.772 48.2227 211.772 45.6084 cv
211.772 43.5557 210.351 42.6787 209.141 42.6787 cv
208.053 42.6787 207.123 43.4155 206.649 43.9072 cv
206.352 42.9067 205.369 42.6787 204.842 42.6787 cv
204.158 42.6787 203.736 43.1348 203.456 43.6084 cv
203.105 44.2051 202.824 45.2573 202.824 45.3623 cv
202.824 45.5908 203.07 45.5908 203.123 45.5908 cv
203.368 45.5908 203.387 45.5386 203.508 45.0649 cv
203.771 44.0464 204.105 43.1694 204.789 43.1694 cv
205.246 43.1694 205.369 43.5557 205.369 44.0293 cv
205.369 44.2227 205.334 44.4507 205.316 44.5552 cv
203.316 52.5557 li
cp
206.632 44.7842 mo
207.648 43.4331 208.527 43.1694 209.088 43.1694 cv
209.772 43.1694 210.368 43.6782 210.368 44.8716 cv
210.368 45.5908 209.982 47.3804 209.457 48.3975 cv
209.018 49.2573 208.158 50.0996 207.264 50.0996 cv
206.018 50.0996 205.702 48.749 205.702 48.5737 cv
205.755 48.3101 li
206.632 44.7842 li
f
237.821 38.4849 mo
238.199 38.4849 238.676 38.4849 238.676 37.9814 cv
238.676 37.4785 238.199 37.4785 237.846 37.4785 cv
222.788 37.4785 li
222.436 37.4785 221.958 37.4785 221.958 37.9814 cv
221.958 38.4849 222.436 38.4849 222.813 38.4849 cv
237.821 38.4849 li
cp
237.846 43.3623 mo
238.199 43.3623 238.676 43.3623 238.676 42.8589 cv
238.676 42.3564 238.199 42.3564 237.821 42.3564 cv
222.813 42.3564 li
222.436 42.3564 221.958 42.3564 221.958 42.8589 cv
221.958 43.3623 222.436 43.3623 222.788 43.3623 cv
237.846 43.3623 li
f
257.481 25.5469 mo
257.481 27.7344 li
257.481 28.6401 257.433 28.916 255.572 28.916 cv
255.043 28.916 li
255.043 29.6958 li
256.073 29.6201 257.382 29.6201 258.436 29.6201 cv
259.491 29.6201 260.826 29.6201 261.855 29.6958 cv
261.855 28.916 li
261.328 28.916 li
259.467 28.916 259.416 28.6401 259.416 27.7344 cv
259.416 25.5469 li
261.932 25.5469 li
261.932 24.7686 li
259.416 24.7686 li
259.416 13.3301 li
259.416 12.8267 259.416 12.6758 259.016 12.6758 cv
258.789 12.6758 258.713 12.6758 258.513 12.978 cv
250.795 24.7686 li
250.795 25.5469 li
257.481 25.5469 li
cp
257.632 24.7686 mo
251.498 24.7686 li
257.632 15.3901 li
257.632 24.7686 li
cp
f
250.095 41.1212 mo
262.646 41.1212 li
262.646 39.6884 li
250.095 39.6884 li
f
257.382 55.0762 mo
259.441 54.3979 260.9 52.6377 260.9 50.6519 cv
260.9 48.5903 258.689 47.1821 256.274 47.1821 cv
253.735 47.1821 251.824 48.6909 251.824 50.6016 cv
251.824 51.4307 252.378 51.9087 253.106 51.9087 cv
253.886 51.9087 254.389 51.3555 254.389 50.627 cv
254.389 49.3696 253.208 49.3696 252.83 49.3696 cv
253.609 48.1372 255.268 47.8115 256.174 47.8115 cv
257.205 47.8115 258.588 48.3633 258.588 50.627 cv
258.588 50.9282 258.537 52.3862 257.884 53.4922 cv
257.129 54.6987 256.274 54.7739 255.646 54.7993 cv
255.444 54.8247 254.842 54.8745 254.665 54.8745 cv
254.465 54.8999 254.289 54.9253 254.289 55.1768 cv
254.289 55.4536 254.465 55.4536 254.891 55.4536 cv
255.997 55.4536 li
258.059 55.4536 258.99 57.1631 258.99 59.627 cv
258.99 63.0464 257.256 63.7744 256.148 63.7744 cv
255.068 63.7744 253.182 63.3472 252.303 61.8638 cv
253.182 61.9893 253.963 61.4365 253.963 60.4814 cv
253.963 59.5771 253.283 59.0737 252.555 59.0737 cv
251.951 59.0737 251.146 59.4258 251.146 60.5313 cv
251.146 62.8198 253.484 64.479 256.224 64.479 cv
259.292 64.479 261.579 62.1909 261.579 59.627 cv
261.579 57.5654 259.994 55.604 257.382 55.0762 cv
f
272.293 37.3286 mo
275.132 37.3286 li
274.304 41.0488 274.076 42.1304 274.076 43.8149 cv
274.076 44.1909 274.076 44.8701 274.279 45.7256 cv
274.53 46.8315 274.807 46.9824 275.183 46.9824 cv
275.686 46.9824 276.215 46.5293 276.215 46.0264 cv
276.215 45.876 276.215 45.8257 276.063 45.4736 cv
275.334 43.6636 275.334 42.0298 275.334 41.3257 cv
275.334 39.9937 275.51 38.6357 275.787 37.3286 cv
278.652 37.3286 li
278.979 37.3286 279.885 37.3286 279.885 36.4736 cv
279.885 35.8701 279.356 35.8701 278.879 35.8701 cv
270.456 35.8701 li
269.904 35.8701 268.948 35.8701 267.844 37.0518 cv
266.962 38.0322 266.31 39.188 266.31 39.314 cv
266.31 39.3394 266.31 39.5654 266.61 39.5654 cv
266.812 39.5654 266.861 39.4648 267.012 39.2632 cv
268.244 37.3286 269.703 37.3286 270.206 37.3286 cv
271.639 37.3286 li
270.834 40.3706 269.478 43.4121 268.42 45.7007 cv
268.219 46.0767 268.219 46.1265 268.219 46.3032 cv
268.219 46.7808 268.621 46.9824 268.948 46.9824 cv
269.703 46.9824 269.904 46.2778 270.206 45.3481 cv
270.558 44.1909 270.558 44.1416 270.885 42.8838 cv
272.293 37.3286 li
f
290.317 31.2695 mo
290.468 30.6665 290.545 30.415 291.021 30.3398 cv
291.248 30.3145 292.053 30.3145 292.556 30.3145 cv
294.34 30.3145 297.13 30.3145 297.13 32.8027 cv
297.13 33.6577 296.729 35.3931 295.748 36.373 cv
295.094 37.0269 293.762 37.8311 291.5 37.8311 cv
288.684 37.8311 li
290.317 31.2695 li
cp
293.938 38.1582 mo
296.477 37.6045 299.469 35.8447 299.469 33.3057 cv
299.469 31.1436 297.205 29.5347 293.912 29.5347 cv
286.749 29.5347 li
286.244 29.5347 286.02 29.5347 286.02 30.0381 cv
286.02 30.3145 286.244 30.3145 286.723 30.3145 cv
286.773 30.3145 287.251 30.3145 287.679 30.3652 cv
288.131 30.415 288.357 30.4404 288.357 30.7661 cv
288.357 30.8667 288.332 30.9429 288.256 31.2441 cv
284.889 44.7446 li
284.637 45.7256 284.586 45.9258 282.6 45.9258 cv
282.146 45.9258 281.92 45.9258 281.92 46.4287 cv
281.92 46.7056 282.223 46.7056 282.273 46.7056 cv
282.977 46.7056 284.736 46.6304 285.44 46.6304 cv
286.145 46.6304 287.929 46.7056 288.633 46.7056 cv
288.834 46.7056 289.137 46.7056 289.137 46.2026 cv
289.137 45.9258 288.909 45.9258 288.432 45.9258 cv
287.502 45.9258 286.797 45.9258 286.797 45.4736 cv
286.797 45.3228 286.848 45.1968 286.873 45.0464 cv
288.531 38.3843 li
291.524 38.3843 li
293.813 38.3843 294.265 39.792 294.265 40.6724 cv
294.265 41.0488 294.063 41.8281 293.912 42.4072 cv
293.736 43.1108 293.512 44.041 293.512 44.5435 cv
293.512 47.2588 296.527 47.2588 296.854 47.2588 cv
298.99 47.2588 299.871 44.7192 299.871 44.3672 cv
299.871 44.0664 299.594 44.0664 299.569 44.0664 cv
299.344 44.0664 299.293 44.2412 299.242 44.4175 cv
298.613 46.2778 297.532 46.7056 296.953 46.7056 cv
296.125 46.7056 295.949 46.1519 295.949 45.1724 cv
295.949 44.3926 296.1 43.1108 296.2 42.3066 cv
296.251 41.9541 296.302 41.4761 296.302 41.124 cv
296.302 39.188 294.615 38.4097 293.938 38.1582 cv
f
304.93 30.4854 mo
306.299 30.4854 307.281 31.4336 307.281 33.3105 cv
307.281 35.4858 306.018 36.1353 305 36.1353 cv
304.299 36.1353 302.754 35.9419 302.017 34.9077 cv
302.841 34.8721 303.035 34.293 303.035 33.9238 cv
303.035 33.3633 302.613 32.9595 302.07 32.9595 cv
301.579 32.9595 301.087 33.2578 301.087 33.978 cv
301.087 35.626 302.912 36.6963 305.035 36.6963 cv
307.475 36.6963 309.158 35.0649 309.158 33.3105 cv
309.158 31.9419 308.035 30.5742 306.105 30.1704 cv
307.947 29.5029 308.614 28.187 308.614 27.1182 cv
308.614 25.731 307.018 24.6958 305.069 24.6958 cv
303.123 24.6958 301.631 25.6436 301.631 27.0464 cv
301.631 27.6436 302.017 27.9771 302.544 27.9771 cv
303.088 27.9771 303.439 27.5737 303.439 27.0825 cv
303.439 26.5732 303.088 26.2056 302.544 26.1689 cv
303.158 25.3979 304.369 25.2046 305.018 25.2046 cv
305.807 25.2046 306.912 25.5908 306.912 27.1182 cv
306.912 27.8535 306.666 28.6606 306.211 29.2041 cv
305.631 29.8716 305.141 29.9072 304.264 29.959 cv
303.825 29.9946 303.789 29.9946 303.702 30.0117 cv
303.666 30.0117 303.527 30.0464 303.527 30.2397 cv
303.527 30.4854 303.685 30.4854 303.982 30.4854 cv
304.93 30.4854 li
f
323.402 40.7729 mo
323.402 36.8257 321.064 35.5947 319.203 35.5947 cv
315.76 35.5947 312.441 39.188 312.441 42.7334 cv
312.441 45.0713 313.949 46.9824 316.514 46.9824 cv
318.098 46.9824 319.907 46.4033 321.818 44.8701 cv
322.146 46.2026 322.975 46.9824 324.105 46.9824 cv
325.439 46.9824 326.217 45.5996 326.217 45.1968 cv
326.217 45.0215 326.066 44.9453 325.916 44.9453 cv
325.74 44.9453 325.664 45.0215 325.59 45.1968 cv
325.137 46.4287 324.232 46.4287 324.182 46.4287 cv
323.402 46.4287 323.402 44.4678 323.402 43.8652 cv
323.402 43.3369 323.402 43.2861 323.653 42.9849 cv
326.016 40.0186 326.544 37.1025 326.544 37.0771 cv
326.544 37.0269 326.52 36.8257 326.243 36.8257 cv
325.991 36.8257 325.991 36.9009 325.865 37.354 cv
325.413 38.938 324.583 40.8472 323.402 42.332 cv
323.402 40.7729 li
cp
321.718 44.2158 mo
319.506 46.1519 317.568 46.4287 316.564 46.4287 cv
315.055 46.4287 314.301 45.2983 314.301 43.689 cv
314.301 42.457 314.955 39.7417 315.76 38.4595 cv
316.941 36.6245 318.299 36.146 319.179 36.146 cv
321.667 36.146 321.667 39.4399 321.667 41.4009 cv
321.667 42.332 321.667 43.7896 321.718 44.2158 cv
f
332.369 30.4854 mo
333.738 30.4854 334.723 31.4336 334.723 33.3105 cv
334.723 35.4858 333.457 36.1353 332.439 36.1353 cv
331.739 36.1353 330.194 35.9419 329.457 34.9077 cv
330.281 34.8721 330.476 34.293 330.476 33.9238 cv
330.476 33.3633 330.053 32.9595 329.51 32.9595 cv
329.019 32.9595 328.527 33.2578 328.527 33.978 cv
328.527 35.626 330.352 36.6963 332.475 36.6963 cv
334.914 36.6963 336.598 35.0649 336.598 33.3105 cv
336.598 31.9419 335.475 30.5742 333.545 30.1704 cv
335.387 29.5029 336.054 28.187 336.054 27.1182 cv
336.054 25.731 334.457 24.6958 332.51 24.6958 cv
330.563 24.6958 329.072 25.6436 329.072 27.0464 cv
329.072 27.6436 329.457 27.9771 329.983 27.9771 cv
330.527 27.9771 330.879 27.5737 330.879 27.0825 cv
330.879 26.5732 330.527 26.2056 329.983 26.1689 cv
330.598 25.3979 331.809 25.2046 332.457 25.2046 cv
333.247 25.2046 334.354 25.5908 334.354 27.1182 cv
334.354 27.8535 334.105 28.6606 333.65 29.2041 cv
333.072 29.8716 332.581 29.9072 331.703 29.959 cv
331.265 29.9946 331.229 29.9946 331.142 30.0117 cv
331.107 30.0117 330.967 30.0464 330.967 30.2397 cv
330.967 30.4854 331.124 30.4854 331.422 30.4854 cv
332.369 30.4854 li
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Giacomo) ()%%Title: (domain_drop_in_pipe.eps)%%CreationDate: 01.04.20 20:54%%Canvassize: 16383%AI9_DataStream%Gb"-6kuuiadO>%LJFC;c*+ksk+CR)D#\-1l+HR.E*$?)ffOjNahB1q7:CZ,X99s*+H_8"/n(Cji13TYI6Zl+/?.E41D73eT[h#UQ%c1XAgMn3C6%EBkX[U6BMY>?_95(%*ej(6@kQ7@6Imm'_\IThJ12BC%o2n%H5Q`!<RGLC3W)r5D.h/%;HbJhW][8uh%FpCfX`J[3l%g&=K]ZWX=n(.oNmp3$&%fr2>@:UOM+f?,!5FlRf>je6sHo^[+QkU[NEa$m4X9i[d-Te<8Z^GC,<<H#V,2GTpn`pMUr4RV22pR8gg%2L7M'!q\m9:0%iXp=0WS<;\[rq5JB.d-Ysj]n^dsqlFJ:dscbGFWTLa%K>rUXlsF:5Ps5\H>_;[%Dn,/:JCOjr"UMcE;[)QkS.=@%Rca+7&6k./*ZG&\"r,T0>.o+RSqhU^:hKoJFF'hqrrXLs/ZbF*q8oP$AtsFuHKanO2YMNIorrl!BJ(*\i;IDsFsdIo'ni2ai,c#A%fBC%e\!o$1oOT!g5Csb4W;YQ9KFJnc2d2j.?`;#'\q;9d\4@Ed6J^(IY3>qC:_T-te86dN<L9=_2-,C\aSK>&9.)E!a.8!tLXrcp%SU8'!H+4<]co$\%J'\2<T(9WLs6#ujTR4@A9Cs3;WcAs-UM8i-;f:Ob4cigIp&GrY%BjGJ73qn-TS:rtX]J^Zg4j#MG8pQ5DZ8HZ%b0o4?C#Z&Ni2?&(B;HfGVMTds';(^?4uH&`>-6f=r0HAN.EB83Ne=/J#>7'P[4:M7I4XFU=N6,GppTX$.Gr0Dp^KHm<2G2C.M[?;%;Sa`G$C7YlnS,Dr3;@[)MU/>'IYW9orT4#tMu4:HPg<(1:r6!ZKk%tq/;7Ss,NWPt,5fA73$S:=ED'!p]/V/8`*YJJr5>$@:L#]9%#X<=ap_TV`->\mNamERe*#F'5R;*IFEdk7UN+9jO@gPBq9cc=hT)6f]j4:KuEfOZ:reI=hI/&OUnI4ueq&.Kqrl%bp4upN>'n-t>%LS+>L8&t4^TA4L@i$Xi-n_kkA,#\g.Q.s=p,n48.-2knFj8LdaYnZ4mie9nJ]uQ^c^URRP=j@hMOT2NnN_WJ!NXjt/;=d^+++@ZJ%VJdFrj+Q=/:Fq-n/!M;j9AX+$E=5IrP(k9b88?&61SlcW8A:1,b'<++1"Nm@`Z+VVcA3GZpDloKf"#sQT:b^>mQ#>8;_u`[j+_?J%dQaVdOPBT%6:l35aB9-O+mh(.9=bYu&)Rk2890#9b7`"W4CF3q-LpI7)mZZQ^Tq.JQf$;8NW.mDQAW9KB,LOlr6,+:FlC+)0E3Pe%CmuU,?iK6"r&ai"s#c?lH_,'.'E9sKpdt7Is(uZEn*i"1/!RKN(_Zi0J(r`U48d;%[,<%LF.>>ijE]kEne_=[nJPBHZE%20`91/)%nE=b,Gh"Bi]3;TOqR0D+DKtGj(]SAe)`TYK$bkBj*k\gjlNkE.A50Xh2,Pf"44`D/'h\$kX<$.STU\UBD:<hH;0j29`Y)D)Zaa'"%\P@!ZEE`^t2Rl!L5E9Z7LKW_B(lG`[\7I+5S*RjFg^C8"hrD/TO.n-!"mT7gP-&dG@I(4!)A?Q)[d^cb,0mFrp4iGEIsq+L'`E^Z%4c<LOA?3"#p_RpF2$S"s^FNqdm0Q!E]J,jg9_OK2Q/>eh-2LljoHoR:j;C>-@(9DIgL8eIXUAmLYYS9ePIlfmbNG=H,K@:Tq34\'%s74oi8gaLJSA2Le6#?_+C6Iic/c#<[UP_$tZRof:;Bkfnr`ma9GiB7:62c`%c;udc0>&=4Klg*82$C,Y+mfE=.]>l_>%F-rN:7Jg%.E2n_:%JDm@Kk8i<>AW"DfQ`A_G\3/(MSb>!,5"'75!Es*eU%b"2<R=?/f*^e0s%9]IhjnQ5kfBa8(m_06dQn#]&UPLjJaPD-'>$%jq:th,BBh?<aV,EEi^2\(3Is4W3_A")_QR5;"cV.A)4Rb4fk[D@6.KODhq2TI+9gd#c0PBcHng+dB$d&R>.I]+NY\K\cF*n?]IcM%;8=7I*5<GYP^47iE%qEW#"V=s-SZW<NZ[Ht)O\2`7fdXmAk(9do-gst3BBOSR`#6L:@;+14_5(!g6%a\X`-[a2;:CP_t;+B28iem%9gbT\r*SC;a0o!ib2oIia&,i&ro;mh[t?WVT',oV]H(^ms*o_)PMZ##-hFba^<QSs3`2_8oe/s$M-6W2`&-atI!;>(02E9*,ti!d%9J-4FKi1h"XNFf$GF",#2>$W7OhY5T2UF23,>qGZmY6s_Jo2iV!jumg-TLP8Ck_dYE^<;ibmf!6V443FWa]tY_-;N",M(Cg?pBaS%@_'b]*SN=>G)T&#Ft&(=*GKdQhbrcVj7n2E,t`rfi?p%?Ks`;(4AplHduUpdl]@sRAu8OA"fW87W-c&ZjC7Ie=9I8/;N=%iCa3hu%;OD6]mE)o$F@^Fh464^a.gSl18VnA,cDm+GCp+.:[1SA@(-OU/*Z2hJb04g11i?aR.fE9/;<hLk^DmJn515$`>cL>4,hZ@dQAd@.%Ebi`BTXPr]]9K3SF/L>IK?A!8/Q@GkTL]e;Rjs2(mm@Bqj\U(NC:Uj5Mq93L>:gSVIS%sAKW,TpYE+-'T-;5(hk@.hi]2ltQ&=U5%)!>p&'%FUc>Z9_X[cHn:Pe*&n<m+&4*?1KPMnm($Gf<e=DV_&eOhXoM:Zs@t9$cQiVql1Hn[%.84ZRBO?Coih9#%Qjg/.X>KoXKr%&O#Ze:RWs+BW'=.H/<?8C):J?DVI+0io^gJT^RcY2np=)hJ@1$!5`ZP0+Y`c\b>MTRorUr=mIo%r"*23TCVI/\$m9jg7>/2FbXeC%rb=:EcUtSGUt3+/I][aa#?Q?%XL2f6,/Jo#%j(_%-T/\:=Eb#i>j:M1:H.\'6h`%.;2(Oi3k^;pZZ5hc\(>lId7&.]G?W$=pi9`s%m(@H/MkAbkAl-#d+<H5=lLY@6AcG\4J^Wd7^r-35g/%$fJY]lPO+R33pckj>9!-co\EhY9miUgd%4++I>2s85OVQ)0ZdHAO"qC(J%-u1OgX$3WLf0ej>:d@>plu2dc)7LoMVt[U^"u06K^.K\IK*q!]&<*XQ>?oC<M*=/?c*lKdbso1H[,5WuUI@D)b:pS0)u@9j<-r?o%(CEeSocB&Y5$a>"W]i7ZcCfRH*b7d'$SZ[gp;*%_ObJBn>l+$<ICNuhL&Em!p1j9@+_oZ2FW]o6l^d`Z,QIWF4_Pm\`/@IPejCJP%")FIBMp!gHG4/A)hX9/WDXekd',Z7758CQb:-ibNC;oeZiPu2uq7C;Ss&%:RiaMBJ]2lQJnG/s`(-B9b2B'>fmtuhYN)JOaeGl[B%bno7PMG#?`'1Q)<[r-aPndI.G(*)rX=O+bi]X8&N;Ofc52R`X#[#T'CE@?Ll&5b.bBn.<H&7e6"UW)a:<0Dj(N$/OZG^BfbZ.&]m%IA;PPWMbdihRKDV`(s2_0dlD=$i6KP=17bsTf3fS\ctlXC=E5Ph0P'9!g#QA]JE[;FUbCAjmE\e=*nV8cl>G>Jn7XI\O;\l4*0AF%Ks.E"=^c%AT8bmK]@-k.2_KG0!Eshap:`$Ykk*iu\JYYqXa"*447/(4Ak(X"hsY4"P^_ZL4Am.<6=FLt3.`sr7H6Z/H3/-q>)G@\%E`5MeYeVl6$[m"2-hY?uB$c@8CDc;a!7e&^lPfp@G`A0=21EIJ*`hn4#r#<m"/]$MqC:MifZ([4P.tE`nWuS.q"t!Yi2D(Y8::38%3:kIoAd]Y5Jo/k[\9[<r\k$g;'R7"Ys/(Z.e?>+:h`ir94,k#B0n_BF:[t4SpN(tZcFe":YQ(VF]'k/65`O\/-;sK>>4Y1K7<gbf%>RPe7Mi"$I,JX5E@L!=.7Lm?ng\&V,D'$pBOph<HESW`RBUYN&Cd8uE/3]do$m)$EH;)dP+suqU9]R,l6Oa`9*l9!YX8cd$YJ51+%mAGFKX8d+$@`s8_*ZPs?:Wi\u3aD+(ctl"=#:u1-*<5,J!IabSlH9,K\?u/!+9012pts:"h<%*'J%I8o?uWB<9:apE;u?$L]Kns_%JC4:cB/G,<]16B,"/k6&&%B7L4G+4Ls1JN_*NO#BRQG1^pPjs?q`Jm]./@d&Qh2&i%Hs\F"&%gMnZ0\bnTfl?s3?+Eg*_/ig4&;9%)jF1iDqFlZSc7GNG\Zkc[pTE"g(/\OI_<3+IYU&8V%fenFfVU/2<E*'NP4UMZRL;??Q,IfYS0,603fPVDBE2VMIEdsqR"OO%s;PX%<jK!.lc$X[6Mm0>Oj)5:'MgcLDPL8AQY-=@Tc9m(.k"M<5!0YID6u8%=mS!5TWrD.)p_W/kH@@[rE#ccN(t>^JsPsoqk_nlBJk[\%`]nhG8p8>"/c255k@^l<Vq15m3fAJFlFhA=GZ/D/>'2Q'a0n](Gfqbk3k_#+X`FjpD*hC=GSA<'g)%FNVlogIK(V4tVg-7OTG^0?%@$YQ@#1V>![C5;-*I)S/#D\<,IIS!Dpu-_DLSmg!^L8(IiMCbPJ?C^IH-:B,n%mKtrA]8j4i=5(HX\B\pH#]_pULL0<<!n`n8MUu%55\2$B.lS.&"F5CE!+8fK@;&$EZut(1Jh7pqt?^b]6S'Ro_o>t:QeQsk8_uTG;$A97e*;Q/>kS4kKLa8H*5u[`^o*gepWMMWVbJ2%dsJ4m+K4"Z350fi-jshu#`Q&&#a:7]il4Wp*DBR"eb[8Jg,#s#pYkA5=UQTS:W6]U*LOIJd:q*TZ`[*]bt*o+<n,;4csP;`(InkI%HK!IYH;4;Ejdm;dclP(WR)tp;FB;43V:PLDeiaJ^r!q*rCcfSt-b_)C6.'E6YK#NoZhFGtDF:(k?cr2`<]_"1`J55N`HITV<AOca%,*@j/bZ@Og9P#_&IOdb_IT".g)fbopAI;Q9_W#H3'mC6m_khQ<[G(q^DiFO#i=f_lLg]/-%T)q08-$@l9GDtj0FII3p;q#T*,skY%,kREd(+S<C<=p^`\6&s@U>tCqK*NGd0u#R_`rejhZ=ap$mn9>`\cc9mCf!P41t%K9Ent'.I*4A[%6((OO^1,a-H_*u9V-I"DkGs-%Z^&.$caUG8B+JVD7Y#oph",Tbr.*JDjX/XN\I/&a6Fo6DnsLdciUY%^#F+<R77IOI=S<j(?ba13XF='PqcL*eN;d_P!(OR2GHG&`%cAi^:M7jK/MR5AN$FYFI1`P+";n6*+k+VNKHd47dANDQC81In`G09K$$\WF/eRgbPA0@[d0LK0*hb>ZX\Lk9PaJ?3E*IraV5RuVZ%49#soa73''&_+B)V@d$d4uR3&jnkS0r^uY6oA.l*):fX4@-6JkH@Zq^SBj=d^ngWW6p^IACtOSdO%"Vr;%P8'O4:<s",f:KI^KCp%lR3_-",`6ZF&VCHZZmN!!m2Fj^eY%97&4cE,]],L`'fX6Wh=</MpkN1d9bua*/_2@AX-Tb.'<2(8UNqHpsO#0$+GaU1\g`HX&m#P%5'MI`>?U=lgb#99"u<!D9buP?a@ohY[\0Rnl2+*Po=<Y5M^6a=8L<ir#VRSRA66:Z9gVc\NYf4i20Nk!h'g>08[Ch(jFXn2+lDT]%A[uW\5Q1PJ+U5i9mG<8dPC[]"<%MK6kQ8m4eNZmp.Y8p5h5X5l)).XI!o4W1r[r)2@-uA[+Q;8WcrA+`dh._.VPG.C^@+Q;(8A3X%0'S;J1=EX"]nb1i+Ec,C)m"(Qb[66K-+O`/T#nPJQHN*3>j/_$s#YiuWD("UbsEkDl+q[PH<=(Q6WXJUAX"?P2+Yo4UdRrB1(1>-%PU)RZ^>-e,RE:&]g%_VqbS4nQ&%I;6/CJ:ge\VK;W[J#aYE`CjWM@82aY"r:4Gqnjg23V6k[qo6B9l;dCiY_u.M.LMk?XP?Cd)Bs%Ro#dV>gG)YW'E:OkZ$L6-$,WH_85Ve2?U:iIVI>R#m;_`CUKrG.9pBWPo:p%6)KE:3ce=c/Jl/[DIC:dl[eQ<RQ:=mHu_)Kr6#q]%#Y!::X:LI0*)Hj+OUon7r@[T`TgrZ](+eIN3:<W+$iHAn\^+iMkQ0&Y8pq1+npn,mk-Cr:Ch?BDPli6I`;NsG&S&*6j23[S>$;e)%(lNN%,]pU,ls;'[Z46Y3Mu'i%kSs>Pdd+:.TECq>CEuX>L\;1S+s]r5:IW8e6.DkI:=d&V#mt0YUHtSU$O;ULlge1e$/m?:-[k$^%ZFB#M>7JLYeiLQ\s)dGU^>(8R9Cmr1o5"(`'>GF9qiAp4nDIgGN?5_gf08pe[sn-7O1T<oXjje.Bc!hd;e(:<PB/rCC[S?!/1sYH%.[2:B=!-<qbT;3(-Pl+li6fkXjb`f"jjT'?_t1!e7IAIKQ<#VMW-N`a1AfJa)VmdEgt&7.G5QF3h"4:dq;sefHb]?^g316"g26Ua%gV%K($DgL1Fld4FiVD]TqS(imolf5B/Q^]aX=r>!X)H_C\*CrqlH7+=?(]kj>G;jRlJm8'EUFLIGMo8+QNpJJ&,[ll=C7bSDQ!*/%q\^;Tf[H.f;]\E\Z`[BsI5-2X+5^hBDfogj339R[?0f4[]"OI+eX_Q+1iSnMXiL!1fA!RC5OX'=c^cDqIBaN(oW%N]nEOM(UH@lS%H[5'M3O-sR;b%(H;QSQU;<MA;Vj-!#qh^_9="e]Z)a2TPX@ZoI/o7mk$CgEX0,uUA1htpoe>=n-P8gn^cF'Z1GF7%HAG+M&Pc!53%ZU[SseZ,7VDP]2T]IBDADJZ++qGZ-ooBe)F'ZQk(]<f"2]m!C=:IO^&n!YI>4dhn%U"=\DCYhsa5`7SUd5el?9)`^U35T9?qe*<a%Brr@Uk+PYQh+((%hH*Vp[@>4#]s,nGP.B7LkJu?*Q]st?Ff.+aR#-fG2nkbqNU?kfg6WWCjKZFkSEWe\D`^OMG$]X_V:h9EbO8#^%C/ob12/Et1M9bD9l'K]-j@680mooD]m\e!c:0,!q8rlVP:6QSJPdI!8Q_TeM3cCl7GO*9u,Fqs%FIu@+YgL!FoR<meXh!a2LX<!s%>U[S3HJi[ILdj$5B4?i]V[&8i\C']Ea(f.\hq#2fbAB>?d6afo\bi;j5/-jV:p][]&*GtaWK"&F?<9$_)SMZk:6uo*C(tA5L>`$L%X8Uem68,Uke*FDcWJqs)m=*\]C(qu/F]m,+9V6Zg#bF/'o5]/$F6b,1qW0t\V`&k0ZaA2W7LQ&GZ0lC7T$?qm7b;7er:p,0,I,Y"%CH$<+NIjjDB!8BsH='S^Ht@$LO$Cr;2gTRnp\T@(rENg,hg=IGe0sUKrinYXbeH;:CUC*IJ,Jn%\^BI1g!8\K[h<Hj>+oQ;IkNi3%#kiEh^)gtngh:Q1[hE>A[EctI9+)]0mphgH2t(@.]KBI%=5LYsl,:X=F7.MAB_9]EMeSWhg>S/gN>g9H1V;%(bFS(WLH!lL@b<*9%+p>hMH/e+K;h[]m]7$FCWpOl&CGX]Q1%\4W<0*rfdI4d1%h\HZT$>%)?24K&5dO,^U@:i`F:[7-L.83snO>SNCU9b_jcANe89`B<%95i]dUZU:`_#ZENXmfHM>^#M(b7e\klU10(s*!tGpMg]^2>X+iBB,k32IA5s-U6GZ5UKj.*F+"`I/[$5Gd$L?c1b,-:9Wrjm`Cro%V_A5'Ko+7?e.t5BOtaL,/]Xtgl1hoPCaOApT;=#1HJ7Yoa5;+.f[F7%GC)JK?iB+6^V0Ab@f?)fp;`Dq]m'@#+5V+'TC-LP$`/LO%H2AoL\T<2+^A9UUnoXo`ag1eT1%D5eoM([@e6#8WfRYpqbiN=6;s3ONm;dP2jluZ109u9=f4.SYN#c`[I@]XcCo4kY]5V%q5$oU#%4l!"8?C<Z`PFinE!fd,iHbDS7o)/F[PM'4s;P$)NBeMY.]]>t,hbTb<[7,O'!Ft$M/d(D,J,B)g(F]k.T%;2HQ,s3=RYJ)eq,+OY%H/(r>qj7$TIerfqAE)(df8mCJAgWPhP+HhX/(YjN-$0%FbR?ZgpHLSppPqIU52jsS+k52TId0[UTAE1fqXS]QB!1cTi[6nV_\bLC%R@RR^3`c^H?@ADnruA-8Sk2JTqR]\@8U>*_5>NcFd`bEhR].fqM7NS/qS^8%VlpaA?[ff%o(r(O`6@?0$[t1Rok.iFEW6qnU%:d@%?X$fM5=09`f;ZHfjeY>J2%@aVo+tTscmn;3qk2V$9+NO3ZXD`dDSpL-.4R8<PK*7;aeDo(9XRk8]_]W9nc.R)(HXQST,q"GY;U1@%?DTSA=oGUmg8J'.FH09<Fl'n`WF`fU%\&G7HLW5Td@CS*^!WCAc:-*YM:RC/XLJ)hO7RB<)r53t&c>pOe2j-udJIq^PLA[^gUD+<%7\Q)kc*O1Lfbf='g7FKI[4X)[)kF(eBb@M,2G7h@PX](=$#><cZpni1NM8;EUFiC(Pq8*J7aW8;91//7fI0r?dBW,QNQnK;!4E(h%:Z')Y*51.i.X1ff&``hSP*<p:'043X?EPACMR:/R#L`2+LU@ub_V5GSo:,.8&Q:oAX.]F#7u3:p%6/h"p_2T\E'\lQBo;eBr'Rus%Zkbj)r,hKF`8gK$7J+4cBbNP=gg5E#\c!NB)F<ta9D=FJ&q7J")OQGn\V.EsqK'3DcY`Za@Ngr9#fYZcl?5bp!6H)3gVT)L'L$g>%7hu]S%=Au=AaP+U.a\J66Y)l6H?L9e?u(5a`nXQ*W8N*eli_dO7EtK\8*po'Uj&gXlVsrY9+Ps,([-MAao33Y,pX3R$u<,YNJ!S6%8>hMElC'hDHu&TX6.5N8-$=n5;*3Z-R_`tBbdB*r%gUA:_P*V=>Rr!;ooBZ1qee#*=o%6!kHkD&)%'LaQ$l4Op-L25\VJ8SISKi&%cV%Ca>m2'D.BBT&VP\Qm_L*9YQU4:c)=ofCCqLRiO;/El(CR@Tkh3\M4KAnoUQ:;(6>>@or7KT0^NXmR.a2E+md.\'7Tgp:DI4FY%1AaGEI/uPb<MsUSm^@*=]q6RYe%'KWF_Kpe]D[AUL)/<KN9[H&K2MT5Gpod>>,-7h(62"`Z,ikUhpSHd`TY:XF&YjB(f6*CftQ/i%7jLdDL(QJu)COXU;-R=sVU_6<5D5?<TDUagr*#]fQDUKC#"5ej;"B!'AX2gtNlmNc!j7IV?rq9*G+A#9P6ZSXn6Is(&LH&/6(sOR%>hEB@%l%.3/"%r+bfQ[F6q\siU%fe,+??\?BVRJ2W2J(`dX?Ik-.X`DjQ/TT4Z!'SS)=,Sab*jNS4Ts%i_pKC93Qc9Smt\#DkD/-%ASkc$Z\.u(a`KC/0b(E+,ID^-':#ST=t5bkSDQj*AU*MiRJ3EH2\Xlc_XT2em#jT$Te"%[j=ohk^&'a&?!8&WT6CK<9faG.Y@"._%D>qTb%Pm;>cX/%r<MlSQ;(B2KY&.hGX&-rCfq<IX<kfi*i`'&!bn!%[d&J#e`hJW>7#XP\g<^ZMSh36A`od*9@W^S?Mla3I]QG4f%Q2LR4TAJi5ae9QYa`?`c2q>PnPkkgTA6WJ$^(MN=/+7Y@mk:1-6S+II2n+8`HY]Gh2e"'s4Eg9KqZ&Rl[d:oWcH0!k2aYYh<kG&%%8E6$Ve!.8YMfj\)V8TMFOofni'"9H"Kp+f=00:B0aC%Ta-E=#ho4r-O2*#Sh"to=7%*?h,g*H]o]!c7[HG_V%imcW@*T!>1`((/e%^bT^][7c5%:n;p/!!m73@Cb9B@hJbq^:2"_pJ],A[f#YL)s)dD8Di]d[R)Tr7`:HkI=9-0m_(e*U&p(^:tuM]?a>*NBl!:sHeL-$%nfe<e('`+C<\H+aV_3>7.LD5KO+=<E<Fl#4l,=JZjd?&+--*$4Y]o>!SAEZ:,[%haY`kujH]r3ZpN]<RWF^/c$sFA.E63P7m<;.D%_n/L5MOD-F%@$e49'AX7>(20Pj6;3IkWXGIPYulAGmF!#-&7Pa0Yg=o:AKC@]SK-J$ak$2)9)oEk-"gPV"nf#PcVsNLo2D28n2P?%(,_r_j/-o4q1V]V@p7*mo#E\m`1=9U\3K5);M-OZ#k";YUMA/7Y/Q,nKZbIX^b>S)*V]t&?iE#N:O0_G[GGS<mAsj\(f2BFde@6D%mo9GIGop4Hl+>Oj-JM[*kZ;mU[Obn.*DR+K[Og0C;,oP:1EVV6J5Ml0B(K:df0q,+K^d(['BjgNN/bAd=#@+q$7f?'__4\ng&>$R%9H-tY=%J@R^Pk^a1i!sY:YFbI>YfGb3CIf&4`RK7A.GD=Y2VWl74&ODc]EHK=mm_;(>U,R8r6%2#>$/4[c0qPKT0c&JbG49$Kos"%([PqkVGI%0?^_RHr])>U(%\b.8m7hl&oB6eU7D`HdF(-&^`-dFB\g`(DKUC95,#:S9cp>bF7(/ZA]Er";?`?lVj!nHr`PCPHNil1%%56+lHl#c.kS!9!4F=82cZSO(ft,buSLkHL'N.(ua,p[TVkpPh,?orF2G.@]MQTXj!dJi?(=\U.n0(<GebPQ]Klm;GH'll&+WG[a%LD.!jfe>aYGX#3P?9A`?r=EW(?djM+6>9s4"[`d^o1>=#ou%<MTm?fNOnFYQ!^X4>>(Z]7mfVlIkF>M84E3<2.N?h%Q_b'+K^U+b%%DRp4ha`Lpl4<-rd8kY)_A])_!]`/@)a\+]QB/#V0XA!7b!u*8<+(G!;kn-5YJ[uZ'"-BD;=+0N/OC86UrC%pg%S(G'M8Jnae]HQ%FeP$R[E1dG'Q"]9KbtH:&F)U08mgr.X2:!<o]JfW0[uA&n5L6ZO_P7h^ODt27jFrXY0?TAi*p,F7@D'APqj4,bJfQ'/7#3s*op>B%PdOAI[7Y^WP,2aTMWd/MT4dP_!\9pnXS_cM7EQ,NVi,aJR7Wg0F0J_>0pNF%dRC0>9(aR0.]/\Q`Zcu\E\2^QIh@a<:IA\'k(8ln%k4rN\g*gm\>6V&''3?d.]F;2pK9c+M'Ce>Hjma^rm0lBq&h,gRI[aJCMMY1Z04b:D!_$LMWh>3F*1b5m$YM.pTTOp=-o;c#-p41d%ok]q^:K-]"_Yrq%b`"WN=S*B4P;;>/V=EWnAS9B_AIQ7-LFtZ@N`WEZkKmdQct-br%[08HSO"(:(4:N??$6EXTer>\]'Kj:=LR.g%F6KnckR+0VjNqINcr"o*(iniGb>Iu^(iniG1[%dkgaG1)fbnnK*ZLV:(C`o1cS0]@ZF2Q!i6sK5f)H0/V)2!:akP+6_!RDVR2l$#%MUaXpAF7Ln!>2%$4hZBDP@7qBe+`W4VUHd7L;Hl=Q;)k)fj)g5Yk]86Pis/q7V)rPO,kjE_3oB?a&a>#0=d2dgWUPjV=`!P!H,-#%0(l-dTm(V"Uq(lYk$gVblUYj<E!]K2KRtoHVZh_NfH/Aq*64'd-5-hIZqSq3Lq4IklkYS6*6p8eouj9TA!u\L]PS<h,n3OkHW;Ib%<*B?41A5k@V<Pd,#Z_[N1U,^XZEe-L(9CY_k+b!re_$<Q+nIFdbc4C/B88GpMr$e]%)]dcXemG5%[CKQo(_dQ0FhFD=-N?`'mhM"%3ZIEFSF:Zch!QF6&A;u%lHr7#lqbb*UKE6"4L!"8[Q-'9*aeWg"hE[[DKeu'N7F;rctSc:R^UpSqiK7&$r]4/!tUqpO+@h=0%^$s%;hJQ;LWJLkAY1jLAr&R`JN5IL`":&L'pY>u`^<nfc:<1matT)L[E=:B],Ing)%'m<>9Q?E;Fn1H@P$g>FZY#&:;,1qbT;,m!oe*A%?im*2oi/\;7_W,4>,5.0$CoVia3Qer%,gR1g/O)$9Hh_kYKsVGZ.M]0,Jr*GR!^tf'ps`@\8"lBYMi0Qi'^;)HfY\/mu4'GH.#XH%#4qh%FJNh0`lL=Y)9TJsK@#`l\a3oMGnQWjP0].F^3=M<;*/f::f],[$t\Sta@r5W0Q)f_V383M1)&^]UeZ5*<722farZ0fQ1DL<%!dcI5:VE1/m$aJW2dI9IWP!J5n)?`,5\A[1,(W%JEN*6$jWe7rgJArZN%UO9BsF`J]6kZf6.+pWP2\7.'L03>:&iS"H">,Js*;DK%/rrM7:#DQ_4\G*/%Za;fa#@DZnFU-'O%f2K!I]HDoV!RUAA[Pjr+Ti^HXmbp"oUZh%1lS'W\5UiFnp=#G[s_Mr.p_+OnLf!Er\-o%/kXD*-*dHtQY=,2EFNnBGTLAjH%-eoM/-aMG/QY;Ka)n_p;c4CTqNc$c:0[3Si!g>g#7SE@f#235?I'c_"=m6kX&I]i1R`oiF3Z<%,?4F/`p74!eV-%:1K/O;J-[IQV&rU3;KBKJ4_XZ9F=_5K?o-IJ=fgfo"4-]]7m7p5_[LLBO.6aTRe+RSc\G/RJf],"gdi$W\b"ba%7&Z+p+-'n&a;d/f+"m(Od+%j+fB0uiUS6cBhg"bO'$_N:b/Tq^QfF<\1$$5$o:h!3NB&(5@4deNXb340f5AsSo#7W^"I(tp13UTT%\o!i_-F,9sicVn`2L9[4$DEuPO9=gjM@@eD_i+3+(=0nj-EtOhSl'Rq\X*5;F)h]e@#9&mkn&cn3t'okAAa)&4A92,:;huC@;u*>%Ei.Gj189eUL!^?U=kT-`c:O..WGK(mFn(?2d[2m%p`9MV?9F;11gm=2M[f9[?E'M.fMJ[RQuL!MDRc;1rUf1"Zr4fCZ*NR*1P8Fi%;lf1FXV"&_+7inaCnN5J[@gPU;SS5:,PC?J(c,'`ZLMM%?Mta/7]JXdO!>mW2L2fo>t_nj<2aFT\Z+YJjZ6CP?uH[E:W$e?k!'&R%>nSO*oauge*1Ap)O:e(_ZTPS@a+hbn""#4a?V@33V96'JVS]#i2DCjQ3lkBu_PPN#GZ3Qjnlt6OKc=o8q:\fXfGR*/SUX3\>bY;.%m&=r<rir!Z1XMb>6p^2;jG_$TBRn$?-c3pkZ&>k-W.kUkdX@X6p0\@810,/RLjT=Ek,'(\A9bW/KkNAjV7`%.$R[0@!OM_#Hus*R%3KfkA?-5_NMK^mC4U;SF8%pi5Odr947i,^I^Fk#H>MlGf:=khYRg7]=+"PqnT=5m76E.9$o\o,eS&U64XgRuRcR\CTo+$0&3J!@B%Q0S0Fp"#L:S_R\DOPIO,5P[r=ZJ3cqRYuk+41(2"PMP)C\N!IB=-43$e`Fs879["OH"tnJhTVm1AD#;;g*r"BDt$ZlmqKm]"#B57%c1FKq>4'g/nP\bdZs9]cBSKeDg$Q^9PX_Ds@!'q@ctGPp%55e=VIeC_ZPaX(PLWhs[8F';s8F:?;7qsnA0#Oc9M9Q@c:W8LEmbo_%q=s)VfP'/jI&5kY_cg6=T/+c?[/VG[;35;BgLo(#XA8;:"nJ.mc0f.\ALU\@Z_GF]0u(Y"C-UmI2fdD-^YJ6oLT2$-Hssu'd;Y@-%SY/e0=Y]XQ6Z1p"/>1ObNU@BqjTohJQeJbY4&odT9>@cn'(:ah9(,_j5Wib(S4Bf0*SX;/8b^:PSuFKn9l`UIiVF$IHZ_5W]26o[%S0K)7lcZq/DEqIaQnFLo*FHt&D`M<M#Bjh>>m%X"Sg0ITEgGGFmuPZ<0C;'gjX5bok.?.]OJd<tCqA6p@>;t&93MRR?FXuddj=,(%-(b](8iBt<:G@?,7a.`&b,$%#o5TS'm*nT'=(g"$ck=[,*`Ft&;H3fp#T5[m/nn1T:EpC69p`4_UZfiTA^_sed`$B!`fNo]jCa=@%$TF)^\g1X0\9]/s2I4<_=(BIO9?O)h`f?'(Rk@9He*N,QRkC[5nWSr&c_a@(^HuW_o/&rq?./Ws7RN0":"Nb&^cR6WO\M0[>E1M/%DCCIW3h*:e.Qg@@gt?eQ`Ro._F@e!a_Uu3ZOt*-[lEOsM,umbYHT#0XDFn1Dr5dQ58\&s5ea)GPF@k_,d@HD>ACDjdd`(n&kh1&L%aGAW;23r'i*1:&AaJMVQV9?B0DtF4kg<<TQ(4`[e`U3qt(c`8J-=V3q\=4^Mi_s`/_:HT8n#K+H;PnU,Wr)':Xc%RO)L/T*KLc1r%`Uh%BEYoSf878J7-7G[%4XYHR^Iu+*6*Au(L8(TA/oc!R?B0F0]Qd$UUr\]Q)0foWjk`NT=*-lqYkS(f+fZ.f_Q5OUF,C`+^Z]Qk%S@.Enm\8lLjYP#6^ZI.S_L0G05FhJ:]8TFdI#2sUc32IR:DOc&NB!RA07^<)P?W'4F-jqBpgNs`ISr=d)&M,ja]5?O?#qB7hhHsi%:A"s^CM36WP/]W63EOQ(A';2\>Q1!?q/pY4&e&W&B&m3gkP\Yj(dO]ZltCD`h14eu#1MbLM!#jI,2L&eha4IS_t5(3]NJs)(hYBc%AG`@/^GmP&\RCD,A:Heja]#4690O:ED8->)e]P)*:a$khFZR6MW7,`U6_3@uL)LWUI.EMgq$(@ncAoOP6FEU1#@8ef=3p23?=]<h%oo.%E<(fo.Ve$2GNpNL_"t.u6gqXt,X::1<<]K:9m7OgQc@7;d<`\GoA`9K?r)fAL.l(AW?)ae#h3a+o1<4gH)+Fa4CU<O:C4O8V%Bc=2g:Q;&3)p39K\1)?42]/9l**^GFQZd*f__Aa\IEZi]d,<-gGB9OJ':&PqMI3bq:%\p]c^Ag7<SnD-Y8pX@T#;d*ie]B\Fs=hc%41o6Rc1NA<9`GutR?EaC8%RY3bca^Sj6fo`fQY6hlgLqsk(^JVCRjh&)b9&Nf)1nQarA,[\SoV093tNM*Hsl3.e.3@^:^7((JPBf%_qfk??5NHd=G(P%bBp6L#-!P-YtKacUp"+r-e?iqY6X.*(@ij(eg>;J>m<;)TomR>0dP=VrCP.L+823TY%LjT<mhit:sTskCU"Wm%k`iar)dH28\Su:sNH-@VC)YRQU%6qO3;PYH/,F=10nBe[8+p^IpV*IG//'`?E[3AFG@G?iW"p>>`mg=eQ>bHZbY.6<rI![6/;5V#%F1J:A,V`SK@Vb_iY:D?T1N*n)E2RZihu\jd8JfT<)2=ZD>0`VWPfkb^PS[ha+gt8t&'uU_%E"*'_iWk1L<X_o4MOZTW?LfUH9S#c%2'ZqQZ7,1%%:^r<8)l*?aB2H:F7M1H9OI_;^s.SW]*1^>md[/I.PFlSo3dDuOa4fC/F,;Ha#2paD5hipR+.^$1M]rNSMe+!.=.W<%gl"L5lWa&Ao@CD<cMGP`oD(abZWs\52OF+lN:Z[E.\9Nog-+D#MVZ0np>!;Sb(hL30KJMUj.a/Hb9nbg7IoF"hpme:P47i8\^LA3%[ORK9$!ZZ)J)/63m8@\o>4qLLa.u04-,,./bn>pnqD7H+]1$(@1n#`Akq:;+(#MIXU-%]=rnq'Smbd)!C2-r8jen];KEi>="M]H\%UtdsH9>c\DXqr,CAQIsNP7d?$`cM16T0K53qY$S%J",#&,H4Ocn!eOnnN7Q&g@iqU:.h;<DWLB*GbZ@[;+2_E+k@>JTPl"\F1H5_%PKUX4/LP#0A_U8k\SAK`:UlokP6Xj7d4#sBqU4`Bq^Kui]UkqdZGIsOq/j1"/S8qUH/lrNFS"TpFC2l*i?:cg8c"X[9:Q$FdA`g+%@F>dX:l^Ma[-DZ^26\RqK?`@H3gl"`T]MQPUmkL>[tY9mb")MjT02rGXL(8*RN`5"(Ho09`;/->SulEf2@"@R8t$(aOrNZ]UU8+7%S<XGKmO''=?S^WJf""$DZ*@/G<GqPJ?=,63pLP[aEods95IU0$?Y9(@l.ieRS/SkrZTk='U`\?$f]@[X?&e7oqlr;=EuSQ5PI@QJ%4P0FpT&k4`kk6tGTuA"e]_Q"=="RNWHB_GOs&^gcjMklRZY"!:#MEV4.q*=SQZ9-iF1?jD3eOK40lt!sOQZJO#dOrh&%bGSfb)60%Y*G]E+X-pi4+g=7Lta/R/+MAb%-9HR,+7%%HtQ(>7'[p)Et6(?*BM5UORX+V`l]q,kJ']o1fDX[aC1(/?0[>H)BfhL.dn$L3Fh5W%V5FBT1k1WMMs6K[Mdmud0BJSX+/uQB*;tb,f4Iu?nFGIF0K/ELTDX<u`ecEkS/AS1/*fhEm^EZnIX+X'@,;m=GXV9V'#\fA4lrX]%BiPR843j)nLpR-X/AV&YV<%\,&ZW%U!mJsKkh?o#AJS[4<)QebrGf&U1Gm76HAo,\AcYAu,U3Pu0?5OW*M_DgVlZ"fOTh-/V5URC%[U7/Tko3XHH5cWX^7fFTHhF4_dG(u+<L<8&Gnn>K.Gs&&fuA"\+0Ug)a+L;>9DN6KEOZtW??%E$Or&$6Qh"_EO$'jDq=<BL3PqV?%&[)7ZlG0u'l.#6+Y12Bo>Q)Q]2AG$62jR.?Z(2=]g:_s_Tu@\7?4h%DGctJ_="#64l;dTT`MbP8X5@^=L5OmSQgGM[?&9);Y@#E\%M-Kr,cA!82?GBa04S$17fo[G8kA$f>rGlFhNT"2.cK%T=k6Cco`-_HgLXps)jm2@-bJ)Nq<B#FRh!::iT]?C/iU?G4S>PXOc!PIo%?Zs@jb$!(gm,Ul*8khKIXM0hbougBX[*(7[Hi:6goc*H)WmlCoZBr-O;:%\fl^&;C(#J47npPmqaEc*]Y?uH)2#Cdmf.VJ<7>^4L%l!D-k`7]g&e5tJlQb9"9DtT%EcLC+GrVFFie6Dl^SC4Ie;oH@uftsg%dp9/jf.V-9-86TfPr/?NIb=bRd>ZT,hs2*#hs.i(YOA!^%=5N80NBhb6gSjlCAb+Om;Xug8oul24*o]At&PhkPhT%R$hF$k9I`#f>,i@pS]g\G4D*-OdIbC#LkIck)Y@%"*IcJOB)\eoA.#mCr%^[1p]GSIu0n+Fl<eSg-<pkB(&aL[FNjMQ(k>Q)Q^+5alAFH4fhqX=(rjsn*4KGj/`^V46:aK9nW`mBP9q?>rFGcT_;ZI4IdF&H^g%aF!lkbab^uYhgJF]mf"_HQ@L;?bX2);=F/cC<:`[qWmSB)_U8&iEj:N-c61uqF0gB<d0g`c?[RDeM#sIZ_?g[99E`$%-Z/LYIrI?%44'tQVtA,YrR0-SX?d]HTC]EPPE.4a^=R;5FldE-ons*Y^0CP*M&oXbouj4g6;AosTR6XC%DuR$EQ!5&Z4g\7NBGq.IbD4,-.l_2%]%8UY#\"`b*;B<k[:)P:f.T1KnQYrIZYP?+f.U>g%*7GPIBR"dEY+NLDH3#"eAHj&d:Ll:r=L-VF/@)0s)Eng^>dkC?-H8kc47LJ%VCfgKR'lE4\pO$,_Y,c]Wlp;'F)W9.V$Y3W-r4u/a!6Bo,A^iOEqX'REG>9RC``@MZHtnHdkSEQ'6AAgO%YD-jgXC(6[Q^ok.CA7%9C8)"oPVS<kLM8`^.hAhok#R0Wh5S(07Gn(;l=![Cm?&GV[(\1qrbpbaZ2NZF6u0J*o*k^r]IdLDk-\'dFIZW0;n[<riafJNt9LA%SYa5j0@r:l1Y:6Dq:XXAp@%%>PPKF;T'*kjpH#/"RH[JeS=5g]2qgnND<h,Vm'hWDQ[+)[E+\dheC+HhI]9a*l)ZJ/9[%qB3Lhc]%O.5b0lINOIe^dd/lK>?ND<FXj8D?-g]'j_^eeU>#pT)d!l%PlO*;G3.Zs<R94hots?/h)B:thDIrPcJ<FRME+6*<=f,RPeO09fhT%g?ia*X)8nV=#O+Ei>%H%O5TZmT23SMC?jC7rRhn;adr*jF#<F[BR`3[X?=ptTB3&_\#&\[.IUP`ZZL6!o3qLYl/%<Z^HH]$KB,jr%VQ9)QpYbFW+H-&1GI"fh373$H%[;nYS=`'S*-\.T<)M?3B;ld=XeIg!r2lIIcpI,piaL*&/cak;%;Yk,k+=<m9>.m<H/H29g>"T0%f)^'i@K"g2kG+#BkNC7*Dm-6BrM`T%Q1#gOm*\Fac&;C7Ao$+#=l&m7KAU;'[h_RheX>7,4am4Jo(tbQnk`Q=EH57;ouB;2[WMMY%BO(#_/ndnc5DuK#V_B<(&`3eH\^Gp`f?P_d<3;DPDl.5'Ub19N/H#^1Xgd9PniZlH;k#uL!PgbH1CZ3"(?h5Jp&=p9lLjN*^@pm5%qVD"[K8C*1HXH1(K%Bc94IB%h<(]*c",n4#*hDQ)_5"=4i,7XXn3Bnn/5GTgb6LPD1fAbb@'UQ`k,E<n`5QqLPj?/\7AZTHk@G*2%90srW7iE^*4mBT(JUp#pY5@?O.B*.(4;YPRf("ubO,JmER0$ic_>@Y)QFTiJWF.k22**X%YO<O]:Jl!-gSIZg'Q**/3koc]qImap%cO9BpR!"\s[!XLL<j^O/:G\H;V<nG9p;d"kmE:_dOtn&A=.$8CCM_N-eLnfj/W?T29rV0#HII:,J+g&*XI`Qb)t*IT).&5<)RJ<r%-Nk`&>T+PWm=XiHrn"><6UES@?Z$r3'##uO;eKq6Y+SMaQ0I)VqR3:X")QMKD>FI$][],#"SCgH#I1tI4^5N6hi'W9X0B-llYl)k%j0pdTWu0G_=N&\#f.Waah*5Pu"1nAAW&/,aI!>HLG\#';IlZE*Z.oIlq53F^e>,^&m`KTB&NG>(#R*u-Rik-pT>7_6p[ISKL\7M3%o,:2kXd@b`EMC7*h:F/j+*6:a0a(*WQ3Ib<o)hR@H!0@S*tTM%AXr?0pj(E/Vb=jFY=&N$Xj>A%Sob&^r,h+(f$l$B/`(oF_Y)D#%1&E)/.(L:6Qu?A(I-E=h1euj#/?F>l/RKhc@mCZ4$*"CtGf?R69]%LsjHrq9MVgcCoDX-ajmUQq4m:p@L#h%uL3>au2CD^/IGot9%:uos&qdm8-o5We+Ct7]C'#pk#GEul]EXq?>A\a>H`1l^jc$1qWGK2+&(5.d\Z]N1eb$rY;;$=)t%d^]d4YYT!CEpF=H%+jsqc9'l%/+n^$75XXcT3#;tfVj23Z.*nB61I?n6WqCS;S7mRS!-'E;g9s3@(lMNHr-%U_'W28n>tPD4g_N?@[Zn&HW_.4C)(p()R%$5]*t`"%N@)@qirY4N/Yq'6A+jWc7K!K)#))uHL)P)55\kl3"RL,K*[fVN8DlCXq=^Sj4dPcf`0ad/3`dQl!f[hWr$Q>B,9h;H1,'F`bo.S3%&@jsWT+hK3oBZ`E3f+A"U1sW`iOk[V[$S5?M$KTsjotTi%U7HHbg"Y8.j/,5-[tE7aDiMb]hF)[hh9OnHn,Xi\h)Tc'D<d4+6.H+%7`)_s+$##7VaQ-E6q@T0o,(7U@h`a%:BM;9dCn'2&md2O"!kepn5tJi+UJ>7qT#!AJV)V0EGR:B\LWaAbpoSD:Itm+qI2IAp,?XY%!u1*N02MR2,8>Y3)c/j6*Ur%[9Z6AhUHjG$U8o]@+!7B-_6gGe7)+_nO3+2^=bT2#=V\0cT3)8(cTFN9!*Q@Dica\?EPs]krg:#&%GR@/p'e2ehC)FtQq8Hf66\r!ULV[*q_t5*ucb!GSO$Zf;</DI8?c<FX%11g\c.e,H4JU?d&64AuW)WRR#r<7CA[I=W'Z$BA)3lgQ%X&/[)7qG5V8^f,6Ir5"d-**C``N)i!nhl)[ENhgZAZUcN.T>j;A'%\r+^Jip>GjErGs&3B\_3)>kien:h"Ndfc/tb*N)@is9"l^5%AQFp[@sR:.Bl#]'Z.F!nCprDg1mVF$6=[3-f3+BY?9*s$)S:mT=B7(qB]P$7XfIMW!i,W;>/=HC,JOErF!4OqpE@o)rOkaeI<k]$%e]=rQppiLd)2KlmaDo$RpKEPMbJ)!b`fb9jY?Y2Xe'#c.>@X7+?um(]Sa`%IYHR%[m\F.E2@dEG4SMTX\@Yu,AM*df*[f/'/l:;$%:X`pu9>"ADe?3G;=+P63J9Q1inV!#N\>7oN(I+7!cmIOR'L**Z;$ALZHZHg3VZkq;n(MZ]kDO5\]!M%%:u\=N14n&Aq=#E<2H<nB%%k<Lr"(UrWfp[;m[hM"[Vr$6Ha9Tbsd`N)?mbc=4>Yt?Rg@A!M6$]-1]X([/Eh3C'E(/X$=lAl.0C[n`:-["2Z\]KojHK8@mV<0&%!*GNAMF`_d9sU/6#N1_+T,b:9jELufI/t8]1Bg"hW7j8'S>DEB1[pf@PhPDlpM\,U!=b9%d<KXB,3Ge>jX3a7o5/J_WV6>Ynm-&-%XSRD#qQ9*Kn61/$r*s(FMK.S'#pHFnaRr(?%+R-1_>EGC44X#g`ojJ;gQ`)M-Oq@\f-RPJ2AG?+D"IL_FI^m_@$!72P\uN'T<TN)%a#@X(K#DTQ2>uZFD\hNtk#*!JT:6qBWkSe^^87<f.DO\B<!>u@nAZiUEKPFBi90p!Gk^`+PM^iQ6#UY"l*Z/o^h`mnCFYBo9UOGu%iVRoqVaP#<k>t1_1#Gs=B<!X4hc.$sMK0?Mi1%m_9L11=nP*SAVC6J0ODjFaX;5'mf?8?bZfo``VjD"jF52&NHY=-1$L\<p)gf/F%f",^"4,q8C`]nfSmJ>")UX^kI(RI$T.slW7^"''jD];,+0#[bR#!=XoW*D<he3238Vs>AgmEMb?rm'QlRnkQBX^Bf$Wo=7./Mq82%Y2K:#/BfI'=!-<qbT;3(-Pl+li6fkXjb`f"jjT'?_t1!e7IAGeXc^+d:At?:dka/MS+H:>rSl.<g\kl%\$:?'<,&B`2]E.N7j$=V%rU-\pqu1BAgAY]4g$W*ne*+;Ag);48leflKn5HeIGsHH.WusH3"M`81(;B_!L<b93T9rc_:#bq3i5`Hd`=;DA7fE&$`9]j4F^hWK%nS2OI?M76MQ=@^%C\61@ih]J?8%)!(;bpK=PLD#ulpJgAE0AY-JqO6/&ra@?YitK`SMl=5,buIDK`9FJd?h2O+P$(e8f>`e[iE&Z%Yc(1-X4E6(,]@=-QK<b\3COV@esLih%]q.j&ESt#<%TU2^;'SJQOaQ?<?,KidU?n646uL<i`+[hWJ8RX#9`LE,gFVcP`RuI)TnRq%Tt,?l$rUW9]KW==PHGSiqIFM!FS`br$!'&H.'l71?9.JkcVGI:"<B[Dn`Mo6$iJF^1WGfQ.aQ6hVELBiGu_7Z*1')E7.]jc5A#CF%m[`Y5B%)+e.3qJ`M`[e@=ZgXQgu?*D[$4NsU%J1"cSU>+cW6>^)eX*HrN+edqp-4R2d0QkUMaD`r;]IP?).8l6a1]F#3>GUS_ooh%"\!F:`GkFJbW9hBC29-MeL&&8*X.e#P,?#>cSiP+]BHT9!)e-X8)M87hV?ec,h],B4=d2+XM_,bjNq+a\i46rRpnuQedOu/U(J1k%c9"Z;!T0^!qHSBBKNU_!s%kZ$Oq]^qfjY.2$jrH5QiZ/+K@9Aob0:Ta27jM0ZYQ0H`6;1cbV7"gHt?lA_^1*)RlSU\VpD)6m15Z.%(T:35)/Z?3K9G3)-\mVsV76:+%ISLME1adk;@W&P2XbN&e*@\)`U'@Q=eN_;:!V2)H*>G3mgffLo<csJ`pi\WV!(#cOJ@6'ho,ga%3"r_&f]T8f&\JIJ\a8n$:o4V53f[d$.FcQRe,2J[m$iE^db`U+%I),%%d@QQPt,o3#glhdg(55)#!'TR3^>Kkjua/Cn.)Q5H7NLE%_jHoa6k2`.X:Ns[RB13u#.l^!+q$PuQ3a$]X&sW!N`@f@R9J?GG,/aJ$T#452*&4Y[NkOAg2jOtW'[IF=fn",.^[3k]bIO,r;:(M%W8_5T#uDhoV5Ocj^[8(GMrrc<QTF&LCB5Xc(;s5+"9lL6V9I<Th.r5HU*P<U?3KkNX)s.TY*s)E$qP2#M3GYTN,U!E2]f]2likeV%II^]@Tp017AG'E*Q+[cm]a[;$VF3(O?@Tr,JqD1+Gp?0OgN*E"L!jf!g[,N.K^rRT$$<+Ip4h5TP_+Lpb+H,R(GrJK+V`:hc_+R[%`4_gPh"HRD(eZkI`3T(>B4ho0i\mC`<fE2>AehYW.WSK"^Y!.9paW!QbU;o_btDB'QsFrJ+2UD)`;MeC%&9?8eg1(_$tF"95&c[J%2C_SgfbK;PnuO;VAohp8(2kkM'hY6%0tN$@=@fD801@EG8I:?P<Y=R`]S^`il(h$pP0&.,k#fSn7"lA/,R#$3>nqYq</-o/]H=>o%OB"8Y6MB\>md+"!jd,&GEd0+Q8aK'-T\OoI)Ts&L;BDf9-tQGa3$OnHPnb3a*QKhp-BNbtqPqn3*JPb\$Dl>`_\fBa1=ROHKfPOT%G-.#s=OpCm3if\,WPF<_SPUQo`Is?u9IAVOQpru',q>[[6kOhc3GUO34N:)nZqmW_%4s5=`qhsD5$7ffGM3!ibH,A22QpHIiRm0#%`o^=]iRm0#`g4?QBK5^qK<[0/Y!3nQgqhVgPP`5%`uU*jr0FU,m!QY%E\3gr2'%[oc5YW2]>hc#lp<-0_Z&/@?t8-&%)W"qKj`Br%IoCR1nq:Bi#At$$<TpP7r!WI'TsooB0)e<=WmFs=qW2)FYF6!7<@l12qQ%4-B=763:r5r&lg<9*\q*g/PlPjYke0)g!W.2LEVIg@%W;YQ9'_EULVnmlXl2!j)n;;s;_[d][#<.>S.U1D8M[-Ht\R+"RoX5h+]n^d3f(lqfN1fd[K<r7nic:1)?:3Ci`>Rm!Fq(;,d4F]h%>sf.+$X.NPr]gDfI!gPGG7'f&!!*%R+!9G(n"N\W7o@lqLW.I*>4EA8pf,UgZY8&rfs,q>p]Nh;Z>'/A#\t1a9eSTDpedDWN^7ch%CteA9!jg%P(,+j;2(J__bd-KQhDF#nCW,'dNO%\[H5,M+9gA?SV3P=:p9%tn2)"[+jd.P^p9&7u>rsrngFMSnls7X[>A!5-a!nW<%ls3[GlUL5Hf.L9&']PG[!RWhhX/oO12a+?\78*GGg!aGL_Aqi9FSr"j4/<I=?1q_@D8I"PZ&(AI$LJ\K.snOX2IQrPfL22_Km%"$%9iE]lZ&(AI!eDWP#Ri',N_Qlp=_06Ed3_P[&Y!GI-I@cIZt[-`5;pn99V;ueBG2`>M+tAAC1TUfd3_P[&Y!GVi3F#cB[\c\^(Z3F%AKs+\-;:*HRqU8pb0a*`TPPO8)26aT-T9?f0R2ZVe]5uO9VCE8;/X2QC:\=R@3>rJ.'Hf.KlN-]?j^D??io@.D8?@dZ&,ns!]<&s%+q#aEdUMmc"NEIUJdIBWZiq*[k@b5M0[A&]9VCOgg4]idIRi.H$$<itdU<LC*,WM+7QK1S$&ir4%9'3pd8k+O6HdjE.*O>kZ)P0?%*ofA"_`UCq1lOVi[UBgAfOW_jM0<^@D%ktrCpIoF`].&S0TC7WPh3t+2G@SMX)44l4#Yd#UR1r3AD8epENZ`Y''!56]2g"TgG"J(%Y-qaOmFYt(Sr6ho`;iT+&Y!V#DBDr4KSXWU"-XSbC'Q*5M+tFRK04ra[KD^1kA(=b1!\C2&OGP.Ql0+^9;cHcOsb[<Wn_R;Z3S=G%Wq$.eW:C4Q<4N?uW]U=rW]U>-<N\Za.Z_Au.T^%VPt,4KQ)cU<as/U6as/U6b#Og.jUmkVjXNs(nd%pfEYTp$Gm$U:49?+p>_PaL%*eBG'=!:J,7pnZK.kk#c&V*^>.SQl5#`M`."<pgU$BqJP![C^J6DQ)l^k=1=@8`@\?p^,K?p^-Z0WE2>0VQWhQrN/ZQr)lo9WIXh%9W7Lf9W2tH`i;-&&ZT)i8Q?g_OXaETJLZ_rKIU&3TZSKDXZh1D<4N@"W]U=rWa(6L<??]O0oc`CGm#HnGm#Hn\I+P#49BU$3''mt%&X_%fd=Ed.^k=1u^k=1=@8`@\?sXpF$WS7!3.2beW:C3fW:C3fW,`V"<I"`07<ppjjUmkVjXNs(nd%pfEYTp$Gm%`u\2mIJ.SQl5%#Y_1;'dcq+"Qo>rFeHl%0WU88"')M@UahG@KIU&3;O'a[:*3OF<??_DI9[ekEYTp$Gm*:&nTCMI,HqG/:CFfT[sXPQhZbsA\M/'N%i!<aa8-au[>""<')kI-9#uHcQk\P#Yk'\cboPD&@d]a)B%H%F??s3fO"-s_&BNpk0^gi*$G)LpIWtPblN/IlN8ds/q&0THLTjNOU%p2,jUTNqs.8sr",+Oe.h!1JeD)K:MVRm=._1;F%>W?88LaOHnXdpuA[@63nJLG74Se.9SQRlV#[L`*QX[HaD?1j+EGR`R6kJ&?kH%J`NOd=IaWMAJ7bsa8s]IU>]k(\9sk$!+WfaC]_/-76Rmr:fm:h#9q:O`J7Ftal=#XFBgG2PYKJ4R%poo"&rs*6Qf1VW!2*,"&oNA%I*^_.NrrXg,>rnSU+=hb\rLC,M/&,<+;8TKq>b&0ga[]J,r#8)%#`+4IJ70))!:AT+TM=&f4LKV^C'UFlOLfP9<RA=c/L'dcf$aR%031^G,6c64_pp=F,FU;_?&>_?nH3&W1gpYE#m.ESol[FpBDU&]99p`/2YBdgU$Lot+rJY,%MWWF@LPF2+*\8`U*Uc?[4H8$#X!hZ%X@`M%Ra4?DCp"7Nb4,VYB@J**Ri9',1.F+,%)S6UiouJ.GRLPCfk`sF%T@",Vnfs=T0SdT6U0N;FVZ58=ILRf$sP(bk[gAn@RCr?%3bg=]aEE`k4oug__'>=_3V4p03?@mU@#Q8XK*IE`/a/g<ke]kFOAIMsM?)nb4pV71/6ru5)&VL^6m&:aCk3Q80]*[#QigF1%NAeL%$9&2\@,#+Wl1ia4Yci[i"<c*lj,<RkJ/jdM$f('!i*dJG&JM\+2an)aa=r3K^sTHXAdJQ82b\f'@1WRGC03N@NC_J#DFT22")r(F%@FI]6@.QW@Mm3ZF9PZ)I(PaBX7U<(b%%E^*YNj@3aLNj#9j2&bTM/c*+:JINH+FPc%`:Qr&_-u`FIk\'GTF^@Wb^3?#mQHQ&Ibpd%5nMu(n6#I#?kX([-4n<"%)e7P*QGf<+T[3UkZ^O2)eqZ9LH<6%9QmOh+JS.CRo_`]ZSYIV'M#eD;T]1J&;g]mP1I+RbYh6X2NFQ4%-d\R&kKNKp4W0oD!S;LnT+!+Xp40.--U8]A<f2>]J0d&.F&W<S+A4[+"_@[,fIY(>Jtf*._.$(f-j.V=Y,Nm!^_3gE9N=B0!Pu46%U7cIJkI[=fC++`9.2o4@10fm&V._91Br5dJ)TmRo8Mj!JKeQg(/O`#E/l8)&R&Ym-(pp<D)@Bmu-56oC92lJ*&J^!R?oL_Y;$aMI%/4pY20G&<:WhL'E!\I5G#h!S=<)aQ`1mc1n<)Ec#Z)O`O""caXoi)Yp0]4-T71i3PF]CjB9]Ju@'nn?YXJ2I,Au\I\6*@>).B\\U%1XK#.ZV=Fm0oRJIC+4ll#,IRE2HV7s/O_AF;RI3i/1)+2V$Ns',q$)7_Hb*me5?Qm4@?8#"m&m'+tHiS@&febJE\f[$U'1d[QFUS%Kcj)j-1mE&gu4a"UZs:]\Mf?cWM^;>42gG_;'?3u[&#0#"Mq0BWhKR2"t^[4+\mn%@BN@)&h#5_fp[Et7>3E^WhQF'VOOYjKVCe/%No8n^;^%)f[%aN*V@gWKRYkOFUM;91q2VSU.Vr,V,-$M]a.t/,'nSQ+[>WO7L_F00?-uY/2t02b<Q&sOW)[,Wlq_/h-nCN/[)uI7%'h^+,:m;\%4!7^"<E:LqI<]*r<[_BjV623s'Z:dX\"]r4ORJWLaitf)<oi+(JYX\E",IHn9I_Ae<iA#0k3>cG+iTpe=!]=HhJ:r&%Dnk9"5<s--(,'[9kWed$_MZMHPo$)Sr-:R,e;\+p3_e6U7DrpFR>PCLTjiI#!2G/D[tL;]!Wtg!5b"-uHe0tMfNq#f=sEp?Tku2>%'1+sWGQu_&o7=IS=)7.fkj&:N'iiXIF,CbN^QP-'^k0Q7j?d#ra#\l2^VG=;U?#3QX`PAGn1*k5i\C@\VkTg'7(QZLblK_R`<&(O%_.:Lg242l/R"sbO"H<a"A7a+SkkQLDX:qIZ>e7uo%gn`9_l<]FZ76lneg<s*1^@ImFCm8aV0_*%iCn'QlZ0$GrnJ9Zill6/r+ke$%970pSNh?Q)7M/S14p#Jffk@ct<;mEuQL-u1;#KXhE-`^ji<!A@YQG%U*Hqb2]+W[gW:-Bu?hdf<E?G66+4-/NicArQQj^VfXq,a]%e&EbWm0i?E,:mX*:D`Y!5$1p`]1)?KJoirU_gSbA6FZHhi!ZoFF\krnFGl"p\-_Yh!,MQMp0ZI%@K2&[(\V4gIfKo-fq55*QW=QA%@=0#(4UbT3P5YqB;?8gT5gn8,TY.9!^Z)YTg7&O$KKCNk?GUg:FYkm^D,b\S\'`aI0i%u`"(3iM!(XU.#uWFL3sq;!L/J@$Y(h90%\FWIUU(@A67#R!t"_L;4QOL,SdDqpU"L6;sceH=@TYpMs\;fX;M/*-U9!eO2pT\+#UI&AYj2.gZ?OL8QO.-d_0ansI`uMs7b92i_%rT8</>CGqo3nIcOVG#`$&0&-=D0U)#?oL*).Z:kEX#V+B0F#cZ%>*fPlggun?%qa`;G?+GkoO[K=L`81iPBJY'*B"p]^+OEi\asC%>O3^oWA!I'F:Ir:CCYV._;]TCiN9J\htWe$"JQ9j/oN?Z2L.g7X6-Dn^`4ugl\,V'pMOq76c4>8&/%qo+P[r2?_eAIM]IL2[d_;R%&sqc"#fs:\iEdlWfHT_lMX-i_8;\ConAVZNA6X*#">"l:AE:S<KU[PP1j>g/ng4M_9MDqUqng[]$+Hqp>MLUA*-6Z!KYQik2P0>?%C)L-tg+FW#e\s_>JDd<!92hb**7*dA%$1*9'SpU0D@!3eYjOfN3]=;a#HTX42=r7\on/u.H&=_:W=`R(\rR=Z=u'iILj,,g!sOFH%61=&hnudX''C(c*D=3*EQDA$neh69kbPlFtZ8lA#kJ9"^k5+;+e1a@CpCqH`4_"N.@PL_5KHLLYN6S)W*X'Y%R!1Zf8<"5+8k9,3%MHb+m!c&Fmo#*.(^PPf/[""5E0nC"2$PAcg!<Yc*$6[&m.M-t<rS"-BQ@cjJRN$tU\u=?TODT(]G?o>,gjjXQL_/8dj"4'EMF&<3%EQ*8*bVhba'?&EaZ$cs]7#9rg(dsm>/tpGLSOsQ>ZYb7C?mccbT5YGF-^#V9]0M26!e]a/-/oL_"G^fMSPup1/R=P_>1n*Oq-F&B%HlOq-/0&C-!eT;=+o!*4/(7Ho$;fdrs(a0;EI8ba/g3?RVIu;h.DUm;H_*Mt!.j78'57t?V64C.V*IY`:(fes?(r:t/I>l#i%Bh>%Hak4%`<E5("e"Sf1^k+A5Z,pt</?S>J=nuYM9$WfG[cO><;/GaG>SDD"B:GCK]!LrCgp5pO?(+T6ejhK6<KG=S+a#e(d`&e5G3WL%oGT4kgt^7m6A#=qD9JeS+T;fcYqCjbOI+@>6K]N+B>]ss2@&n@,/>O<3<_K(\u,N:Nd0TN(^0GF+if-*EPt7"!'9RQD?+'I_gBB)%6unDJCQUJ:dnq88+PCr%2$F2CAW[u(9FNb65VugY+l"'j(2>#I,RVRD2k:,HjlnmI4pD#FCDtnW1ul)5K`baf,:#RB>i/GhU/'.g%F=^KFjl*p,'<8/b^O\jJ?+e&dN&f>r.`-KrQjHQA<MLW.KcKZ:OMeRAbB'WsfcgFcEQ9^8J5CGQffo[lYf49sU]_27P6+[19/#uh%PmZd2/U/.t^?r5IeBtLF,+,D;;[dm%#f+GM+BQh7lG5WU3mkPco`e'&g^!M3.)>NCW2N57p4NJ^V0ikiP5qjIp]B=\@)-E@Qj'+W%AUo%`++*6mGKFqa2=;g3mr3pi1Eb2gX@ldE`42]5L(Is9T5A?E4%MWm6/bmRmOVgP@'l6[S!I0ufXOb_nPh[\<X<(<$7oF"L$saH%U]1*(4$qX4'`+Z4kmm<?F,D*e8rd#rpdG=9!3un2Wtu]tN\ns6^jtcmK^"qBZX"(c#YLea*nZcDUGcj'?RuEf;Q#%%=AO3W.0C;=%YDG*\p/Qpf9S2^:0N:h59j!V>@sf$r*2!UPdn[Bt@0r7[Gk<$qUEVT!g,!D![(SoE*#coWE5WB@ms2RfW0BUTi,Yb(<ZV;"?4XcH%J1TKn,DbH%bRB2$&B*KN=JF5..qn[Ol%a>`UPP_kPL571K0#'N`<9]pJDuV@N=AG_Jst4:[&Ylb"#@-DE96k6jc'8pU];A8_:NWV%b#`!'HXJ[c.rmemMp4Cq6N@-*DG<r8#uLn#OM_c++WlAV8(U*6^4e=.Y/%O]N8F5P.0ecY!eJmqmP2id(_EV(1&1eaYRR[<[`sJ=%+=g(j'/3:Q;CWf:go,:!JlnmcLP4!;AMG>HN.<8*jdW]?*O)\J=9^nt(u#gWcr=s+CsuqZX5Oj?=0N-Zl#'^YE0Fc3!XLRaXKE#?%'N1nYjAH4jmPQTt$RJGR$<L"C/7TNM.#j]$'>nrd'nTloK$tI%XZ9XqW!HH-85.[)lffPqhZJ2!5f96/7f$&n("QoIP#*:bBV;3,%!Wrhb-]S5]Z@tcD:b+j>73+u+,L[2R;A=]t]M:?p0&-nk+LIh9+[kP1Wq>nMOOY7$]uIAOUe/P]4'lXd/9^'X>cUZUk-?^F#cSlH%RO=!4!/&N)5R.W%eK"!I++u:>:p[@.5$+2*pu=MMbCaBD'7n5\,Me.o(&)fIfcUF=/-8*`9lqG-ffE;q=>sE@Zti6QL(;QQL$hK&%S`0uaIS@-`=>1e5NoP");C1HWi%bOai&MQ&AItRYJUlWts3d.:#H0mA>QF#VgeK!qm!Q`>'Z/Eo"D/Td`^&o*^4['85QV#nBEUPQ%e1&t"<.RpSQ<uflibUpd_o[<ZihH1(?R&aP/pO>O!!9%//p<l7hPJR+6Ul1&7h>309^8K"o&C^pr^I/T*H;uW&kkRUPiAAUe14Z/%ZZ[`h`P]ea;[sp8U"C_L,fsLb(oN+536ffEN6FQKX&NX#)C*\#KbgUj#`&jUQOlLC+/?#5LF[O&Qil5d=Ee3Z;"Z"4FH]4''=8sB%6HI1Y!E"Ll6HB0>JV`LtqTWqm-A>GJA]X%b&.<!6Y`EI\;:#Lc(NkV6Z-fqS1aPI,H,1=>'EEerf*o\1+a".'0k&V3Q81Js"0mn1%`Z`,*pdkLk&Ad!>FPL?\+0_b2&.X`<'r]+^2A`.FI#]D8&X4-sA.qSZ1.a?l,)lX20Rh.e!&4Q_!Za-L%p-Y6BnXls!/''G-%Kgq%;"UpunT=KiL+j%kEYp7>WH7h9n,bNrH6aV,2O<=6C8kTgW/jdn"ZX:=k[^6R'L@Cl',XWhZ%!&.,[!)b0'P&.8]M*&cPHd9;S;76%*$nFZ.k"_CJWIDa=:-L1=BnTBE#?V1.T6b'BTURL948'^`s%;M&2Xl>?#XlcUGrtIEK1dQL_bp+,Nk=Xp)RP7dP&&VRcO5uTB9*?%bMalO,0E?)mLiZt\V+"bLJ)aF#pFEu46'!M,U,!40uVNa0#C<l6Dt0V$6YUc!X&&<je--hZ_3LHJ=.*<MW%qd"@K>SO(`*=U3eJF%TuF4i1)s')9O=5Y+;FU*[;4t7#U%nU5beBB:gkd%>hN+DKdUpf4C'3PiR5XWki.+_$)nT(7?^"d)\M&/21[>epf>aHV4`@U??m=`%6N^FHSA]B&+[BF$!X,MQrPUr8K)DeY5tj"r:FaTKh(8tVFDVdMTRrhc+5$tR<C5sbr$^WK:^X"[@g\>ebL@()(5^@09SJnE"/+-H%]s?$_&[j&0Fikmb3@\/\j\cM\k6P9,+MK@@U;4H'#B&60cfHo/PjtIE!nA\a^jam&#f!8VBWFNnfpX"b8O*DB`I#%\$mKcZ'h`Q\%A)hgLQDJZH[DeFg_I04]jp^XRW;rL0X$AMfLqY0o)+(4(0nf.#YVcbFPn8DjnI8hW'p&HB<-4nf:Ft]fRX6Jc)J6>pMN.cH<PpeD%h$@Epd4C?D-#eC66@=fhXqr99"(_L"FOt,\lbXVcKYl_+S0UV;j^Ze)8e<'Y0uX6i8G5ct3<D/[g:'%nZ;1AlOMCtkASGhO\jBEU%neE=>$E-lsZI"lBO:FlO-^,;40Yk7$@=;<4-m0+;8/5Q\E?NsI@VDXU6eE@sE(mDeL7i&SZgN&fB&iZi#[`1[6(=b6LGnZ9_/.kG%6CV).#b*d\@@K4X,F]MnSuJ*q(gbJ/LnRD!0\>o=[?SKc9jeVZ6oR81[>>K-349LS`#-i1h6eZDejS>M&D(BKU6Qm#Jt_Z^cF[\h%p*a>WKqr1O;I#kF/2AiSj7YL<,Ub^kp(ReVT-L9lKK86doP*;jb-I,0(S!]nHmrhNliVN'Pu9C*e@.FdJqf3/)Ph*'o?\#q5G-*8%Q*Qq-;H*49"@`_?+h"R(I"W%Q.1.0XK1Od^$6Ooq9dWo7hD*L5E=?,Qp^/QKq"Q0g('5%JDHMXe6JR)sKt7d[TsbIt6HuJ0;M:9K%5Z+YWY/`.`/V4'>-?[!jffuL>VqPuff-A53E:HcV,PFNhZ4q0bOF\(pAEZpi8R8NM_Ht':N8d[cLD(Mb;1T!0"HYn)pCkG(pXRZq%7SaAJ.1A:_8q?$oD.&gA7;5Pbc\$#kVh0nDa9_,tJH:W&QB1&4hj(EX6@EhaLTQ3YFi^&Fo31U>@,sL<MPTS`)s5#AKU#0Ap'Sb!%/\cTT!lJ:[WeaPYBP#-_k`ZY[lI;24MA7"q6!'s9?:(&MM=0SB$.8i(1c!CP<#FCQU>0"*d38e$VJmbOJ[h5`&VZl#WYZj5)],h=%0e&q,;-5aU-DujuNUJisX:UV8`%%'n-OcOhQnCc<Qe2CK(0-9T2<_X&*F>gVHA.2IM9q2@Eraf9*j)%?!M5*9kLY(k4s:RGfAhO2%h,>FU+!P8b.:nTrJ_5aJXTkZXOIO>NPV.=m:He2L7-L(T5q+q._2C-_Mgh_O3G9#hC+0tN\jA`Vej>2QO[Y"aO==S4UD53`q`rmR%#[s/eLSfVa%hXW@?;_LBNUqLJl45"(QO69SN^P!>;G*XT87s5^TmB'3Y;=QrmdeX-L="\X7K'$:EQ"++7H4L36tgT-i&AA\MnCR:%#bN2iRl;a@'SmL0Ooduu!<RoYL*i#/&;&221@HsOW^8KadVF6U0l%D\-A27@kSM9A5[<rF?Na(oRQ4']U-)''-g01T4H3dVeP8V+%:m*&p=Fu_RJPc%R@nFIhYE!A<*>B+o3\kg(-OJc*%-/%tPSbMm<*UGt35?$^7KO'&jHJ"1MNc8GJ:1!+[$?.Q<lDADe9**ccXD3a%rQ0^GR)*B#AlBP!D(DrJ.5lbm`=1dX7[+uCbE*5+6P9n1R)3=cJtjWJ`$m/adpb,a`XiQ3Ge1o7)f7i?&qi-B0cS%&\47\,1!Rct%?'/SE@82?A,V[2$#m+d5*7KY`K!T.rRqtBJk96@_%W;DHEY2p'i(5*a0ERs<Mr2lYggrBc"bn#tS'EaV'/Tf&VMWSX_(IW`n6ett%!Cr&6e+I8_38G#;2M#&nG\rI)$@[n`UO%_.TDY?a".t-r.gn0iYV/Bq!MiJgU<kYu.0VKW'C0tlirJ)E@`A'CQm5+P46jP_L_G:E%>RLhHa!kD).>-l;=W57c#]VjFWEtCr`4Q9+p,J6Sldj2#PRu66/Hc*Fn:9ta\`Icb6jmYB$:(0-KqZeGAK79ZXBM8GJ1*2b^jtB#%6Cf53$]i_TB_!1i':Jn1b6jpUN<@ccF3\ES><JI3EMPi&o`Ynf;gU#_lkIqa^^g4nKNQ7rHF&<@MHn(q.Lc'G5u-F-2a.G7nkok0%JFjP1NJ,*//Mr,WXG3P[Z,ZGf<n@q>VGmDo!]0)V(8W4-=+j1e!`GqKGRVdCeP[0<?dN3-KKt?+R-\%N`@\jf;5u@fE%S!scQpO;%!RQ@]!.N+8L&ZeKfP1k=Ld<T9N)*TVpa3OmBu3\:i+PqWA%K:l3l;RL]Ek9/W<bnY3!^ZG9@4:tN&e`ql$IrB@tRs+/16,?HT#He%#)2-.j3B/-\b[aB\9DcDj0c6.pHUIA,L6=O)SidA;r$k1VRci63J\#gTu'(:!G6-V7MfT(CCl*m@O\H!`;]i.2!ULLC(=$?da2F>%DK8-+5TI/d:mTKq\kX8i4>O:?qR1fq4cua6j3Pa:":S_2968J-V7@/%io@0q`Wm=-_/EaWi&_@``=MB"?l`cFK^-h03SI9j+Nf#]%`KJe<*G&_/T^=.pNF?2jG$qJk`f=:74>@7Gio,2+KZNgO"<uD!.ZDs][brlSmG#K5%bCfMhe5'5&ek`qXp5Mi\mAYQfYZVU(Bh08%/j%S2kiY8VZ$hD(&HuAo"ULh6b\3al.O54&hM<Q0o&k;J0YSY\jF@MUHmV*>D*`aJ*#t%.8Jo%+;(gnqo!XK^Z3A9FKZcF%<qjKe%2BEr+p79K`*Y$X,p/EmX(@@_``MJ3f?IJVKWIoQ#JQ3je*JE[oa\/LkCImb`RQ<(\+D0oK#&hS:L(,4'VoJd(6&)h.K>nZYog;s(%n\^%k>7R$8lpkk4XIO^UTrirQYl)kt#tHP+SIcD`gCP\?*`j.JSctu"*]ucE8LOcR*]uc,^9EjHZ7[tY6:beZKJ7-0i443CY?3Q?%':Q8UhJq>tpF&YEi`MAZh?b@!]q`Ghnj8:.HcNsf*,Rckp("OoRYG;?31b5d$<tO?V=-:GG?giNJhjJc$Nk`'KIBb1^neXWP)?Vk%0[;osRTEZTJ4j3[Kf2_WhSA8N+\[Y7,d_jX)&TBue&O1QoQu^4[s^HuJ\iJ#&n"SO(S;8C'DHt'i<dk8^`C/5LW4%j$3ODaf`>Ue%H_)=)gQXu[BTcjl%[fOBL"TXG%bm:VeieXAH8tC+F?^#]aI;U_6Wm"tk="lDLg1`;IqkZX$eiMK1YI;,]ukDH5iUc%1O/<oi52!9%/tM\s&$<J'bi\%W^&ITpWSOU`dE(SO=_A9kTc0R1aN!fW`m>b!8-=.pJ9klu_I<=;$)dLVjSt&X)$+;B>Fa@()g'^4S`133*@NTD%<@o\dn5TL(-I`fTR)1sqe>YlL7Q;79$LL-G@Bs`2MSn@.QgeAn^=iScR2S[<[.c6m$"N'gpOiO!XeL,-JROp-g<"#2BF\Z@clk'p%S8ERI#cUb3./lC]ARQ:8b9;L!Ah,>BK?llc(DN7^3BUCWm4LmO,)J`R\33Rp$;5ZWRR[Y98sTf=d*CeJ!Z6[1lWd%</3^./VZef`%B2OV^JDbc^i`MMGQGTCXX;Cqc1B^#@KY'e\C)]&9_II@hWGo9O83W6AC$:9Q_-&HG:<cg4Tt^lnFeNir6jXYrPh?FPib1NWai#JB%S[%=O:58Ii$\LojN'YF:"nnHeI!EGqA*K-hH"-!a2:P//#bE685W"Go75]Su6q@/Hd"+M^jOUaC8=U<-M_g.P7IC:*?(sC]%5]DI%b_7>U`^RL4[-q-=%iOu:1cOJ#*&8TTWBq"Sdo/R_$%.E+#nJec,JY^7&qe8s#kic&]:'bbG,4m9oaZ2pb8Hl2T4<3S`?6=h":Oq%%<AYMfW]SQD1#hR\&Wpe*X1mF5(+ad`'lEjCo1qF7b`'cf>^]Q2eIeBKN,`Ro:Bj_*5-uV2N9Vp=[`8]@AB,ep/?[0jM)Rho%6Kf8%%u#>MV1nh\`ct*DT9CM<.TJ%V(C4m=l_bSOHH@!;="+^8ln-n$DVl[3p4lP'."$j37_c>?ZXGjJKm?2NpZ?Gch+;,5Ggf7HrBqIg%d3Cu<VYTg17\:WEUpWRZo"J4`dRp4K&:.Eu>:7"$heak=HHIA>(&3(l#CU4(."QB/RPP_kDHf(K[+u3&`W]GUK$m[KE'hG_jBd2G%2_C[NOq#qc"uCWlWq08`jqrPko"5g^J1cZS'gK3-&Ii;WI]+(@Hi_Yf$O[^Q7CD;qa=eIpj&A=ncL!>olSfqi"P74Y"qeC)rRdFb%"cN'l(D"Tjg6ojq"9kJ/VmUn*o2Z-n%\m*r/_)#5fC6=3/9j5l;OGNm`)glq1]eE.:AG!$8,X>u]QG47La.,Bd1,=K%4@EQ&s(PA%!+B>mK`Y/`SKRJqNefE5D&A<H[Uf8##<SPC\rN!bTA4'33X]OnMO8l<Q6bkU+bCpPcQ\=`Kk!H$Lq9eEK0f^QV9ii^=;s5%n)`7Y%DFY:ILgr]-]7^=r*huG85Ir`aaUPb+;b@GF\s#gXV6G[4*(kN/NWF$!n8(QQ1BQm7+,G:a"OU2_.:jN)Wuk;'@fIqncYEHOdU-Fi%:<!OT1'A,NpBT=]l)ues(YE5cB]5Zr^h<$$-h\5NM>bAA@R%-t#8iK-#7l02q3:OAI3ORVoKSp8PB@f6.AHBPV0mcmE3j*s0#q96%<p0Wd7$M8*-hd8,]hdU8+>BK^59-O*M6b3%KM%'_A#?Kcp!u_<_3g11L91^9aJ=WA,s<jK(<!./B8[)<%+sfe7r$2QSn!-MB?C3\%C.:!sPk[Bc@VZkfD$d&S-^1YYAZ2OQ("(oJ>\\4nR3ekqSZXmC)R+Xg=CCSI"JUHRIXj-@K^):U"pE.&AW7VC`itplN`Brt@C1$&%B`qToU'1eG$%5+`C/rnCrN(RG?EXkFP"gIEWJgHU@4MF7<A1.qaqs(N/i#8rm8,mVY&R&;2h+IU?hsJ$i1S(P)mPVSq&s4%R13'r%&k!,**/?Yu%mJ8Q.:-59L$kQ5a'PBWB\9-URS*]`%l.^AM.-ktldM7C8eZG\[P)2c>_S>7H/[4D?<g\>POX%=;Fe/*IR\]67Ee4Q%aYS61(eba$^DO#s.V.W$RIPOA3-)lM*lpA:JjpA5hNqY&<43[)Ugf2Kb>%#^*,c@tb&e$(i9cS6Ism&\nCDjCnTL14b^0=4-,85U%g,e78E"2^jQsSj$5fNh@i's#UH5`,K79d6S)Q.t+!@/;8+K?C.rL(b9kc,.eKHtYj30gCq*fiS7F\(jQ^i:P24*8UTV4**/2WI/o%5aQ!p7@^"oG'h=\#2GdKq(=UGCdft!a[Wt>+H]ju/1A"W,7s2]7KUsf#M>-i-R5%;Kp'F]%d17e^cc7q<H>$u@`_5g(/c(1=dd!W%?Y<LYX?Xsc'3F6mA`cJ-[u*06G@A-e,6SF[D*[;C%)f^mO[c("%F]$r=s'&5'Xj/4Do%IHP3H+jZ:\\t2DU]j-RfDG_iQ\fN:S9[%\qZsK$ik;hf8b[^@tQ+f`GB33=oaSqOs[nS4F+#+!BJ7f'G3O=D=s@&)A]uk_0jf''ZE)V^8`)qa0U5cTWE?MdF-d^'KpQ%[mNk)%q[IP=&^bKhlddOS^UHSR3#PMR!(B[1408pD(Q,`l[*XrA6V"\-Id1iM'9\&tUBJ)&i0;(-#,e<%Yr3.e./Lg?iG4G(P;qIV::@X.%q'Gg)0k630.(8gd6GPL:NF6P]<7D6i`shl(3Z_Mg$AHlrq^<Z_;S0$e`&KlQV29`/X)B4baqQ81N"uL,:'l6gJ,%;g2/._:2AVM&%;kB7*a-.qE0P[`06:j"AXj&CdqO>S-?(O#T^q;ru!nLFIn^P00EfZ=Ca[`TJ*+4l$Th?Y.I!<_t@G,U>I#oY2)-bH<KLU"Z!($Ke%Q'^\uJ`/Q8)sC84!QO"O2O8-QSsE.[%L\'O;_,L]Rq/g(Xbu:agB8.u0E>rfqNZ`E#C"uTPi_-sUg_5A[!6=uEj_ncSWDEWNq[QN%"BJ$9PN$$p8__6KkEs25c19]rU>:T0YN4qgjH\CSPdkLo.RocfB15(kL/.CM/%-P#gSguc^p%L&QNX8nd@`UnV*N$eTfH=</;FqR%VepKBFQYn4&]c/]-8i^fYduqoio`p4SqBk>.3aPAO8ZbSPZ(^PrlU0Ab'(ac&2[QU9r@#>6IuC2go[U;Lh,%N,pF6?6e"V(/;-nq%oL)>V.%Zk:$[P>o`@o=k/b_!U=K6kt(<hPHdh[\C+K\PZH]UsN7YK2UoaJb"TkVG^11AMo6FmZpP<""ec'A1of@/8!kaTeoeh&Tm%PXMVCB2+r?/db-BcJf)N*#Q)DF$W\_,2W!Lc#]RoHb.Sm(::f9Ks&O&"`u7_$W>5WPIO:jCd%Y,8I!Mt%$ODIPSJRu834Y9/PLX?%p%OZ?F8ZnUSCH;V`:(Y2^i8OsK[!nE=MqEUKG<b;'/BFgUj!E'!6jpdU;P\QJi.@n+Kt&t0j9/*bQ4]e@9V>h61B*s+98UP1^Y`I%#RdRu/c]d>idFssYC1BY%(gc>([S0r%=!'e*!*Snl@FDqPqWELDUfNCl/QHg2_>>[M@iD7B,(rGKk9f>U*gAn=jlC%/K7.6Y]3tn%mSZ$tr1+53%3\Al/?G>K&p^"fdXfdDTW)U`FYU9:Zcd4L7e#Yd4mR296/^XV$7Pd'T[BTqA3e3p[;I.\:D#UC:F5R(OU3m=\/8u?%25Fe>T0i537UJ^76<?=fHnaNua1!+keBY7[[k?I?ciLFEd5tZf/nEdDZeZ,%[R\=!)ICZ]_8LeuW22oC<a[P\2_i]o!b'[.VMbWW%-C]E&,+*V(0Y6k]"P_m,29_5N]o2fB1`<DDXUtR3UgeWZ=J.Vb#.u_S<_F-+Tob8jB-cf7TR%7rf.7Jq]Jn`>ZY9FaW&]3]AM,(c%fhA`="%QZL=]g]<Qrn)]!`;#(m6br><uKEe&YRho&[#&41Mm&6pbC?:HuNg<3R\teDX0<KOqYf%KIXb%9h`#.ptY/t(V@M6JrBQo%bXQd"mqEeK;P8TbeZ*sJqH<3:@a<]S@nLOJ;(sl^Gq99+(;7lsC`Y>'=G^eIeF*\Ol)1dd"NWG%/0.oVVc7HRek;*QnDn"EhGm/^%HW.uHVBBS/[(DcT[cKf/8CM=T8f^cd6.@q;:&#\6jL@QX.:7MpAdc<u%O8ZKSN-!\OX[Y!*m/H'+bpi9&B=uKoe&Ro;jT3lDMWc/%;X^j?GO\-h];rmq%_`^-&=Rp#?QqBRo#->9:VE>)C,^=GGjKV8_qdr<;#4Ed`)WUhBitGX;?c^J!.[CoWR0kDnQCsebQA()+.7MV%R/>:Q4u/`J"HiQ`oI^XSB_nW/4XO2E2%nULLbq(]5^INTIVd']aKd'[c8#6l`5WTIHa"Xc1:6$@?Cq$SJ`k?D+2U6adpBYp5qsqg%i6TJ`f:WSJ"&W_\+P$id1b@3Z_mWu.D#NE"JG!;9f$2Rc7-5I+o))l,?8englkhiDnI+ZU2?l70Y7ErQU"II[A_O@gmU&A:".FTL%adh@fHX@VqJ6HFK"l\<Y2bF3m#+7$uUcoZ.7WChT)^L_jkTrKe\Q#S0n3JaFMJ)?ElPeW6SBCnDg&29E%HH7/7Djh@Wn?_7^#u;D%X_oG[5ap>pg*b)'r/Ete.h716)QMsJ8*5?9n9ZJ]&.;G"<Bii`&O#mC#1\)CC([tKL(q,.9LNAZWOS3;9u;W)LmJ9cM_c`aiM1)Q%eAB)kq7)MMd`95Ts8L.72;^NlORAEQ>FCG:bi;Q.FlAn7Yo)]`hYq;9+ArRB<8KJ`#RBA:%Os_;WP.m<po1ZWJ>Ao<N2H(_fJK%0%+(F.igO2IuGqu+6,-R`s!Bj"&<UCo^b']0]&J-HhXUc9H@);Gf]Uc/B!GDX4f6Ndb^E`U3/Oinp"olXrS`]A?fTDJ64:)kHjj\U_%Hh%<j47kN1F%dk(Rkb9HZ#,cc!$OsZVnfNAIWIE:,pl)^nl^ia,5Cc@*i&nD\f%aS7b9DtIB=o[#K_Ah*8jmCI?0=N<4ac#!hV#M%`i_Wr9<*j2=8YGn,A?/!^6F\afSV/lMGiZF>"-OF89I=8?XO]K%%<TJ)pKGeNYlb/^rRLmag79[dM:7hO_;hU10UVh3N%/iSi'HP%q_rW<d;hLT(.[#]6H+d[74U(K(-60@OO"88>XpVKonjSfVj,=J2H[-?KB/TR"%,DS.Oo`k_7oiY#+se'+<c\=mtG2of_VFo8?W+s%)G#(PBl'd'pSt1b6E+Ft2cipQn:2@B`9U@;MS/>qnl=a(EXNa*D"kJ`/O[M0TMj!#aAL?DPPF54?V$Q<M%+a^,-<j'g<$?%\+7k^%%IZ#BHVXQc0^WIA6kn:EG`d/C):N0=VhP3j0fjhi;@5_d\,OAfP$7O5WUgM&F]4Z;CtPLSk.<a%^f-(j#GailOq0?bB8AG=Os+n,%]JA$LY+McE:_n6FSjN5_aSA=F]a3#fH:+&h$OF(oo,?"J=GneR1LMoUfE..L$or8S!7'W1=)+Hp7Eb7#l1T9.`#L:D!hPh5?9)W7%U_F2LSlgPhWL*Sd`;@6Pdj>+(,+9Su,6)dUmQQ0QKU4d@hM@#OG1K&:4SbgIjAZ[SqS:97L>hVlkTO!#P2J#WAA(,F&))ORjjHb^%=PBc4>P`Qm%+(H!4t"(n=Ge*d2!9HP*JiphHhU3?kdic3q1'Z1+(ulX7-OupF<Q,8itgVq.U6pl5rt$>U]k;9)R&I4,:0fQCkb!>%G<t\cVmr:A,i_'(&X$UAoa\rqiHlin#i!8[.W-I1JZG$]0j7)sbkfGPWh"mE=B<#@f`OS;0Fe+b*hFE<?2jb)!nh?OY7]=V6ZdYf%]YtO*Asld.*2PW/$5qp:f!?(?KbVZ$]712Ec`V<!<oO$Dr#StA-Z\ql&UYlab[KOkjm&_#"](\arW(&sXB-?1T:rA5+o!%Ab2@&'%X@;;1+K]P34A1HV[\;D(#"rE9JZ\ohn,A(]63E)09rnc)3$>k)_/nh3%feZPiRrn6T+FjRc?C/)Y1#iI$u,G36KntJn*L[p4?q##%IT)87UoKuXX&QLYpBSb_MK@=;fN%a\.OBL531>l#hIZN;=/io]ZCq-2-<88&hL%47#*N-r(pn#HQu0W`c(q8r9*j40*sWqgb6Q,Q%nLkiYT2-MjOWng\*9'4a92i,'*H'e\K_Q.aYb\pJ5g2kL_2)raZ#XLR[\6@b%YH,>JsYm5>ce:I/IQpc[[teZ`.07I)d)p0(^:*m%T8"s`;F2j*B0Csq4M,bjaDpk1$#Db'QD&V[6p7.=7ZIc<4g&5d$o@W=8.;iL"@V3^b:O6f`[k2t<49_:[.HWnM9$57J&&?<H[m)`%Ic$6&jFufE$lo\OP%6%1nVQ!\!;A8d-$_@2VbaSCJA[Vg;S7KcWHK-&'l<D`CV>>,^fFp]of"#Se$W?m,&7c%H!dah)=dphl_*gn%&qd!tlPJR7!VF:$a?&l8#/pEf<R!5L-=Ds!Wuh704\XRJVi0_M.rZ7a9`d):_)jCF)q]j9\WpF)F9_R+H&s/8':hQ!SMtj/eOKNP%&DTD5#FXJnI:njt>C83HfT-;93]&G&M;aCg>,!GT;4la\5Qd<G-R<C;5%dj6eBsATNOqXi/49%W`Ek+kLN^9Bq`+<?@,UC^VBBj\%D+/E(-*KVn?,[:a5R$;7:,71>\JGec2(\n2UXoU6XkO^Zre%S.72@QV';O"R>I2E4%de@X75LTFV3c+`;\eS'Q;)3A\[2F;PK=lC%UCAZ?B)E+eo)t"tghhZS6UTb+6,O;ao8DBR<@gkdNR0[4+Bd$)W&Lt[Y%ma'WA6r*bX#*u%+/IGH#8g]Q;Ejjq65k^,YZ(nWf8'Y%;/4pMBOG"S65dlA`P>K<.`FQoTjs`A&Hdt8:T]J(JXbHFqOV,nHs6urb*u]pq#JUq#LPLCc,5fe/6%n)Na1hs![i$X*7HGeKA@BF%OKFKcF!Or'FlKY;RrpnR`DYj@5@iWB#_-,iT$%Qf=8$G:h)m!?m<_6Up![a._"9P,S4)GMa*eQg9lBm!a=DHUDptad41&0N/?kTI%,g=-aCMLpF%#BY7b?;/F'.NKk<lnh';)Ok<IL,/%XI5jJI,P9PT6kX+""$3adH#?P6oMOa3Kea]lY_!9'>-[4FDM%>b79n4A\^tZ%Tc'<V"!B,.!RICWRU'6WEr>2n-JQTnms9.Y0L$n(nF@=<2:qu6S',nGf4j3T`-81`MDj`e(/0CG#9YOQ)q?9ioKq>8E#,S<YC,2q%C2(RKjgtTHms=J\ie'0,pQ4nPh-@f1/.I<7OM#EIo#dT+.%+5Z!-h<bN-kY+E<i0M%XdD!QiQ=NNrI5bOdl^oE0!1rs5diA*+R$V%C_71:YUa%Gpk+7WKq+(s>R1PW#@a"96TU!2.M)t:IoP:+!4`sM^&h2Rr:Z'uAU_I7a2YFuj*=ZSgp&G+"(!AMh;eX/04c'(b?Yj.%0u360Pi&O8Bt+YF1G6^EC:Na3.5JhlR!t*B!MbQ+OF!<p)@>=%Pk1>nX-1P26BT`L04l_F7bbZ-f/:YC!o>k7fb&<$?b9gMJluh4%((Ut<XGhp=]cu@b*C4?L^3A-Z,V*&M,J_YN4Q,14^Yn';-c)Jr;*34&gdb$F(6I":mqf*9UBYd-h^^HOL/J[6fLJ1@3eA\1Ka<;[%W4>8`@JqsrR;Ea(Ycf-b]C5R3VM\M0&-,50Kr)^20+2'@>Y*^lhqg"kM-J'L*u=!2*-CDuJqAaRH0f8cU?hBkYuDL(jAP#mq6'rR%%]XKW>Y<H(TU%G>OLZ,C&_H"d-7o`"iRNC8oJ8=s0Z0a+J\)UV`^;2!lC1u46C&Cr0\><G;hr(J;a4c$nYi^,1iFfWF?N$s>/6eF%E<2K6&2;_qONG&dR3sSHQOS<AE\6]3-(gX*`BbZG4MG*ZF!U#]$Zdm0feR=NqABrRRd5MTETf,pq4Ub#)=c/7(,E9WLR&]7Q\MPR%bab6IVSqG/RY4hDpfk6YEK3F5/n.`<]VVICq=gTrLJjLmV8V2r_.W>8SrGdda`TQIXL>(lEABLIY/;h:b^j1qLDt\O9I4RY5*)Y\%iI+Otkt2qmMKEB-M8T&:ah!]r,\=P<gf,aBOCW@H'=i@F"=4Q1dE9=V'Y-r*()I#'iYL\I#`!QUrZ7a.%nbVIZ*mTL]_qHOQbWC/%qG2V;m@Rb"rqEnjJ,$q1QS8C.p"+-^q#0Nn]m]eWo]tsQs6JDm?[qq^`.[%IrViErIf995p](0_pM[hEri^hN$]quX(]X'f:OiDR%:]CNi!+SY~>%AI9_PrivateDataEnd