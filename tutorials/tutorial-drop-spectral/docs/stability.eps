%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: stability.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Giacomo
%%CreationDate: 03.04.20
%%BoundingBox: 0 0 502 389
%%HiResBoundingBox: 0 0 501.9780 388.7148
%%CropBox: 0 0 501.9780 388.7148
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 7876 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD8EFF52A8FD7EFFA8A8FD6DFFA8FD10FF7DA8FFFF7DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A87DFD0FFF7D7DFD7EFF7DA8FFFFA8FD17FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD1DFFA8FD2A%FFFD38A87DFD30FFA8FD16FFA8A8FD36FFA8A8FD1BFFA8FD2AFFA8FD37FF%A8FD30FFA8FD16FFA8A8FD1DFFCAC9C9C9A1CAA1CAA8FD10FFA8A8FD1BFF%A8FD2AFFA8FD17FFA8FFA8A8A1A19AA7A1FD05FFCAC9A0FD0FFFA8FD30FF%A8FD16FFA8A8FD11FFA87D527D527D52769AA1767D7D7D527D7DA8A8FFFF%FFA1C3FD0DFFA8A8FD1BFFA8FD2AFFA8FD0FFFA87D527D7DA9A9FFA7A1A8%AFAFFFAFFFA9AFA8847D7D52A8CAFFCACAFD0CFFA8FD30FFA8FD16FFA8A8%FD0BFFA9842F2F5385A9857EA1A1A87EAF8485848584A984A984A9845A2F%2F53AFC9C9FD0BFFA8A8FD1BFFA8FD2AFFA8FD0BFF5A5A5AAFFFFFA8CAC3%CACFFD11FFAF84535A7DFD0BFFA8FD30FFA8FD16FFA8A8FD07FFA9852E52%A1CAA1C9A1C9A8FD17FF7D515385A9FD08FFA8A8FD1BFFA8FD2AFFA8FD07%FF7EA876A1CACFCAFD1DFFA876A885A9FD07FFA8FD30FFA8FD16FFA8A8FD%05FF7EA17676FD22FF7C76A985A9FD06FFA8A8FD1BFFA8FD2AFFA8FD05FF%A8A1CF59FD23FFCA76A8FF61FD06FFA8FD30FFA8FD16FFA8A8FFFFFFA8A0%FF7E7DFD23FFA7FF52FF84A9FD05FFA8A8FD1BFFA8FD0AFF7DA8FFFFFFA8%A8FD19FFA8FD04FFCAA8FF52FD23FFCACAFF7DA8FF84FD05FFA8FD26FF7D%7D7DA8FFA87DFFFFFFA8FD16FFA8A8FFFFFFA1A8FF7DA8FD22FFCFA1FF7D%A8FF85FD05FFA8A8FD1BFFA8FD09FF7DFFA87DFFA87D7DFD19FFA8FD04FF%A8A8FF7DFD23FFCFCAFF7DA8FF84FD05FFA8FD26FF7DFF7DA8FFFFFF52A8%FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA8A8FFFFFFA2A1FF7D%A8FD23FFA1FF52CFA985FD05FFA8A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FD05FFA8FD0AFF7D7DFFFFA87E7DFD19FFA8FD05FFA0FF%7E7DFD23FFCAA87DFFA984FD05FFA8FD2AFFA8FFA8FFFFFFA8FD16FFA8A8%FD04FFA876FF52FD23FFC97D7DFF7EFD06FFA8A8FD1BFFA8FD2AFFA8FD06%FF84A1A176FD22FFA076FF5AFD07FFA8FD30FFA8FD16FFA8A8FD06FF8553%9A76C9CACFCAFD1CFFA851857EFD08FFA8A8FD1BFFA8FD2AFFA8FD08FFAF%852F27CACAFD04C9CFCFFD16FF7E4BA285FD09FFA8FD30FFA8FD16FFA8A8%FD09FF857E2F84A9FFA8FFA7C3C9CFFD10FFAFAF5A5A2FA1CAFD0AFFA8A8%FD1BFFA8FD2AFFA8FD0DFF7E59287E7EAFA97E76A8A8AF85AF8585A885A9%A984AF85A95A2F2E7EA9CACAFD0BFFA8FD30FFA8FD16FFA8A8FD0DFFCFA8%5252527D7EAFA8A1A1A8A8AFA9FFA8AFA8A87D7D527D7DFFFFCAA1FD0CFF%A8A8FD1BFFA8FD2AFFA8FD13FF7D7D527D7D7D6FA0A17D7D847D7D7DA8A8%FD04FFC9C3FD0DFFA8FD30FFA8FD16FFA8A8FD15FFA8FFA8A9A8CA9AA1A0%CACAFFFFFFCACAA0C9CAFD0EFFA8A8FD1BFFA8FD2AFFA8FD1EFFCFC9CAC3%CAA1CACACFFD10FFA8FD30FFA8FD16FFA8A8FD36FFA8A8FD1BFFA8FD2AFF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD30FF%A8FD17FFFD38A8FD1CFFA8FD93FFA8FD67FFA8FD047DA8FFA8FFA8FD0AFF%A8A8FD6AFFA87DFFA8A87DA8FF527DA8FD08FF7D7D7DA8FFA8FD0FFFA885%AEFD07FFA8FFFFFFA8FFA8FD30FFA8A1FD09FFA8A7A8FFFFA1A8CF83C97D%857D7DA7A87D7D7DA8FD0BFF7DFF7DA8FD11FF613685FD06FFA87D7DFFA8%7DA8A8A8FD2FFF4D4DA1FD07FFA89992A1FFA1686F575D7BC10D594B7652%7652277D52FD0AFF7DA87DA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF36%3D60FFA8FD04FF7DA87DA87DA87DFD05A8FFA8A8A8FFFD07A8FFA8A8A8FF%A8A8A8FFA8A8A8FFFD07A8FFA8A8A8FFA8A8FD04FFA87146A2FD04FFA8FF%FFCA9292A0FF76686957329F9E2F2E4B51524B527DFFA8A8FD09FFA87D7D%FD13FF84FD07FF7DA87DFF7DA87DA8A8FFA8FD1CFFA852FD09FFA8FD05FF%A8A2FD09FFCAA1FFFFFFA1CAA8A8C9A884A77DCAA8A87DA85252FD0BFFA8%FFFFFFA8FD19FF7DFFA8A97DFF7DA8A8FD1DFFA8A8FD26FF527D7D7D527D%FD5DFFA8FD19FFA87D7DA8A8FFA8A8FD13FFA8FD21FFA8FD1DFFA8A8FD08%FFA8FD18FFA87D7D7DFD05FFA8FD53FFA852FD09FFA8FD15FFA87D7DA8FD%1BFFA8FD21FFA8FD1DFFA87DFD08FFA8FD14FFA8527DA8FD09FFA8FD5EFF%A8FD11FFA87D7DFD20FFA8FD21FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8A8FFFFA8FFFFFFA8FFA8A8FD0FFFA8527D%A8FD0DFFA8FD54FF52FD09FFA8FD0DFF7D7D7DFD24FFA8FD21FFA8FD1DFF%A87DFD14FFA87D52A8FD12FFA8FD5EFFA8FD09FF7D7D7DFD28FFA8FD21FF%A8FD1DFFA8A8FD08FFA8FD07FFA87D52A8FD16FFA8FD2AFFA8A8FD28FF52%FD09FFA8FD05FF7D7DA8FD2CFFA8FD14FFA8A8A87DFD09FFA8FD1DFFA87D%FD08FFA8FFFFFFA87D52A8FD1AFFA8FD28FF527DA8FD07FF7DA8FD08FFCA%C8C9FD07FF99C2FD08FF305BFD0CFFA8A87D7DA8FD30FFA8FD14FF7D7D7D%A8FD05FF7DA87DFFA8FD05FFA9C89EC1A8FFFFFFA8FFA19292CAFFFFA8FF%FFFF5A0E07A9CAFFFFFFA8FFFFFFA8FFFF7D7DFD1FFFA8FD0AFF7DA8FFFF%FFA8A8FD18FF7D7DFD06FFA87DA8FD08FFC9C7C9FD07FF99C2FD07FFAF30%5BFFFF7DFD09FFA8FD2AFF7D7D7DA8FFA87DFFFFFFA8FD1EFFA8A8FFA8FD%1DFFA87DFD2AFFA8FD09FFA8A8A87DFFA87D7DFFFFA8FD4AFFA8FD1FFFA8%FD08FFA8A852A8A87DFFFFFF52A8FFA8FD21FFA8FD27FFA8FD21FFA8FD08%FFA8FF7D7DA8FFA87E7DFD43FF7DFD09FFA8FD2CFFA8FFA8FFA8FFFFFFA8%FD21FFA8FD1DFFA87DFD08FFA8FD21FFA8FD5EFFA8FD34FFA8FD21FFA8FD%05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFA8A8FD20FFA8FD54FF7DFD09FFA8FD34FFA8FD21FFA8FD1D%FFA87DFD2AFFA8FD54FFA8FD09FFA8FD34FFA8FD21FFA8FD27FFA8FD21FF%A8FD2CFFA8A8FFFF7DFFFFA8FD20FF7DFD09FFA8FD34FFA8FD17FFA87D7D%FFA87D7DFF7DFFA8FD1DFFA87DFD08FFA8FD21FFA8FD2AFFA87DFD08A8FD%20FFA8FD09FFA8FD34FFA8FD17FFA87D7DA87D7D7DFF52FFA8A8A8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8FD20FFA8FD54FFA8FD3EFFA8FD1FFFA87DA8FFA8A8A8FD19%FF7D7DA8FD29FFA8FD33FFA87DA8FFFF7DFD1AFFA8A8A8FD3DFFA8FD1DFF%A8A87DFF7DFFFF7D7DFD0FFF527DA8FD07FF7D7D7DFD29FFA8FD0FFFA8A8%FD22FFA87DA8A8A87DFD0FFF7DA852FFA8FD07FF7DFD3AFF7DA8FFFFA8FD%23FFA8FD10FF7D7DFF7D7DFD32FFA8FD0FFFA8A8FFFFA8A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FF%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8A8FD0CFFA87DFF7DA8FFFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FD0FFF7D7DFD7EFFA8FFFFFFA8FFA8FD23FFA8FD%23FFA8FD21FFA8FD12FF7DFFA87D7DFD1FFFA87EA87D7DFD1FFF7D7DA87D%7DFD1FFF7D7DA8FD10FF7D52A87DA8A87DFD1DFFA87D7D7DA8A87DFD1DFF%A8FF7D7DA8A87DFD1DFF7D7DA87DFD0FFFA87DA87D52FFA8A8FD1CFFA8A8%7D7D7DFFA8A8FD1CFFA8FFFFFF7DFFA8A8FD1DFFA87DFF52FD0EFF7DA87D%A8FD047DA8FD1BFF7DA87D7D527D7D7DA8FD1BFFFD05A87D7D7DA8FD1DFF%A87D7D7DFD11FF7DA8FFA8A8FD22FFA8A8FD1EFFA87DFD04A8FD1FFFA8A8%FDFCFFFDCCFFA8FD7DFFA8525252FD7CFF52FF7DA8FD7CFF7D7D7DFF7D52%FD7EFF7DFD80FFA8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2020-04-03T21:32:51+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqxzzXf6lY6n5&#xA;bNpdPFDeakLO7twsTJJG9vNLuWRnUq0IpxYd61xVOrrUrW1mihl9QyzhjGkcUkpIQqGJ9NW4gFxu&#xA;cVa/SVv/ACT/APSPP/zRirv0lb/yT/8ASPP/AM0Yq79JW/8AJP8A9I8//NGKu/SVv/JP/wBI8/8A&#xA;zRirv0lb/wAk/wD0jz/80Yq79JW/8k//AEjz/wDNGKu/SVv/ACT/APSPP/zRirv0lb/yT/8ASPP/&#xA;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&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>185.561111</stDim:w>
            <stDim:h>148.166667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>13.0d2e19</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.ttc</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -388.715 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 388.715 li
501.978 388.715 li
501.978 0 li
cp
clp
[1 0 0 1 0 0 ]ct
71.978 325.271 mo
495.978 325.271 li
495.978 12.2705 li
71.978 12.2705 li
71.978 325.271 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
.7 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
495.978 12.2705 mo
71.978 12.2705 li
495.978 90.5205 mo
71.978 90.5205 li
495.978 168.771 mo
71.978 168.771 li
495.978 247.021 mo
71.978 247.021 li
495.978 325.271 mo
71.978 325.271 li
495.978 325.271 mo
495.978 12.2705 li
354.645 325.271 mo
354.645 12.2705 li
213.311 325.271 mo
213.311 12.2705 li
71.978 325.271 mo
71.978 12.2705 li
.873 .873 .873 rgb
@
2 lc
495.978 12.2705 mo
495.978 16.5107 li
354.645 12.2705 mo
354.645 16.5107 li
213.311 12.2705 mo
213.311 16.5107 li
71.978 12.2705 mo
71.978 16.5107 li
495.978 325.271 mo
495.978 321.03 li
354.645 325.271 mo
354.645 321.03 li
213.311 325.271 mo
213.311 321.03 li
71.978 325.271 mo
71.978 321.03 li
71.978 12.2705 mo
495.978 12.2705 li
71.978 325.271 mo
495.978 325.271 li
.149 .149 .149 rgb
@
.301961 .301961 .309804 rgb
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 48 /zero putdup 50 /two putdup 52 /four putdup 54 /six putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/hyphen <1C60D8A8C9B81F2C7FA8F2666424EE62590A3687533A> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VHXJKB+Times-Roman /Times-Roman findfont ct_VMDictPut/VHXJKB+Times-Roman*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]VHXJKB+Times-Roman nfVHXJKB+Times-Roman*1 [25 0 0 -25 0 0 ]msf54.978 355.271 mo(-60)sh196.314 355.271 mo(-40)sh337.65 355.271 mo(-20)sh489.478 355.271 mo(0)sh276.089 383.948 mo
277.111 383.948 278.014 383.55 278.8 382.754 cv
279.586 381.956 280.191 380.979 280.613 379.823 cv
281.036 378.668 281.247 377.6 281.247 376.62 cv
281.247 375.818 281.025 375.186 280.583 374.722 cv
280.139 374.258 279.522 374.026 278.73 374.026 cv
277.647 374.026 276.725 374.392 275.964 375.12 cv
275.205 375.85 274.634 376.767 274.254 377.87 cv
273.874 378.975 273.683 380.037 273.683 381.058 cv
273.683 381.86 273.894 382.542 274.316 383.104 cv
274.738 383.667 275.33 383.948 276.089 383.948 cv
276.089 383.948 li
cp
276.058 384.683 mo
275.236 384.683 274.501 384.484 273.855 384.09 cv
273.209 383.693 272.711 383.157 272.363 382.479 cv
272.014 381.803 271.839 381.063 271.839 380.262 cv
271.839 379.386 272.035 378.472 272.425 377.519 cv
272.816 376.565 273.35 375.69 274.027 374.894 cv
274.705 374.097 275.473 373.464 276.333 372.995 cv
277.192 372.526 278.074 372.293 278.98 372.293 cv
286.027 372.293 li
286.214 372.293 286.378 372.357 286.519 372.487 cv
286.66 372.617 286.73 372.792 286.73 373.012 cv
286.73 373.282 286.631 373.519 286.433 373.722 cv
286.235 373.925 286 374.026 285.73 374.026 cv
282.308 374.026 li
282.85 374.828 283.122 375.803 283.122 376.948 cv
283.122 377.886 282.939 378.811 282.574 379.722 cv
282.209 380.634 281.702 381.465 281.05 382.215 cv
280.4 382.965 279.645 383.563 278.786 384.012 cv
277.926 384.459 277.017 384.683 276.058 384.683 cv
276.058 384.683 li
cp
.149 .149 .149 rgb
f
288.006 388.167 mo
288.006 388.094 288.011 388.042 288.022 388.011 cv
289.444 382.34 li
289.539 381.984 289.585 381.672 289.585 381.401 cv
289.585 380.86 289.398 380.59 289.022 380.59 cv
288.626 380.59 288.332 380.826 288.139 381.301 cv
287.947 381.773 287.762 382.37 287.585 383.09 cv
287.585 383.131 287.567 383.162 287.53 383.183 cv
287.494 383.204 287.459 383.215 287.428 383.215 cv
287.21 383.215 li
287.168 383.215 287.131 383.19 287.1 383.144 cv
287.069 383.097 287.053 383.058 287.053 383.026 cv
287.189 382.475 287.319 382.006 287.444 381.62 cv
287.569 381.235 287.767 380.886 288.039 380.573 cv
288.309 380.261 288.642 380.104 289.039 380.104 cv
289.475 380.104 289.861 380.229 290.194 380.479 cv
290.528 380.729 290.736 381.063 290.819 381.479 cv
291.142 381.063 291.509 380.729 291.92 380.479 cv
292.333 380.229 292.778 380.104 293.256 380.104 cv
293.663 380.104 294.02 380.222 294.328 380.456 cv
294.634 380.69 294.789 381.006 294.789 381.401 cv
294.789 381.725 294.687 382.006 294.483 382.245 cv
294.28 382.484 294.011 382.604 293.678 382.604 cv
293.48 382.604 293.311 382.542 293.17 382.418 cv
293.03 382.292 292.96 382.126 292.96 381.917 cv
292.96 381.636 293.062 381.386 293.264 381.167 cv
293.467 380.949 293.705 380.84 293.975 380.84 cv
293.767 380.673 293.517 380.59 293.225 380.59 cv
292.684 380.59 292.212 380.782 291.811 381.167 cv
291.411 381.553 291.048 382.042 290.725 382.636 cv
289.367 388.073 li
289.324 388.251 289.228 388.401 289.078 388.526 cv
288.926 388.651 288.756 388.715 288.569 388.715 cv
288.414 388.715 288.28 388.665 288.17 388.565 cv
288.061 388.467 288.006 388.334 288.006 388.167 cv
288.006 388.167 li
cp
f
495.978 12.2705 mo
491.738 12.2705 li
495.978 90.5205 mo
491.738 90.5205 li
495.978 168.771 mo
491.738 168.771 li
495.978 247.021 mo
491.738 247.021 li
495.978 325.271 mo
491.738 325.271 li
71.978 12.2705 mo
76.2183 12.2705 li
71.978 90.5205 mo
76.2183 90.5205 li
71.978 168.771 mo
76.2183 168.771 li
71.978 247.021 mo
76.2183 247.021 li
71.978 325.271 mo
76.2183 325.271 li
495.978 325.271 mo
495.978 12.2705 li
71.978 325.271 mo
71.978 12.2705 li
@
.301961 .301961 .309804 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginVHXJKB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendVHXJKB+Times-Roman /Encoding getdup 46 /period putdup 49 /one putdup 53 /five putpop%ADOEndSubsetFont
/VHXJKB+Times-Roman*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six 201{/.notdef}rp]VHXJKB+Times-Roman nfVHXJKB+Times-Roman*1 [25 0 0 -25 0 0 ]msf43.978 333.771 mo(-1)[8.3252 0 ]xsh24.978 255.521 mo(-0.5)sh51.978 177.278 mo(0)sh32.978 99.0205 mo(0.5)sh51.978 20.7705 mo(1)sh11.6563 175.365 mo
11.6563 174.344 11.2578 173.44 10.4609 172.654 cv
9.66357 171.868 8.68701 171.263 7.53125 170.841 cv
6.375 170.419 5.30713 170.208 4.32813 170.208 cv
3.52588 170.208 2.89307 170.43 2.4292 170.874 cv
1.96582 171.316 1.73389 171.933 1.73389 172.725 cv
1.73389 173.808 2.09863 174.729 2.82813 175.49 cv
3.55713 176.25 4.47412 176.821 5.57813 177.201 cv
6.68213 177.582 7.74414 177.771 8.76514 177.771 cv
9.56787 177.771 10.25 177.561 10.812 177.138 cv
11.3745 176.716 11.6563 176.125 11.6563 175.365 cv
11.6563 175.365 li
cp
12.3901 175.396 mo
12.3901 176.219 12.1924 176.953 11.7969 177.6 cv
11.4009 178.245 10.8643 178.743 10.187 179.091 cv
9.51025 179.44 8.771 179.615 7.96924 179.615 cv
7.09375 179.615 6.1792 179.42 5.22607 179.029 cv
4.27344 178.639 3.39844 178.104 2.60107 177.427 cv
1.8042 176.75 1.17188 175.983 .703125 175.124 cv
.234375 174.263 0 173.38 0 172.475 cv
0 165.427 li
0 165.24 .0649414 165.076 .194824 164.936 cv
.325195 164.795 .499512 164.725 .719238 164.725 cv
.989746 164.725 1.22656 164.823 1.4292 165.021 cv
1.63232 165.219 1.73389 165.454 1.73389 165.725 cv
1.73389 169.146 li
2.53613 168.604 3.51025 168.333 4.65576 168.333 cv
5.59326 168.333 6.51758 168.516 7.4292 168.88 cv
8.34082 169.245 9.17188 169.753 9.92188 170.404 cv
10.6719 171.055 11.271 171.81 11.7192 172.669 cv
12.1665 173.529 12.3901 174.438 12.3901 175.396 cv
12.3901 175.396 li
cp
.149 .149 .149 rgb
f
4.68701 161.292 mo
4.42725 161.292 4.1875 161.18 3.96826 160.957 cv
3.74951 160.732 3.64014 160.49 3.64014 160.229 cv
3.64014 160.011 3.70752 159.831 3.84326 159.69 cv
3.979 159.55 4.14551 159.479 4.34326 159.479 cv
4.62451 159.479 4.87207 159.591 5.08594 159.815 cv
5.29932 160.04 5.40576 160.292 5.40576 160.573 cv
5.40576 160.771 5.33838 160.94 5.20313 161.082 cv
5.06787 161.221 4.89551 161.292 4.68701 161.292 cv
4.68701 161.292 li
cp
14.8433 163.433 mo
14.6035 163.433 14.3535 163.38 14.0933 163.276 cv
10 161.745 li
9.5415 161.579 9.16113 161.495 8.85889 161.495 cv
8.48438 161.495 8.29688 161.636 8.29688 161.917 cv
8.29688 162.417 8.55469 162.828 9.06982 163.151 cv
9.58545 163.474 10.1611 163.714 10.7969 163.87 cv
10.8804 163.891 10.9219 163.943 10.9219 164.026 cv
10.9219 164.245 li
10.9219 164.35 10.8647 164.401 10.75 164.401 cv
10.687 164.401 li
9.93701 164.203 9.27051 163.894 8.68701 163.471 cv
8.10352 163.049 7.81201 162.516 7.81201 161.87 cv
7.81201 161.422 7.96045 161.042 8.25781 160.729 cv
8.55469 160.417 8.93213 160.26 9.39014 160.26 cv
9.61914 160.26 9.86426 160.313 10.125 160.417 cv
14.2031 161.963 li
14.6299 162.13 15.0098 162.213 15.3433 162.213 cv
15.729 162.213 15.9219 162.068 15.9219 161.776 cv
15.9219 161.286 15.6563 160.875 15.125 160.542 cv
14.5938 160.208 14.0205 159.974 13.4058 159.838 cv
13.3335 159.818 13.2969 159.771 13.2969 159.698 cv
13.2969 159.463 li
13.2969 159.411 13.3149 159.37 13.3511 159.338 cv
13.3877 159.307 13.4268 159.292 13.4683 159.292 cv
13.4785 159.292 13.4941 159.297 13.5151 159.308 cv
14.2339 159.485 14.8979 159.79 15.5078 160.221 cv
16.1172 160.654 16.4219 161.188 16.4219 161.823 cv
16.4219 162.261 16.2686 162.638 15.9609 162.957 cv
15.6538 163.273 15.2808 163.433 14.8433 163.433 cv
14.8433 163.433 li
cp
f
500.141 168.771 mo
500.141 166.34 498.171 164.371 495.741 164.371 cv
493.311 164.371 491.341 166.34 491.341 168.771 cv
491.341 171.201 493.311 173.17 495.741 173.17 cv
498.171 173.17 500.141 171.201 500.141 168.771 cv
0 .447059 .741176 rgb
f
2 lw
0 lc
0 lj
500.141 168.771 mo
500.141 166.34 498.171 164.371 495.741 164.371 cv
493.311 164.371 491.341 166.34 491.341 168.771 cv
491.341 171.201 493.311 173.17 495.741 173.17 cv
498.171 173.17 500.141 171.201 500.141 168.771 cv
@
499.454 168.771 mo
499.454 166.34 497.484 164.371 495.054 164.371 cv
492.625 164.371 490.654 166.34 490.654 168.771 cv
490.654 171.201 492.625 173.17 495.054 173.17 cv
497.484 173.17 499.454 171.201 499.454 168.771 cv
.85098 .32549 .0980392 rgb
f
499.454 168.771 mo
499.454 166.34 497.484 164.371 495.054 164.371 cv
492.625 164.371 490.654 166.34 490.654 168.771 cv
490.654 171.201 492.625 173.17 495.054 173.17 cv
497.484 173.17 499.454 171.201 499.454 168.771 cv
@
498.804 168.771 mo
498.804 166.34 496.834 164.371 494.404 164.371 cv
491.974 164.371 490.004 166.34 490.004 168.771 cv
490.004 171.201 491.974 173.17 494.404 173.17 cv
496.834 173.17 498.804 171.201 498.804 168.771 cv
.929412 .694118 .12549 rgb
f
498.804 168.771 mo
498.804 166.34 496.834 164.371 494.404 164.371 cv
491.974 164.371 490.004 166.34 490.004 168.771 cv
490.004 171.201 491.974 173.17 494.404 173.17 cv
496.834 173.17 498.804 171.201 498.804 168.771 cv
@
498.184 168.771 mo
498.184 166.34 496.214 164.371 493.784 164.371 cv
491.354 164.371 489.384 166.34 489.384 168.771 cv
489.384 171.201 491.354 173.17 493.784 173.17 cv
496.214 173.17 498.184 171.201 498.184 168.771 cv
.494118 .184314 .556863 rgb
f
498.184 168.771 mo
498.184 166.34 496.214 164.371 493.784 164.371 cv
491.354 164.371 489.384 166.34 489.384 168.771 cv
489.384 171.201 491.354 173.17 493.784 173.17 cv
496.214 173.17 498.184 171.201 498.184 168.771 cv
@
497.595 168.771 mo
497.595 166.34 495.625 164.371 493.196 164.371 cv
490.765 164.371 488.795 166.34 488.795 168.771 cv
488.795 171.201 490.765 173.17 493.196 173.17 cv
495.625 173.17 497.595 171.201 497.595 168.771 cv
.466667 .67451 .188235 rgb
f
497.595 168.771 mo
497.595 166.34 495.625 164.371 493.196 164.371 cv
490.765 164.371 488.795 166.34 488.795 168.771 cv
488.795 171.201 490.765 173.17 493.196 173.17 cv
495.625 173.17 497.595 171.201 497.595 168.771 cv
@
497.03 168.771 mo
497.03 166.34 495.059 164.371 492.629 164.371 cv
490.2 164.371 488.229 166.34 488.229 168.771 cv
488.229 171.201 490.2 173.17 492.629 173.17 cv
495.059 173.17 497.03 171.201 497.03 168.771 cv
.301961 .745098 .933333 rgb
f
497.03 168.771 mo
497.03 166.34 495.059 164.371 492.629 164.371 cv
490.2 164.371 488.229 166.34 488.229 168.771 cv
488.229 171.201 490.2 173.17 492.629 173.17 cv
495.059 173.17 497.03 171.201 497.03 168.771 cv
@
496.479 168.771 mo
496.479 166.34 494.509 164.371 492.079 164.371 cv
489.649 164.371 487.679 166.34 487.679 168.771 cv
487.679 171.201 489.649 173.17 492.079 173.17 cv
494.509 173.17 496.479 171.201 496.479 168.771 cv
.635294 .0784314 .184314 rgb
f
496.479 168.771 mo
496.479 166.34 494.509 164.371 492.079 164.371 cv
489.649 164.371 487.679 166.34 487.679 168.771 cv
487.679 171.201 489.649 173.17 492.079 173.17 cv
494.509 173.17 496.479 171.201 496.479 168.771 cv
@
495.938 168.771 mo
495.938 166.34 493.968 164.371 491.539 164.371 cv
489.108 164.371 487.138 166.34 487.138 168.771 cv
487.138 171.201 489.108 173.17 491.539 173.17 cv
493.968 173.17 495.938 171.201 495.938 168.771 cv
0 .447059 .741176 rgb
f
495.938 168.771 mo
495.938 166.34 493.968 164.371 491.539 164.371 cv
489.108 164.371 487.138 166.34 487.138 168.771 cv
487.138 171.201 489.108 173.17 491.539 173.17 cv
493.968 173.17 495.938 171.201 495.938 168.771 cv
@
495.405 168.771 mo
495.405 166.34 493.435 164.371 491.004 164.371 cv
488.575 164.371 486.605 166.34 486.605 168.771 cv
486.605 171.201 488.575 173.17 491.004 173.17 cv
493.435 173.17 495.405 171.201 495.405 168.771 cv
.85098 .32549 .0980392 rgb
f
495.405 168.771 mo
495.405 166.34 493.435 164.371 491.004 164.371 cv
488.575 164.371 486.605 166.34 486.605 168.771 cv
486.605 171.201 488.575 173.17 491.004 173.17 cv
493.435 173.17 495.405 171.201 495.405 168.771 cv
@
494.875 168.771 mo
494.875 166.34 492.906 164.371 490.476 164.371 cv
488.045 164.371 486.076 166.34 486.076 168.771 cv
486.076 171.201 488.045 173.17 490.476 173.17 cv
492.906 173.17 494.875 171.201 494.875 168.771 cv
.929412 .694118 .12549 rgb
f
494.875 168.771 mo
494.875 166.34 492.906 164.371 490.476 164.371 cv
488.045 164.371 486.076 166.34 486.076 168.771 cv
486.076 171.201 488.045 173.17 490.476 173.17 cv
492.906 173.17 494.875 171.201 494.875 168.771 cv
@
494.35 168.771 mo
494.35 166.34 492.379 164.371 489.95 164.371 cv
487.52 164.371 485.55 166.34 485.55 168.771 cv
485.55 171.201 487.52 173.17 489.95 173.17 cv
492.379 173.17 494.35 171.201 494.35 168.771 cv
.494118 .184314 .556863 rgb
f
494.35 168.771 mo
494.35 166.34 492.379 164.371 489.95 164.371 cv
487.52 164.371 485.55 166.34 485.55 168.771 cv
485.55 171.201 487.52 173.17 489.95 173.17 cv
492.379 173.17 494.35 171.201 494.35 168.771 cv
@
493.827 168.771 mo
493.827 166.34 491.856 164.371 489.426 164.371 cv
486.997 164.371 485.027 166.34 485.027 168.771 cv
485.027 171.201 486.997 173.17 489.426 173.17 cv
491.856 173.17 493.827 171.201 493.827 168.771 cv
.466667 .67451 .188235 rgb
f
493.827 168.771 mo
493.827 166.34 491.856 164.371 489.426 164.371 cv
486.997 164.371 485.027 166.34 485.027 168.771 cv
485.027 171.201 486.997 173.17 489.426 173.17 cv
491.856 173.17 493.827 171.201 493.827 168.771 cv
@
493.304 168.771 mo
493.304 166.34 491.334 164.371 488.905 164.371 cv
486.474 164.371 484.504 166.34 484.504 168.771 cv
484.504 171.201 486.474 173.17 488.905 173.17 cv
491.334 173.17 493.304 171.201 493.304 168.771 cv
.301961 .745098 .933333 rgb
f
493.304 168.771 mo
493.304 166.34 491.334 164.371 488.905 164.371 cv
486.474 164.371 484.504 166.34 484.504 168.771 cv
484.504 171.201 486.474 173.17 488.905 173.17 cv
491.334 173.17 493.304 171.201 493.304 168.771 cv
@
492.784 168.771 mo
492.784 166.34 490.814 164.371 488.383 164.371 cv
485.954 164.371 483.984 166.34 483.984 168.771 cv
483.984 171.201 485.954 173.17 488.383 173.17 cv
490.814 173.17 492.784 171.201 492.784 168.771 cv
.635294 .0784314 .184314 rgb
f
492.784 168.771 mo
492.784 166.34 490.814 164.371 488.383 164.371 cv
485.954 164.371 483.984 166.34 483.984 168.771 cv
483.984 171.201 485.954 173.17 488.383 173.17 cv
490.814 173.17 492.784 171.201 492.784 168.771 cv
@
492.263 168.771 mo
492.263 166.34 490.293 164.371 487.863 164.371 cv
485.433 164.371 483.463 166.34 483.463 168.771 cv
483.463 171.201 485.433 173.17 487.863 173.17 cv
490.293 173.17 492.263 171.201 492.263 168.771 cv
0 .447059 .741176 rgb
f
492.263 168.771 mo
492.263 166.34 490.293 164.371 487.863 164.371 cv
485.433 164.371 483.463 166.34 483.463 168.771 cv
483.463 171.201 485.433 173.17 487.863 173.17 cv
490.293 173.17 492.263 171.201 492.263 168.771 cv
@
491.743 168.771 mo
491.743 166.34 489.773 164.371 487.343 164.371 cv
484.913 164.371 482.943 166.34 482.943 168.771 cv
482.943 171.201 484.913 173.17 487.343 173.17 cv
489.773 173.17 491.743 171.201 491.743 168.771 cv
.85098 .32549 .0980392 rgb
f
491.743 168.771 mo
491.743 166.34 489.773 164.371 487.343 164.371 cv
484.913 164.371 482.943 166.34 482.943 168.771 cv
482.943 171.201 484.913 173.17 487.343 173.17 cv
489.773 173.17 491.743 171.201 491.743 168.771 cv
@
491.222 168.771 mo
491.222 166.34 489.252 164.371 486.823 164.371 cv
484.392 164.371 482.422 166.34 482.422 168.771 cv
482.422 171.201 484.392 173.17 486.823 173.17 cv
489.252 173.17 491.222 171.201 491.222 168.771 cv
.929412 .694118 .12549 rgb
f
491.222 168.771 mo
491.222 166.34 489.252 164.371 486.823 164.371 cv
484.392 164.371 482.422 166.34 482.422 168.771 cv
482.422 171.201 484.392 173.17 486.823 173.17 cv
489.252 173.17 491.222 171.201 491.222 168.771 cv
@
490.702 168.771 mo
490.702 166.34 488.731 164.371 486.301 164.371 cv
483.872 164.371 481.901 166.34 481.901 168.771 cv
481.901 171.201 483.872 173.17 486.301 173.17 cv
488.731 173.17 490.702 171.201 490.702 168.771 cv
.494118 .184314 .556863 rgb
f
490.702 168.771 mo
490.702 166.34 488.731 164.371 486.301 164.371 cv
483.872 164.371 481.901 166.34 481.901 168.771 cv
481.901 171.201 483.872 173.17 486.301 173.17 cv
488.731 173.17 490.702 171.201 490.702 168.771 cv
@
490.179 168.771 mo
490.179 166.34 488.209 164.371 485.779 164.371 cv
483.349 164.371 481.379 166.34 481.379 168.771 cv
481.379 171.201 483.349 173.17 485.779 173.17 cv
488.209 173.17 490.179 171.201 490.179 168.771 cv
.466667 .67451 .188235 rgb
f
490.179 168.771 mo
490.179 166.34 488.209 164.371 485.779 164.371 cv
483.349 164.371 481.379 166.34 481.379 168.771 cv
481.379 171.201 483.349 173.17 485.779 173.17 cv
488.209 173.17 490.179 171.201 490.179 168.771 cv
@
489.656 168.771 mo
489.656 166.34 487.686 164.371 485.256 164.371 cv
482.826 164.371 480.856 166.34 480.856 168.771 cv
480.856 171.201 482.826 173.17 485.256 173.17 cv
487.686 173.17 489.656 171.201 489.656 168.771 cv
.301961 .745098 .933333 rgb
f
489.656 168.771 mo
489.656 166.34 487.686 164.371 485.256 164.371 cv
482.826 164.371 480.856 166.34 480.856 168.771 cv
480.856 171.201 482.826 173.17 485.256 173.17 cv
487.686 173.17 489.656 171.201 489.656 168.771 cv
@
489.131 168.771 mo
489.131 166.34 487.162 164.371 484.731 164.371 cv
482.301 164.371 480.332 166.34 480.332 168.771 cv
480.332 171.201 482.301 173.17 484.731 173.17 cv
487.162 173.17 489.131 171.201 489.131 168.771 cv
.635294 .0784314 .184314 rgb
f
489.131 168.771 mo
489.131 166.34 487.162 164.371 484.731 164.371 cv
482.301 164.371 480.332 166.34 480.332 168.771 cv
480.332 171.201 482.301 173.17 484.731 173.17 cv
487.162 173.17 489.131 171.201 489.131 168.771 cv
@
488.605 168.771 mo
488.605 166.34 486.635 164.371 484.206 164.371 cv
481.776 164.371 479.805 166.34 479.805 168.771 cv
479.805 171.201 481.776 173.17 484.206 173.17 cv
486.635 173.17 488.605 171.201 488.605 168.771 cv
0 .447059 .741176 rgb
f
488.605 168.771 mo
488.605 166.34 486.635 164.371 484.206 164.371 cv
481.776 164.371 479.805 166.34 479.805 168.771 cv
479.805 171.201 481.776 173.17 484.206 173.17 cv
486.635 173.17 488.605 171.201 488.605 168.771 cv
@
488.076 168.771 mo
488.076 166.34 486.105 164.371 483.675 164.371 cv
481.246 164.371 479.275 166.34 479.275 168.771 cv
479.275 171.201 481.246 173.17 483.675 173.17 cv
486.105 173.17 488.076 171.201 488.076 168.771 cv
.85098 .32549 .0980392 rgb
f
488.076 168.771 mo
488.076 166.34 486.105 164.371 483.675 164.371 cv
481.246 164.371 479.275 166.34 479.275 168.771 cv
479.275 171.201 481.246 173.17 483.675 173.17 cv
486.105 173.17 488.076 171.201 488.076 168.771 cv
@
487.557 168.771 mo
487.557 166.34 485.587 164.371 483.157 164.371 cv
480.727 164.371 478.757 166.34 478.757 168.771 cv
478.757 171.201 480.727 173.17 483.157 173.17 cv
485.587 173.17 487.557 171.201 487.557 168.771 cv
.929412 .694118 .12549 rgb
f
487.557 168.771 mo
487.557 166.34 485.587 164.371 483.157 164.371 cv
480.727 164.371 478.757 166.34 478.757 168.771 cv
478.757 171.201 480.727 173.17 483.157 173.17 cv
485.587 173.17 487.557 171.201 487.557 168.771 cv
@
486.996 168.771 mo
486.996 166.34 485.026 164.371 482.595 164.371 cv
480.166 164.371 478.196 166.34 478.196 168.771 cv
478.196 171.201 480.166 173.17 482.595 173.17 cv
485.026 173.17 486.996 171.201 486.996 168.771 cv
.494118 .184314 .556863 rgb
f
486.996 168.771 mo
486.996 166.34 485.026 164.371 482.595 164.371 cv
480.166 164.371 478.196 166.34 478.196 168.771 cv
478.196 171.201 480.166 173.17 482.595 173.17 cv
485.026 173.17 486.996 171.201 486.996 168.771 cv
@
486.638 168.771 mo
486.638 166.34 484.668 164.371 482.239 164.371 cv
479.808 164.371 477.838 166.34 477.838 168.771 cv
477.838 171.201 479.808 173.17 482.239 173.17 cv
484.668 173.17 486.638 171.201 486.638 168.771 cv
.466667 .67451 .188235 rgb
f
486.638 168.771 mo
486.638 166.34 484.668 164.371 482.239 164.371 cv
479.808 164.371 477.838 166.34 477.838 168.771 cv
477.838 171.201 479.808 173.17 482.239 173.17 cv
484.668 173.17 486.638 171.201 486.638 168.771 cv
@
485.899 168.771 mo
485.899 166.34 483.929 164.371 481.5 164.371 cv
479.069 164.371 477.099 166.34 477.099 168.771 cv
477.099 171.201 479.069 173.17 481.5 173.17 cv
483.929 173.17 485.899 171.201 485.899 168.771 cv
.301961 .745098 .933333 rgb
f
485.899 168.771 mo
485.899 166.34 483.929 164.371 481.5 164.371 cv
479.069 164.371 477.099 166.34 477.099 168.771 cv
477.099 171.201 479.069 173.17 481.5 173.17 cv
483.929 173.17 485.899 171.201 485.899 168.771 cv
@
485.828 168.771 mo
485.828 166.34 483.857 164.371 481.427 164.371 cv
478.998 164.371 477.028 166.34 477.028 168.771 cv
477.028 171.201 478.998 173.17 481.427 173.17 cv
483.857 173.17 485.828 171.201 485.828 168.771 cv
.635294 .0784314 .184314 rgb
f
485.828 168.771 mo
485.828 166.34 483.857 164.371 481.427 164.371 cv
478.998 164.371 477.028 166.34 477.028 168.771 cv
477.028 171.201 478.998 173.17 481.427 173.17 cv
483.857 173.17 485.828 171.201 485.828 168.771 cv
@
484.691 168.771 mo
484.691 166.34 482.721 164.371 480.291 164.371 cv
477.861 164.371 475.891 166.34 475.891 168.771 cv
475.891 171.201 477.861 173.17 480.291 173.17 cv
482.721 173.17 484.691 171.201 484.691 168.771 cv
0 .447059 .741176 rgb
f
484.691 168.771 mo
484.691 166.34 482.721 164.371 480.291 164.371 cv
477.861 164.371 475.891 166.34 475.891 168.771 cv
475.891 171.201 477.861 173.17 480.291 173.17 cv
482.721 173.17 484.691 171.201 484.691 168.771 cv
@
484.455 168.771 mo
484.455 166.34 482.484 164.371 480.054 164.371 cv
477.625 164.371 475.655 166.34 475.655 168.771 cv
475.655 171.201 477.625 173.17 480.054 173.17 cv
482.484 173.17 484.455 171.201 484.455 168.771 cv
.85098 .32549 .0980392 rgb
f
484.455 168.771 mo
484.455 166.34 482.484 164.371 480.054 164.371 cv
477.625 164.371 475.655 166.34 475.655 168.771 cv
475.655 171.201 477.625 173.17 480.054 173.17 cv
482.484 173.17 484.455 171.201 484.455 168.771 cv
@
483.074 168.771 mo
483.074 166.34 481.104 164.371 478.673 164.371 cv
476.244 164.371 474.274 166.34 474.274 168.771 cv
474.274 171.201 476.244 173.17 478.673 173.17 cv
481.104 173.17 483.074 171.201 483.074 168.771 cv
.929412 .694118 .12549 rgb
f
483.074 168.771 mo
483.074 166.34 481.104 164.371 478.673 164.371 cv
476.244 164.371 474.274 166.34 474.274 168.771 cv
474.274 171.201 476.244 173.17 478.673 173.17 cv
481.104 173.17 483.074 171.201 483.074 168.771 cv
@
482.771 168.771 mo
482.771 166.34 480.801 164.371 478.372 164.371 cv
475.941 164.371 473.971 166.34 473.971 168.771 cv
473.971 171.201 475.941 173.17 478.372 173.17 cv
480.801 173.17 482.771 171.201 482.771 168.771 cv
.494118 .184314 .556863 rgb
f
482.771 168.771 mo
482.771 166.34 480.801 164.371 478.372 164.371 cv
475.941 164.371 473.971 166.34 473.971 168.771 cv
473.971 171.201 475.941 173.17 478.372 173.17 cv
480.801 173.17 482.771 171.201 482.771 168.771 cv
@
480.996 168.771 mo
480.996 166.34 479.026 164.371 476.596 164.371 cv
474.166 164.371 472.196 166.34 472.196 168.771 cv
472.196 171.201 474.166 173.17 476.596 173.17 cv
479.026 173.17 480.996 171.201 480.996 168.771 cv
.466667 .67451 .188235 rgb
f
480.996 168.771 mo
480.996 166.34 479.026 164.371 476.596 164.371 cv
474.166 164.371 472.196 166.34 472.196 168.771 cv
472.196 171.201 474.166 173.17 476.596 173.17 cv
479.026 173.17 480.996 171.201 480.996 168.771 cv
@
480.639 168.771 mo
480.639 166.34 478.669 164.371 476.239 164.371 cv
473.809 164.371 471.839 166.34 471.839 168.771 cv
471.839 171.201 473.809 173.17 476.239 173.17 cv
478.669 173.17 480.639 171.201 480.639 168.771 cv
.301961 .745098 .933333 rgb
f
480.639 168.771 mo
480.639 166.34 478.669 164.371 476.239 164.371 cv
473.809 164.371 471.839 166.34 471.839 168.771 cv
471.839 171.201 473.809 173.17 476.239 173.17 cv
478.669 173.17 480.639 171.201 480.639 168.771 cv
@
478.15 168.771 mo
478.15 166.34 476.18 164.371 473.75 164.371 cv
471.32 164.371 469.35 166.34 469.35 168.771 cv
469.35 171.201 471.32 173.17 473.75 173.17 cv
476.18 173.17 478.15 171.201 478.15 168.771 cv
.635294 .0784314 .184314 rgb
f
478.15 168.771 mo
478.15 166.34 476.18 164.371 473.75 164.371 cv
471.32 164.371 469.35 166.34 469.35 168.771 cv
469.35 171.201 471.32 173.17 473.75 173.17 cv
476.18 173.17 478.15 171.201 478.15 168.771 cv
@
477.772 168.771 mo
477.772 166.34 475.802 164.371 473.372 164.371 cv
470.942 164.371 468.972 166.34 468.972 168.771 cv
468.972 171.201 470.942 173.17 473.372 173.17 cv
475.802 173.17 477.772 171.201 477.772 168.771 cv
0 .447059 .741176 rgb
f
477.772 168.771 mo
477.772 166.34 475.802 164.371 473.372 164.371 cv
470.942 164.371 468.972 166.34 468.972 168.771 cv
468.972 171.201 470.942 173.17 473.372 173.17 cv
475.802 173.17 477.772 171.201 477.772 168.771 cv
@
474.095 168.771 mo
474.095 166.34 472.125 164.371 469.695 164.371 cv
467.265 164.371 465.294 166.34 465.294 168.771 cv
465.294 171.201 467.265 173.17 469.695 173.17 cv
472.125 173.17 474.095 171.201 474.095 168.771 cv
.85098 .32549 .0980392 rgb
f
474.095 168.771 mo
474.095 166.34 472.125 164.371 469.695 164.371 cv
467.265 164.371 465.294 166.34 465.294 168.771 cv
465.294 171.201 467.265 173.17 469.695 173.17 cv
472.125 173.17 474.095 171.201 474.095 168.771 cv
@
473.724 168.771 mo
473.724 166.34 471.753 164.371 469.324 164.371 cv
466.894 164.371 464.923 166.34 464.923 168.771 cv
464.923 171.201 466.894 173.17 469.324 173.17 cv
471.753 173.17 473.724 171.201 473.724 168.771 cv
.929412 .694118 .12549 rgb
f
473.724 168.771 mo
473.724 166.34 471.753 164.371 469.324 164.371 cv
466.894 164.371 464.923 166.34 464.923 168.771 cv
464.923 171.201 466.894 173.17 469.324 173.17 cv
471.753 173.17 473.724 171.201 473.724 168.771 cv
@
468.089 168.771 mo
468.089 166.34 466.119 164.371 463.689 164.371 cv
461.259 164.371 459.289 166.34 459.289 168.771 cv
459.289 171.201 461.259 173.17 463.689 173.17 cv
466.119 173.17 468.089 171.201 468.089 168.771 cv
.494118 .184314 .556863 rgb
f
468.089 168.771 mo
468.089 166.34 466.119 164.371 463.689 164.371 cv
461.259 164.371 459.289 166.34 459.289 168.771 cv
459.289 171.201 461.259 173.17 463.689 173.17 cv
466.119 173.17 468.089 171.201 468.089 168.771 cv
@
467.748 168.771 mo
467.748 166.34 465.778 164.371 463.348 164.371 cv
460.917 164.371 458.948 166.34 458.948 168.771 cv
458.948 171.201 460.917 173.17 463.348 173.17 cv
465.778 173.17 467.748 171.201 467.748 168.771 cv
.466667 .67451 .188235 rgb
f
467.748 168.771 mo
467.748 166.34 465.778 164.371 463.348 164.371 cv
460.917 164.371 458.948 166.34 458.948 168.771 cv
458.948 171.201 460.917 173.17 463.348 173.17 cv
465.778 173.17 467.748 171.201 467.748 168.771 cv
@
458.486 168.771 mo
458.486 166.34 456.516 164.371 454.086 164.371 cv
451.656 164.371 449.686 166.34 449.686 168.771 cv
449.686 171.201 451.656 173.17 454.086 173.17 cv
456.516 173.17 458.486 171.201 458.486 168.771 cv
.301961 .745098 .933333 rgb
f
458.486 168.771 mo
458.486 166.34 456.516 164.371 454.086 164.371 cv
451.656 164.371 449.686 166.34 449.686 168.771 cv
449.686 171.201 451.656 173.17 454.086 173.17 cv
456.516 173.17 458.486 171.201 458.486 168.771 cv
@
458.178 168.771 mo
458.178 166.34 456.208 164.371 453.779 164.371 cv
451.349 164.371 449.378 166.34 449.378 168.771 cv
449.378 171.201 451.349 173.17 453.779 173.17 cv
456.208 173.17 458.178 171.201 458.178 168.771 cv
.635294 .0784314 .184314 rgb
f
458.178 168.771 mo
458.178 166.34 456.208 164.371 453.779 164.371 cv
451.349 164.371 449.378 166.34 449.378 168.771 cv
449.378 171.201 451.349 173.17 453.779 173.17 cv
456.208 173.17 458.178 171.201 458.178 168.771 cv
@
440.799 168.771 mo
440.799 166.34 438.83 164.371 436.399 164.371 cv
433.969 164.371 432 166.34 432 168.771 cv
432 171.201 433.969 173.17 436.399 173.17 cv
438.83 173.17 440.799 171.201 440.799 168.771 cv
0 .447059 .741176 rgb
f
440.799 168.771 mo
440.799 166.34 438.83 164.371 436.399 164.371 cv
433.969 164.371 432 166.34 432 168.771 cv
432 171.201 433.969 173.17 436.399 173.17 cv
438.83 173.17 440.799 171.201 440.799 168.771 cv
@
440.545 168.771 mo
440.545 166.34 438.575 164.371 436.145 164.371 cv
433.715 164.371 431.745 166.34 431.745 168.771 cv
431.745 171.201 433.715 173.17 436.145 173.17 cv
438.575 173.17 440.545 171.201 440.545 168.771 cv
.85098 .32549 .0980392 rgb
f
440.545 168.771 mo
440.545 166.34 438.575 164.371 436.145 164.371 cv
433.715 164.371 431.745 166.34 431.745 168.771 cv
431.745 171.201 433.715 173.17 436.145 173.17 cv
438.575 173.17 440.545 171.201 440.545 168.771 cv
@
397.542 168.771 mo
397.542 166.34 395.573 164.371 393.142 164.371 cv
390.712 164.371 388.743 166.34 388.743 168.771 cv
388.743 171.201 390.712 173.17 393.142 173.17 cv
395.573 173.17 397.542 171.201 397.542 168.771 cv
.929412 .694118 .12549 rgb
f
397.542 168.771 mo
397.542 166.34 395.573 164.371 393.142 164.371 cv
390.712 164.371 388.743 166.34 388.743 168.771 cv
388.743 171.201 390.712 173.17 393.142 173.17 cv
395.573 173.17 397.542 171.201 397.542 168.771 cv
@
397.283 168.771 mo
397.283 166.34 395.312 164.371 392.882 164.371 cv
390.453 164.371 388.482 166.34 388.482 168.771 cv
388.482 171.201 390.453 173.17 392.882 173.17 cv
395.312 173.17 397.283 171.201 397.283 168.771 cv
.494118 .184314 .556863 rgb
f
397.283 168.771 mo
397.283 166.34 395.312 164.371 392.882 164.371 cv
390.453 164.371 388.482 166.34 388.482 168.771 cv
388.482 171.201 390.453 173.17 392.882 173.17 cv
395.312 173.17 397.283 171.201 397.283 168.771 cv
@
143.092 168.771 mo
143.092 166.34 141.122 164.371 138.692 164.371 cv
136.262 164.371 134.292 166.34 134.292 168.771 cv
134.292 171.201 136.262 173.17 138.692 173.17 cv
141.122 173.17 143.092 171.201 143.092 168.771 cv
.466667 .67451 .188235 rgb
f
143.092 168.771 mo
143.092 166.34 141.122 164.371 138.692 164.371 cv
136.262 164.371 134.292 166.34 134.292 168.771 cv
134.292 171.201 136.262 173.17 138.692 173.17 cv
141.122 173.17 143.092 171.201 143.092 168.771 cv
@
142.883 168.771 mo
142.883 166.34 140.913 164.371 138.483 164.371 cv
136.053 164.371 134.083 166.34 134.083 168.771 cv
134.083 171.201 136.053 173.17 138.483 173.17 cv
140.913 173.17 142.883 171.201 142.883 168.771 cv
.301961 .745098 .933333 rgb
f
142.883 168.771 mo
142.883 166.34 140.913 164.371 138.483 164.371 cv
136.053 164.371 134.083 166.34 134.083 168.771 cv
134.083 171.201 136.053 173.17 138.483 173.17 cv
140.913 173.17 142.883 171.201 142.883 168.771 cv
@
383.289 144.884 mo
164.792 144.884 li
164.792 24.8838 li
383.289 24.8838 li
383.289 144.884 li
cp
1 1 1 rgb
f
1 lw
4 ml
383.289 144.884 mo
164.792 144.884 li
164.792 24.8838 li
383.289 24.8838 li
383.289 144.884 li
cp
0 0 0 rgb
@
2 lw
1 lj
10 ml
348.554 86.1841 mo
348.554 86.084 li
348.552 85.9028 li
348.548 85.6431 li
348.539 85.3018 li
348.521 84.8828 li
348.492 84.3838 li
348.445 83.8091 li
348.375 83.1563 li
348.279 82.4292 li
348.15 81.6289 li
347.978 80.7588 li
347.761 79.8208 li
347.492 78.8198 li
347.16 77.7598 li
346.761 76.645 li
346.289 75.481 li
345.736 74.2729 li
345.095 73.0278 li
344.367 71.752 li
343.542 70.4521 li
342.619 69.1338 li
341.593 67.8052 li
340.464 66.4702 li
339.23 65.1357 li
337.886 63.8091 li
336.435 62.4932 li
334.876 61.1948 li
333.208 59.917 li
331.429 58.665 li
329.542 57.4429 li
327.546 56.2539 li
325.445 55.103 li
323.236 53.9922 li
320.923 52.9248 li
318.507 51.9063 li
315.994 50.936 li
313.384 50.019 li
310.681 49.1572 li
307.892 48.354 li
305.019 47.6089 li
302.068 46.9268 li
299.044 46.3091 li
295.957 45.7549 li
292.806 45.2681 li
289.607 44.8481 li
286.363 44.498 li
283.08 44.2158 li
279.769 44.0039 li
276.437 43.8628 li
273.093 43.792 li
269.746 43.792 li
266.399 43.8628 li
263.069 44.0039 li
259.757 44.2158 li
256.476 44.498 li
253.23 44.8481 li
250.03 45.2681 li
246.881 45.7549 li
243.792 46.3091 li
240.77 46.9268 li
237.818 47.6089 li
234.945 48.354 li
232.155 49.1572 li
229.454 50.019 li
226.843 50.936 li
224.33 51.9063 li
221.915 52.9248 li
219.603 53.9922 li
217.394 55.103 li
215.291 56.2539 li
213.295 57.4429 li
211.409 58.665 li
209.629 59.917 li
207.96 61.1948 li
206.401 62.4932 li
204.951 63.8091 li
203.607 65.1357 li
202.373 66.4702 li
201.244 67.8052 li
200.218 69.1338 li
199.295 70.4521 li
198.47 71.752 li
197.742 73.0278 li
197.103 74.2729 li
196.549 75.481 li
196.077 76.645 li
195.677 77.7598 li
195.345 78.8198 li
195.076 79.8208 li
194.858 80.7588 li
194.688 81.6289 li
194.559 82.4292 li
194.462 83.1563 li
194.394 83.8091 li
194.346 84.3838 li
194.316 84.8828 li
194.298 85.3018 li
194.289 85.6431 li
194.285 85.9028 li
194.282 86.084 li
194.282 86.1841 li
194.282 86.2314 li
194.282 86.332 li
194.285 86.5127 li
194.289 86.7725 li
194.298 87.1143 li
194.316 87.5332 li
194.346 88.0322 li
194.394 88.6064 li
194.462 89.2598 li
194.559 89.9873 li
194.688 90.7871 li
194.858 91.6572 li
195.076 92.5947 li
195.345 93.5967 li
195.677 94.6563 li
196.077 95.7705 li
196.549 96.9346 li
197.103 98.1436 li
197.742 99.3877 li
198.47 100.664 li
199.295 101.964 li
200.218 103.282 li
201.244 104.611 li
202.373 105.946 li
203.607 107.28 li
204.951 108.607 li
206.401 109.923 li
207.96 111.221 li
209.629 112.499 li
211.409 113.751 li
213.295 114.973 li
215.291 116.162 li
217.394 117.313 li
219.603 118.424 li
221.915 119.491 li
224.33 120.51 li
226.843 121.48 li
229.454 122.397 li
232.155 123.259 li
234.945 124.062 li
237.818 124.807 li
240.77 125.489 li
243.792 126.107 li
246.881 126.661 li
250.03 127.148 li
253.23 127.568 li
256.476 127.918 li
259.757 128.2 li
263.069 128.412 li
266.399 128.553 li
269.746 128.624 li
273.093 128.624 li
276.437 128.553 li
279.769 128.412 li
283.08 128.2 li
286.363 127.918 li
289.607 127.568 li
292.806 127.148 li
295.957 126.661 li
299.044 126.107 li
302.068 125.489 li
305.019 124.807 li
307.892 124.062 li
310.681 123.259 li
313.384 122.397 li
315.994 121.48 li
318.507 120.51 li
320.923 119.491 li
323.236 118.424 li
325.445 117.313 li
327.546 116.162 li
329.542 114.973 li
331.429 113.751 li
333.208 112.499 li
334.876 111.221 li
336.435 109.923 li
337.886 108.607 li
339.23 107.28 li
340.464 105.946 li
341.593 104.611 li
342.619 103.282 li
343.542 101.964 li
344.367 100.664 li
345.095 99.3877 li
345.736 98.1436 li
346.289 96.9346 li
346.761 95.7705 li
347.16 94.6563 li
347.492 93.5967 li
347.761 92.5947 li
347.978 91.6572 li
348.15 90.7871 li
348.279 89.9873 li
348.375 89.2598 li
348.445 88.6064 li
348.492 88.0322 li
348.521 87.5332 li
348.539 87.1143 li
348.548 86.7725 li
348.552 86.5127 li
348.554 86.332 li
348.554 86.2314 li
@
[8 2 ] 0 dsh
358.988 86.1768 mo
358.988 86.0459 li
358.986 85.811 li
358.976 85.4712 li
358.958 85.0269 li
358.923 84.48 li
358.865 83.832 li
358.773 83.084 li
358.64 82.2402 li
358.455 81.3018 li
358.205 80.2759 li
357.88 79.1689 li
357.468 77.9868 li
356.96 76.7402 li
356.343 75.439 li
355.609 74.0962 li
354.75 72.7222 li
353.761 71.332 li
352.64 69.9399 li
351.386 68.5581 li
350 67.2002 li
348.488 65.877 li
346.851 64.5991 li
345.097 63.376 li
343.238 62.2129 li
341.273 61.1162 li
339.216 60.0879 li
337.072 59.1299 li
334.847 58.2432 li
332.548 57.4258 li
330.179 56.6768 li
327.746 55.9941 li
325.251 55.374 li
322.701 54.813 li
320.093 54.3091 li
317.433 53.8579 li
314.722 53.4561 li
311.964 53.1001 li
309.162 52.7871 li
306.314 52.5132 li
303.425 52.2749 li
300.5 52.0698 li
297.539 51.896 li
294.544 51.748 li
291.521 51.626 li
288.472 51.5249 li
285.402 51.4448 li
282.314 51.3828 li
279.21 51.3379 li
276.099 51.3091 li
272.98 51.2939 li
269.859 51.2939 li
266.739 51.3091 li
263.626 51.3379 li
260.523 51.3828 li
257.436 51.4448 li
254.364 51.5249 li
251.316 51.626 li
248.293 51.748 li
245.299 51.896 li
242.337 52.0698 li
239.412 52.2749 li
236.523 52.5132 li
233.676 52.7871 li
230.873 53.1001 li
228.114 53.4561 li
225.404 53.8579 li
222.745 54.3091 li
220.137 54.813 li
217.585 55.374 li
215.091 55.9941 li
212.659 56.6768 li
210.29 57.4258 li
207.99 58.2432 li
205.767 59.1299 li
203.622 60.0879 li
201.564 61.1162 li
199.601 62.2129 li
197.739 63.376 li
195.986 64.5991 li
194.351 65.877 li
192.837 67.2002 li
191.452 68.5581 li
190.197 69.9399 li
189.077 71.332 li
188.088 72.7222 li
187.229 74.0962 li
186.495 75.439 li
185.877 76.7402 li
185.369 77.9868 li
184.957 79.1689 li
184.632 80.2759 li
184.383 81.3018 li
184.197 82.2402 li
184.064 83.084 li
183.974 83.832 li
183.915 84.48 li
183.879 85.0269 li
183.861 85.4712 li
183.853 85.811 li
183.85 86.0459 li
183.85 86.1768 li
183.85 86.2393 li
183.85 86.3701 li
183.853 86.6045 li
183.861 86.9443 li
183.879 87.3896 li
183.915 87.9365 li
183.974 88.584 li
184.064 89.332 li
184.197 90.1758 li
184.383 91.1143 li
184.632 92.1396 li
184.957 93.2471 li
185.369 94.4287 li
185.877 95.6758 li
186.495 96.9775 li
187.229 98.3193 li
188.088 99.6943 li
189.077 101.084 li
190.197 102.476 li
191.452 103.858 li
192.837 105.216 li
194.351 106.539 li
195.986 107.817 li
197.739 109.04 li
199.601 110.203 li
201.564 111.3 li
203.622 112.328 li
205.767 113.286 li
207.99 114.173 li
210.29 114.99 li
212.659 115.739 li
215.091 116.422 li
217.585 117.042 li
220.137 117.603 li
222.745 118.107 li
225.404 118.558 li
228.114 118.96 li
230.873 119.316 li
233.676 119.629 li
236.523 119.903 li
239.412 120.141 li
242.337 120.346 li
245.299 120.521 li
248.293 120.668 li
251.316 120.79 li
254.364 120.891 li
257.436 120.971 li
260.523 121.033 li
263.626 121.078 li
266.739 121.107 li
269.859 121.122 li
272.98 121.122 li
276.099 121.107 li
279.21 121.078 li
282.314 121.033 li
285.402 120.971 li
288.472 120.891 li
291.521 120.79 li
294.544 120.668 li
297.539 120.521 li
300.5 120.346 li
303.425 120.141 li
306.314 119.903 li
309.162 119.629 li
311.964 119.316 li
314.722 118.96 li
317.433 118.558 li
320.093 118.107 li
322.701 117.603 li
325.251 117.042 li
327.746 116.422 li
330.179 115.739 li
332.548 114.99 li
334.847 114.173 li
337.072 113.286 li
339.216 112.328 li
341.273 111.3 li
343.238 110.203 li
345.097 109.04 li
346.851 107.817 li
348.488 106.539 li
350 105.216 li
351.386 103.858 li
352.64 102.476 li
353.761 101.084 li
354.75 99.6943 li
355.609 98.3193 li
356.343 96.9775 li
356.96 95.6758 li
357.468 94.4287 li
357.88 93.2471 li
358.205 92.1396 li
358.455 91.1143 li
358.64 90.1758 li
358.773 89.332 li
358.865 88.584 li
358.923 87.9365 li
358.958 87.3896 li
358.976 86.9443 li
358.986 86.6045 li
358.988 86.3701 li
358.988 86.2393 li
0 .4 .8 rgb
@
338.22 86.1919 mo
338.208 86.1211 li
338.191 85.9951 li
338.164 85.814 li
338.134 85.5771 li
338.103 85.2861 li
338.074 84.939 li
338.048 84.5371 li
338.035 84.0791 li
338.035 83.564 li
338.052 82.9868 li
338.091 82.3462 li
338.156 81.6357 li
338.246 80.8511 li
338.361 79.9839 li
338.496 79.0259 li
338.648 77.9722 li
338.804 76.813 li
338.955 75.542 li
339.083 74.1572 li
339.171 72.6538 li
339.199 71.0332 li
339.142 69.2998 li
338.982 67.4609 li
338.695 65.5278 li
338.259 63.5132 li
337.66 61.4351 li
336.878 59.312 li
335.902 57.167 li
334.718 55.0229 li
333.322 52.9028 li
331.71 50.833 li
329.88 48.8359 li
327.833 46.938 li
325.58 45.1611 li
323.121 43.5278 li
320.472 42.0601 li
317.644 40.7739 li
314.652 39.686 li
311.513 38.8091 li
308.248 38.1528 li
304.875 37.7241 li
301.414 37.5239 li
297.888 37.5508 li
294.32 37.7998 li
290.726 38.2598 li
287.132 38.917 li
283.556 39.7549 li
280.017 40.751 li
276.529 41.8838 li
273.103 43.1279 li
269.755 44.4561 li
266.491 45.8408 li
263.316 47.2568 li
260.234 48.6768 li
257.247 50.0781 li
254.35 51.437 li
251.542 52.7358 li
248.814 53.959 li
246.162 55.0928 li
243.576 56.1299 li
241.047 57.0659 li
238.566 57.8979 li
236.125 58.6289 li
233.712 59.2651 li
231.32 59.813 li
228.942 60.2832 li
226.571 60.6899 li
224.202 61.0469 li
221.83 61.3701 li
219.455 61.6758 li
217.076 61.9829 li
214.697 62.3071 li
212.323 62.667 li
209.962 63.0771 li
207.625 63.5518 li
205.322 64.105 li
203.071 64.7451 li
200.889 65.479 li
198.792 66.3091 li
196.797 67.2349 li
194.923 68.251 li
193.188 69.3481 li
191.6 70.5142 li
190.171 71.7329 li
188.909 72.9893 li
187.812 74.2632 li
186.877 75.5361 li
186.1 76.7891 li
185.468 78.0059 li
184.97 79.1709 li
184.591 80.271 li
184.313 81.2939 li
184.122 82.2329 li
183.998 83.0801 li
183.928 83.8301 li
183.897 84.48 li
183.893 85.0269 li
183.903 85.4712 li
183.92 85.811 li
183.937 86.0469 li
183.946 86.1768 li
183.946 86.2393 li
183.937 86.3691 li
183.92 86.6045 li
183.903 86.9443 li
183.893 87.3896 li
183.897 87.9365 li
183.928 88.5859 li
183.998 89.3359 li
184.122 90.1826 li
184.313 91.1221 li
184.591 92.1455 li
184.97 93.2451 li
185.468 94.4102 li
186.1 95.627 li
186.877 96.8799 li
187.812 98.1533 li
188.909 99.4268 li
190.171 100.683 li
191.6 101.901 li
193.188 103.068 li
194.923 104.165 li
196.797 105.181 li
198.792 106.107 li
200.889 106.937 li
203.071 107.671 li
205.322 108.311 li
207.625 108.864 li
209.962 109.339 li
212.323 109.749 li
214.697 110.109 li
217.076 110.433 li
219.455 110.74 li
221.83 111.046 li
224.202 111.369 li
226.571 111.726 li
228.942 112.133 li
231.32 112.603 li
233.712 113.151 li
236.125 113.787 li
238.566 114.518 li
241.047 115.35 li
243.576 116.286 li
246.162 117.323 li
248.814 118.457 li
251.542 119.68 li
254.35 120.979 li
257.247 122.338 li
260.234 123.739 li
263.316 125.159 li
266.491 126.575 li
269.755 127.96 li
273.103 129.288 li
276.529 130.532 li
280.017 131.665 li
283.556 132.661 li
287.132 133.499 li
290.726 134.156 li
294.32 134.616 li
297.888 134.865 li
301.414 134.892 li
304.875 134.692 li
308.248 134.263 li
311.513 133.607 li
314.652 132.73 li
317.644 131.642 li
320.472 130.356 li
323.121 128.888 li
325.58 127.255 li
327.833 125.478 li
329.88 123.58 li
331.71 121.583 li
333.322 119.513 li
334.718 117.393 li
335.902 115.249 li
336.878 113.104 li
337.66 110.981 li
338.259 108.903 li
338.695 106.888 li
338.982 104.955 li
339.142 103.116 li
339.199 101.383 li
339.171 99.7627 li
339.083 98.2588 li
338.955 96.874 li
338.804 95.6025 li
338.648 94.4443 li
338.496 93.3896 li
338.361 92.4326 li
338.246 91.5654 li
338.156 90.7803 li
338.091 90.0693 li
338.052 89.4287 li
338.035 88.8525 li
338.035 88.3369 li
338.048 87.8789 li
338.074 87.4775 li
338.103 87.1299 li
338.134 86.8389 li
338.164 86.6025 li
338.191 86.4209 li
338.208 86.2949 li
338.22 86.2236 li
.85098 .32549 .0980392 rgb
@
2 lc
[] 0 dsh
499.456 179.615 mo
482.448 179.615 li
482.448 156.508 li
499.456 156.508 li
499.456 179.615 li
cp
.149 .149 .149 rgb
@
368.228 233.041 mo
481.5 179.615 li
@
206.73 296.099 mo
366.33 296.099 li
366.33 170.899 li
206.73 170.899 li
206.73 296.099 li
cp
1 1 1 rgb
f
.7 lw
0 lc
366.33 170.899 mo
206.73 170.899 li
366.33 202.199 mo
206.73 202.199 li
366.33 233.499 mo
206.73 233.499 li
366.33 264.799 mo
206.73 264.799 li
366.33 296.099 mo
206.73 296.099 li
326.429 296.099 mo
326.429 170.899 li
286.53 296.099 mo
286.53 170.899 li
246.63 296.099 mo
246.63 170.899 li
206.73 296.099 mo
206.73 170.899 li
.873 .873 .873 rgb
@
2 lc
326.429 170.899 mo
326.429 172.495 li
286.53 170.899 mo
286.53 172.495 li
246.63 170.899 mo
246.63 172.495 li
206.73 170.899 mo
206.73 172.495 li
326.429 296.099 mo
326.429 294.503 li
286.53 296.099 mo
286.53 294.503 li
246.63 296.099 mo
246.63 294.503 li
206.73 296.099 mo
206.73 294.503 li
206.73 170.899 mo
366.33 170.899 li
206.73 296.099 mo
366.33 296.099 li
.149 .149 .149 rgb
@
.301961 .301961 .309804 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginVHXJKB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendVHXJKB+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/VHXJKB+Times-Roman*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]VHXJKB+Times-Roman nfVHXJKB+Times-Roman*1 [20 0 0 -20 0 0 ]msf190.73 317.898 mo(-0.3)sh321.93 315.499 mo(0)sh282.952 320.787 mo
283.769 320.787 284.492 320.469 285.121 319.832 cv
285.75 319.193 286.233 318.412 286.57 317.487 cv
286.909 316.563 287.078 315.708 287.078 314.925 cv
287.078 314.283 286.9 313.777 286.546 313.406 cv
286.191 313.035 285.698 312.85 285.064 312.85 cv
284.198 312.85 283.46 313.142 282.851 313.725 cv
282.244 314.309 281.788 315.042 281.484 315.925 cv
281.179 316.809 281.027 317.658 281.027 318.475 cv
281.027 319.117 281.195 319.662 281.533 320.112 cv
281.871 320.563 282.343 320.787 282.952 320.787 cv
282.952 320.787 li
cp
282.927 321.375 mo
282.269 321.375 281.681 321.216 281.164 320.9 cv
280.648 320.583 280.25 320.154 279.97 319.612 cv
279.691 319.071 279.552 318.479 279.552 317.838 cv
279.552 317.138 279.708 316.406 280.021 315.644 cv
280.333 314.881 280.76 314.181 281.302 313.544 cv
281.843 312.906 282.458 312.399 283.146 312.024 cv
283.833 311.649 284.539 311.463 285.264 311.463 cv
290.902 311.463 li
291.052 311.463 291.183 311.515 291.295 311.618 cv
291.408 311.723 291.464 311.862 291.464 312.038 cv
291.464 312.255 291.385 312.443 291.226 312.606 cv
291.068 312.769 290.88 312.85 290.664 312.85 cv
287.927 312.85 li
288.361 313.491 288.578 314.271 288.578 315.188 cv
288.578 315.938 288.431 316.677 288.139 317.406 cv
287.847 318.136 287.441 318.801 286.92 319.4 cv
286.4 320.001 285.795 320.479 285.109 320.838 cv
284.421 321.196 283.694 321.375 282.927 321.375 cv
282.927 321.375 li
cp
.149 .149 .149 rgb
f
292.486 324.162 mo
292.486 324.104 292.49 324.063 292.498 324.037 cv
293.635 319.501 li
293.71 319.216 293.749 318.966 293.749 318.75 cv
293.749 318.317 293.599 318.101 293.298 318.101 cv
292.982 318.101 292.746 318.29 292.591 318.669 cv
292.437 319.048 292.291 319.524 292.148 320.101 cv
292.148 320.134 292.134 320.158 292.104 320.175 cv
292.076 320.192 292.048 320.2 292.023 320.2 cv
291.849 320.2 li
291.815 320.2 291.785 320.181 291.76 320.144 cv
291.736 320.106 291.722 320.075 291.722 320.05 cv
291.832 319.608 291.935 319.233 292.035 318.925 cv
292.135 318.617 292.294 318.337 292.511 318.087 cv
292.728 317.837 292.994 317.712 293.311 317.712 cv
293.66 317.712 293.968 317.813 294.236 318.013 cv
294.502 318.212 294.669 318.479 294.736 318.813 cv
294.994 318.479 295.288 318.212 295.617 318.013 cv
295.947 317.813 296.302 317.712 296.685 317.712 cv
297.01 317.712 297.296 317.806 297.542 317.993 cv
297.788 318.181 297.912 318.434 297.912 318.75 cv
297.912 319.009 297.83 319.233 297.667 319.425 cv
297.503 319.616 297.289 319.712 297.023 319.712 cv
296.865 319.712 296.729 319.662 296.617 319.563 cv
296.503 319.462 296.449 319.329 296.449 319.162 cv
296.449 318.938 296.53 318.737 296.691 318.563 cv
296.854 318.388 297.044 318.301 297.26 318.301 cv
297.093 318.167 296.894 318.101 296.66 318.101 cv
296.228 318.101 295.85 318.255 295.529 318.563 cv
295.208 318.871 294.919 319.263 294.66 319.737 cv
293.574 324.087 li
293.539 324.229 293.462 324.35 293.342 324.45 cv
293.221 324.55 293.085 324.601 292.935 324.601 cv
292.811 324.601 292.705 324.561 292.617 324.481 cv
292.529 324.402 292.486 324.296 292.486 324.162 cv
292.486 324.162 li
cp
f
366.33 170.899 mo
364.734 170.899 li
366.33 202.199 mo
364.734 202.199 li
366.33 233.499 mo
364.734 233.499 li
366.33 264.799 mo
364.734 264.799 li
366.33 296.099 mo
364.734 296.099 li
206.73 170.899 mo
208.326 170.899 li
206.73 202.199 mo
208.326 202.199 li
206.73 233.499 mo
208.326 233.499 li
206.73 264.799 mo
208.326 264.799 li
206.73 296.099 mo
208.326 296.099 li
366.33 296.099 mo
366.33 170.899 li
206.73 296.099 mo
206.73 170.899 li
@
.301961 .301961 .309804 rgb
VHXJKB+Times-Roman*1 [20 0 0 -20 0 0 ]msf161.33 298.883 mo(-0.01)sh190.73 240.575 mo(0)sh170.13 177.499 mo(0.01)sh164.086 234.733 mo
164.086 233.916 163.768 233.192 163.13 232.564 cv
162.492 231.935 161.711 231.451 160.786 231.114 cv
159.861 230.776 159.007 230.607 158.224 230.607 cv
157.582 230.607 157.076 230.785 156.705 231.14 cv
156.334 231.493 156.148 231.987 156.148 232.621 cv
156.148 233.486 156.44 234.224 157.023 234.833 cv
157.607 235.441 158.34 235.897 159.224 236.202 cv
160.107 236.506 160.957 236.658 161.773 236.658 cv
162.416 236.658 162.961 236.489 163.411 236.151 cv
163.861 235.813 164.086 235.341 164.086 234.733 cv
164.086 234.733 li
cp
164.673 234.759 mo
164.673 235.416 164.515 236.004 164.199 236.521 cv
163.882 237.036 163.453 237.435 162.911 237.714 cv
162.369 237.993 161.778 238.134 161.137 238.134 cv
160.436 238.134 159.705 237.978 158.942 237.665 cv
158.18 237.353 157.48 236.924 156.842 236.383 cv
156.205 235.841 155.699 235.228 155.324 234.54 cv
154.949 233.852 154.761 233.146 154.761 232.421 cv
154.761 226.782 li
154.761 226.634 154.813 226.502 154.917 226.39 cv
155.021 226.277 155.161 226.221 155.336 226.221 cv
155.553 226.221 155.742 226.299 155.904 226.458 cv
156.067 226.616 156.148 226.804 156.148 227.021 cv
156.148 229.759 li
156.79 229.324 157.569 229.107 158.486 229.107 cv
159.236 229.107 159.975 229.254 160.705 229.545 cv
161.434 229.837 162.099 230.243 162.699 230.765 cv
163.299 231.285 163.778 231.889 164.137 232.576 cv
164.494 233.264 164.673 233.991 164.673 234.759 cv
164.673 234.759 li
cp
.149 .149 .149 rgb
f
158.511 223.474 mo
158.303 223.474 158.111 223.385 157.936 223.206 cv
157.761 223.027 157.673 222.833 157.673 222.624 cv
157.673 222.449 157.727 222.306 157.835 222.192 cv
157.944 222.08 158.078 222.024 158.235 222.024 cv
158.461 222.024 158.659 222.114 158.83 222.293 cv
159 222.473 159.086 222.674 159.086 222.899 cv
159.086 223.059 159.032 223.192 158.924 223.306 cv
158.815 223.418 158.678 223.474 158.511 223.474 cv
158.511 223.474 li
cp
166.635 225.187 mo
166.444 225.187 166.244 225.146 166.035 225.062 cv
162.761 223.837 li
162.395 223.704 162.09 223.637 161.848 223.637 cv
161.549 223.637 161.398 223.749 161.398 223.974 cv
161.398 224.374 161.605 224.704 162.017 224.962 cv
162.43 225.22 162.89 225.411 163.398 225.536 cv
163.465 225.554 163.499 225.595 163.499 225.661 cv
163.499 225.837 li
163.499 225.921 163.453 225.962 163.361 225.962 cv
163.311 225.962 li
162.711 225.804 162.178 225.556 161.711 225.218 cv
161.244 224.88 161.011 224.454 161.011 223.937 cv
161.011 223.579 161.129 223.274 161.367 223.024 cv
161.605 222.774 161.907 222.649 162.273 222.649 cv
162.457 222.649 162.652 222.691 162.861 222.774 cv
166.124 224.012 li
166.465 224.145 166.769 224.212 167.035 224.212 cv
167.344 224.212 167.499 224.095 167.499 223.861 cv
167.499 223.47 167.286 223.141 166.861 222.874 cv
166.436 222.606 165.978 222.419 165.486 222.312 cv
165.428 222.295 165.398 222.258 165.398 222.199 cv
165.398 222.012 li
165.398 221.97 165.413 221.937 165.442 221.911 cv
165.471 221.887 165.502 221.874 165.535 221.874 cv
165.544 221.874 165.557 221.879 165.573 221.887 cv
166.148 222.028 166.68 222.272 167.167 222.618 cv
167.655 222.964 167.898 223.392 167.898 223.899 cv
167.898 224.249 167.775 224.552 167.53 224.806 cv
167.284 225.06 166.986 225.187 166.635 225.187 cv
166.635 225.187 li
cp
f
314.808 233.499 mo
314.808 232.527 314.021 231.739 313.048 231.739 cv
312.077 231.739 311.289 232.527 311.289 233.499 cv
311.289 234.471 312.077 235.259 313.048 235.259 cv
314.021 235.259 314.808 234.471 314.808 233.499 cv
0 .447059 .741176 rgb
f
317.442 233.499 mo
317.442 231.073 315.477 229.105 313.048 229.105 cv
310.623 229.105 308.655 231.073 308.655 233.499 cv
308.655 235.925 310.623 237.893 313.048 237.893 cv
315.477 237.893 317.442 235.925 317.442 233.499 cv
0 .4 .8 rgb
f
2 lw
0 lc
0 lj
317.442 233.499 mo
317.442 231.073 315.477 229.105 313.048 229.105 cv
310.623 229.105 308.655 231.073 308.655 233.499 cv
308.655 235.925 310.623 237.893 313.048 237.893 cv
315.477 237.893 317.442 235.925 317.442 233.499 cv
@
276.019 233.499 mo
276.019 232.527 275.23 231.739 274.259 231.739 cv
273.287 231.739 272.499 232.527 272.499 233.499 cv
272.499 234.471 273.287 235.259 274.259 235.259 cv
275.23 235.259 276.019 234.471 276.019 233.499 cv
.85098 .32549 .0980392 rgb
f
278.653 233.499 mo
278.653 231.073 276.683 229.105 274.26 229.105 cv
271.833 229.105 269.865 231.073 269.865 233.499 cv
269.865 235.925 271.833 237.893 274.26 237.893 cv
276.683 237.893 278.653 235.925 278.653 233.499 cv
f
278.653 233.499 mo
278.653 231.073 276.683 229.105 274.26 229.105 cv
271.833 229.105 269.865 231.073 269.865 233.499 cv
269.865 235.925 271.833 237.893 274.26 237.893 cv
276.683 237.893 278.653 235.925 278.653 233.499 cv
@
239.32 233.499 mo
239.32 232.527 238.532 231.739 237.56 231.739 cv
236.588 231.739 235.8 232.527 235.8 233.499 cv
235.8 234.471 236.588 235.259 237.56 235.259 cv
238.532 235.259 239.32 234.471 239.32 233.499 cv
.929412 .694118 .12549 rgb
f
241.954 233.499 mo
241.954 231.073 239.987 229.105 237.56 229.105 cv
235.133 229.105 233.167 231.073 233.167 233.499 cv
233.167 235.925 235.133 237.893 237.56 237.893 cv
239.987 237.893 241.954 235.925 241.954 233.499 cv
f
241.954 233.499 mo
241.954 231.073 239.987 229.105 237.56 229.105 cv
235.133 229.105 233.167 231.073 233.167 233.499 cv
233.167 235.925 235.133 237.893 237.56 237.893 cv
239.987 237.893 241.954 235.925 241.954 233.499 cv
@
4 ml
[8 8 ] 0 dsh
326.429 170.899 mo
326.429 296.099 li
0 0 0 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/VHXJKB+Times-Roman*1 uf/VHXJKB+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Giacomo) ()%%Title: (stability.eps)%%CreationDate: 03.04.20 21:45%%Canvassize: 16383%AI9_DataStream%Gb!R&pO4U(%Oh7g!:KnZ80G:=^nfH.Hd>;-0M+fKMmC[^kE#N,=0e`KL1ulpce740^J2LDQ=X3^,s*"sp;Yp#X8?&drHfd5MgSWh%_c]hF96iN3NUF8.eY0ZIRM,fPQBl)BVj3Oq6B8qjj^)HP;7iUp6*HslLS\=h2]-Fc97PR*iKO*cjOD'XC:i=!=1Hnc2h%,DeR!G&%7B]o9FdTc,Fm<6Zo4m(L[p*UrWDMP=I]^'4C:-"ae43r=966KA$a7NhX5,lYGM^ld7Tdms0NicL5huhL)?:2\e)Z.!UHNLpk5^h%%4Qo'(&2S@1jSP3')?C>@D]Z^*X;0D#DM1%@?gR#TrG2p5KDMOslTW@srW^&bV`sml\q6<8_g)8HZB>9]1'c]NZ"pbrDq@K/6*nLL%@1iLjrb<`eO<cc=<Du#gPp;:18mZGUS,r;dQMRco5^T9V*VG.oFPu>a#";['0Y2#t#B7IOfF.MN3LAd73k4F_7Wc"k",0c=kr%#"%Q:1">gNCF?*B\7hdK8%n_5B<q!p[26Ll[O7?LIpWjLG2u3\WWTl`8k-hCX:<`FnduTc=Q(&+dHPKl^]]/7_<gOr3=mcKLPF5AAU!%&2p;m&!J%tLC$'^Zp%^M%1To(CMhF5RZj0R_KkuD#*@+ds"!sG'N,e?BV]f/aFVK+-Y>F[QThsS*F+'piH=H<`0^Pl!fljP9+`SJ%>HX%PctP\1%I^@t%N#-d+gH%V:DE=TS&J/l_9Z"N:DH=r.uK]EMO5oO1q-Z-g9am=Ml!^^r0>N9WGE>CA[BpehPR#T)+D@s$N.fq%MLqZ="\[f5r5;L0&sb#4Y\'kf3Md@SWE(a_>0UZaG.!5'eLI[g+f=a,G\E-p(Mi=3U)8dI-^MV(i?sr.1$KpZGrR#G`%j:rr5<U@%R%SSA9_aIZE('JX/Q"XXQ>o=fM;uUjR#5Cj4t/C(s&]WKKqDJE>/`=HILpOW@u<^4-2aPrl,Y=G'Qsg&m2[A%k=@6ls'[>r++@Zl%F9_!.Bc`g"r/7CjI/47MXO+O<55`?+3'',#pdlXL'`>mI3'R89ZUh'Kig'4u4mFkSOR)P6cP_Ft@NA*=]]j[7,H&m5j:j6#05Xja%03U^BLLkFH3b@=7YVmLZc,K53-^LM!NT6cnTlol=bM_SN;4Y#c[6lZ=H_Alje$)Rt3jg-lPYrn]kj(R-;i5c+*Q:),Qf8Gtf4RJn%)hf;*l+PQsBmlFGs&$l%b,!N\kFCOd[SS:M./fU8S^n*9p!mf[/0.M5m8N<$l/&4#XDQCI^=(8/f!0&:"%&en&o3uhcsbJ`ebc31%d[E;EOam.mE^a=3-O;QLr(I(KhM)!R^[tk].a'Zfr(I(OEqHj:Qi>1kl0j"+mlR`O.hlZWq3V(2(?oc/0Du]EQHM,(r(I&i.eL4G%Qi?$(J!?Scgu0WO=8H/$7K:7""K<ZgeT/B%Xi`sR?S1I!>9T'bZ=Wr7/b;e"=,(Wnr(GJZs0,;\c!Sru?c^PlgY+T;G37LZW*k!a%Nf4Xd+YNDL'27KV02gltYg6.Xb\K!X'X2bg/8C9(S<fetk=d_HnO:,$r@@$;EBD[ep.L+&K)ZS\;M"bLc+M^JXf]'&EM;?`0CVT-%O=TgN4di`Yi$]rF*bfJg:EI:4b-GFQT7o2u>S_<Tdh)6fqZL\^8VB"FDBksj))[Z\n,n?#cs!i-\bNo@ht),Mp//nt$3]2ee1[6:%ZEQ[QAIeT8nrcfaWj8"YiObV\i4,K$8th[YKnoYgV=afLJcLmBNC"A"X0psr4oCTRpg9^ekma:PY$V15.(5cb=d0;I7Z5Qr6;EP+%.LQtoJ8s&k<65*nXMMDl3X."'GD.E"3/=biP_lN,We_llM3*nPlK?s\!"L9<qDb6QBNK^k-)deV2-hXGlQNZ$Y>lH4$Fj:UYYX3L%]O''\:CV4GN^AbN_RbF@o!W9JkCg9]m?]>jX.6=hP,i9,')%?rd"V`taf(>goG/T'MlEBuV-?QMHCGREo(\3/,FBoG$E[$+Po\g_%FT/=jiWr[H$._YZ)Pg@d8D-l#9$fP]?:p".rg38qN'q%rVtfDZ]b7#*AfP,oP4`\X7:p1f@M7:]A^"82n.p)RENTRr'[):?-:bJi%#[-$tV/'\/("t2)!FE.%7EC%cGbfCAQN`DV;t*s2fOA0Q;'#n`#2Z#V0>`?P*k@3llGOYZ2luVNOONuk"RT.p\%qgA8B$0GAjGnE%CC7q@WsEfi:`SRh,.=<;J+sPbP(<J>5j(M<4TQ;6Q`LHP:V[\Q$N//3*<LQ's5B/\%\OTuOdN.VgB*[BZuNVI[PCu7H'DP&5F<V\%,u==jp-QebddlNQ6KGubfptaT.[bgY(Fc3.3k98HAeJ\j^<tbgmRB7F!/?HgaDk"@NVu^??B0@OE[Jpl-q"%KLN=!n<8;)SYE3n.%kdplS`<Bap*;aoF!pI.lPWb!*B9Uqh.7N9r3F-sY.D8nc7/Aj3e%(C^4jEZ'cWIV`E^0Ip\ME9@>b964;-T4hck'?Y(i.OW3%!bn%>u8,Sd1SuEV.s=)*e8$b[$ma(V=dl"3%3INZb2YOX"A,VAjWJ]C<.A[b>MImPPthET_8rb=l?X^CfSd&j]o(/F(JL:MRb;+htSY]%O=&5#b/B>[2^On)E$hi[j\28Jf;8KlD_*U51W%*0AuWb[KXN3VkN&IU6-t*YIL\1f_"^`QaMR]d3@>/+<N4nkQ\lo<#k0;(%!dlY%!Fh)Y(/`hmE]W:D#k[rA\><U(3(%l9d`AH?G$Nf??sXS4rX+0SqA\0V?D@$3\eAfF)`oZk19LS.+ckqNWQm0d01%:Xc.[8%/A?@g%h?@49AWG[#JbcrbPKjh9PstR`.?Dkj1))TH];9AmL5n!F[\6R'erEui<[_l_Dcu#"Xa/"lPWLkR@j,bdf>_%F@A/,8]Mt3\/o8aG%=^Th^M_mF\XA,Jl8r7,Za7=gB2LVYr.s\H9D;<>dB]X<$f!6i.-Jo*tdJ$HX5PeUj,o5BmAuV.o@g]2P=j'9a)YY%M%[YZ?%FutZ%/m-8_1`9Oq8ch^'3Ou*S1+$iTH\A2)6,U6LXtF4EPu:qfP^(B1n[OnLcD@^_P]=2?n,u2;dB%Dmaeu^4a%4mJc?2b2W*JAP`qYcr%c8I_R&JuVVr^GPTM,BsSjo-%;>MiYcg+"gXKd!oRbUaXeS*!<=5$ZXJK-?N=9US&+H*bkpOL)&26hb6O,]]q2g.#!rG>JsNfXLb#%eoPqZ(Mt[Vl=5:T7^2QfXT6XOY:T>>T(t,^2iDZY@PL)MLW,g]=d2Td@a:"L3VUe]oQes`VYo0ZHU>QmTifc6l/%'/WJQq_b#j*J%PIEA\[;f@>9d$F>Pc7TG[]YG:e_inXm%RXGif,UYF[QEqFSFC,AusC[SJu;@<9JcM^F,6qk^?V$C1IRMROpe>$tmq+Y3hA$nsCrn%rJQ98+*2ods.A+.Vt2eG;Ju)<et,=UG4(iY\"lkIMl/hJkNgn#hmq&tg:,<:CP/@_dtgRI#/:aD4,LKM&PJG[>@4ifT<ft-boo$D%ZqKtLeuWS-L"]Ju[S;Z*h:M>Qj@f>!dJ4!9:.NF%)AXD='34]'>2-e<%I0[ZDX+EO3gK?*1dbm'nA4F4V=>E:dYcU7oM[G'%:.k)%BW.4iR[cb(V-5nW.T'MCqnle;8.dna9eG\]EaI@+-+_8f/);PDDUWO#?3bljLAJITq4Q@-IF:7<43>$28)o'^.3pC2hrEQa*O`PO%D)JD*1S9<r?Rd+jB*unL3e3`/VD*Pe9W=^D>O?Ss;lM^q,;jO'C:0OGk"IEDb1mgklEj*Q[$I[M>(ai)o?gV=SZ/)iB`0u+]V.9e%P+&)'8unsc<Rn&%U<U/\R2/_uAX)GBk!POX/_d%3HVE+a;78t\):P<i>'+Qr%;!OKfk13S;]TD;!2-?()M%;#E23ut3/XE`5hCq<%qmbH_8""gSJ/IL"AY;MjhJL!9!D<OSZi[?e1Q>`@mm6:2CQo\Gl:i#L<\b?nUUtWW2eo?7R6i3@2Jh!#?QgYnh]<:iXmXgmV#UBt%m:JChHZEeoSGouVBRZo,<3*(ZpJ-.h(q9$j?D%em>495Hl4=3Rm/<uS;?,Hcf/r%D:fj\pDaO]'ejm=WP<0)jk8:("mIWkboj_P3%U6nd3m8b<!54$l?C8O6DUS&3gp8=)<+cUT5!)c;RO?\D[!QCj3r<I2'r%c`8@^G`/$OOa:RXt&8j4hVI:1pph*qT`6A>L,^P@(,r%;!+MV"4kNqHHu/VT3`0;KZpj7cJIkSeGt^/J>/gBhKT;O'$:n*'!3kF$^<Cr#&k<7RKK"-^ln#7;<WNG3hqDSR.g/lT@"91[)<F.%bRMg3i_0f:XUJ-t:.2#:(a-L&<*HB[+:EcRBtC$+RBLW)ZT]4Mg@atAemYb_raZpiW#*%J&2,7'nF_)em\h)`;okbp<J4(H\r@d-%_JOs5)':\n5MB%jc-!90W6<W^,Ae!:T\`rKH8&C's6cq]-U,^h90(5Z`!i;,rB7<miC>fTl@-O3)#_]11dhEp!.7\Hj2Br<&>/-*%]to":[Hd-klf02lj67,iZqPtrCQ9@L%9h-<#l,AqT3!d\*VH`[%e5FHJ]3[c-d4*O9YCrOriJJ[j>1AT4fX8@?IB)p(>=8fm\^s=%,Rt3kJV7C6rpIGng92Cjf.qB7U@K$qHOfY!Sl;?353Cp5ceDsNWXX:7r^$:R(Q&rr]lt4<K2-6TiNr8s?tf(L9M7(S?&`&52-k.n%j.6][g\$+9VO:8Kr7(cCf.O*G]g9]?:/`\!^XRG1cSTF5_"%fheH^O&VU+#iDLE'Cksik:/_KmEl[U4dD)9GO;2Y;&Y[b&]VOSlN%1tq6Fhn].O!C0&f[mBbi$X^Wb`PHfo'u',/g.(++!A2L5dU5I@YjDB^02UB9#KZgMDZ-S$0]:Hh29TZ?9E$%!UK!#.Pt3.%L/USP%q*o9ZD`Y1UfkA8-4Z#3m5HRS:VKoS)/HHf.!X]4^1#_MBqWKCL^A=l(<O0D0?WC"pb%OU@[a27n<6C[X.PqCDF[po`[h!&1\ffgj%+5mYG?FL0DB27b524P(dY$)iR^j7UL4puApXK5r$+j?eEHo<Y>n;Ai;*;[%"Eh4)g(QMS&]_.2GkG7Tq4f%uKEoHo1iQ!*hq1b\p%Kr+91q!"1S2^.knP*EQ`H%C";bto7cM@]LJ!&8:3\UPmSq0s[>b!-JQJbqr(c2T#^(B0FmMuQ>HV10c?nimcPX<5qa/h8'Kfc2'_%itjF'k@F@N',=Y>W-L*FaI'gP]UU8sJh/@#%d8E'egUG@[mo<u\M]9EaK8>;LM`#HOBNa88'aA,PB\I.`:XN:O$EuaVfOU@n:]sQ%ft9ki?ml,sQuRLSd`5/i4<WKl5X^)%Ku;C]HrZ:"H<UPA/qfde^BXto*r8EZo'ZMkRL"a4DhQDo"rMZ)e#5OPcl>,-';HfVB$n#2%Nb2-=#r_DTC!"_`/^^D7%9>V!P9,FjB(XtG1\e">Cq0/Sht6[Aamj)KWB+X/L1C8O[(DEj!X3qtH682I:goPiZnN?Hs5,Z<JG,C/%NNZBp3Dd>pN"F8S!+q0pr##Bl)DpTr<kH9$^ZpI1-EP(b&K5\l7K9Bsa*Ll^+1d^&_@!0Z1e<@e?iNsh!+T"2+K!t1r2@j_R*ePR%s1@<;DipE.5/>g$33LcY.2dg=pt4"&Rf5<%_0]W8d.gi<pU1unn9nsB^V%o4j5Hrgq,9rbT>\],rX(bI//k%Cru<%s%-o;]iLU9I%/1<OXnT=l:r""ALs+aT8r:nnDn8A/2?3\;jX79!K`VM/>R7jsEp6ac'PPa8"^%t_d5(iYmaC,#HD\#>"pp?4-q[M[pXlegtaFLXL%s4ottq0Y6D9>71t;UM`qaKY<"s4qYq.k11<*Wp`WNBl8Z<^0(GHC>sDS#l3GYkJg.GL[WC)Ci9MlG((/_\Vq&#,.fPl:m@ok(Q0j%'9;1OApakN>te[)q<::a[`4lBH&WJ@_f!&f#1V.,.ie&+fJ%:V=3e$n9p.OCT+BGF3XV?+=,`Ko>af0<q'd:_a6g=l`2u';6;N]D%;6YIYZr$C[g>9#oT^DhA[N1Tf,hInHNKV>q7_Oc]Z";Sif-mb0Y;D0d(GZn]_B6eEHK,T`-&+qT^IP^YD_'L2,RjZM_nEh75p&fj%6gkAAG,l^&oMD4[G8NJ"Hb,$o#L%-Dkl'_'+0V60jC9]'W2%OKl7]P"l4(W!ole%'d,l]+bG&h&;Sr+Cke1%>1]a+)Pi]gO#'$oP%n6ql2_EZj_is4KKIo:bCO.n5!X85A@2H?LACLG>U^)8$r-gL1OHq>GurJ+Jf)1p?r7R7[XmQ_.gFK#XOG+`&)n.%>\NjJ8S&#8]M%6ss1>%I2bX^CG%inM`_[C5.MGs/5sl0[]5K,L#(nb8Q#n/MhFM;s6(MF1BY7NU#u7G&-`Z0mu)#9s"$JHM;Jcs&?o!]tQ\dp,+@4%F[Yrhc)-IG3q_Hm%AmRKB4$&ZG"\UqS;uWA^QkZfP*Q0E*#S"PE"FX\7m1A!-E1#PpZm60%`;=[god-1aLbp.M@R;SY:rf="W6T5%l3,Rml1`\I@6RESp7[fQd]_a.5PgZ##Dh9sZs$e^1"i?\.&0G!Fn&Th0,bDfZW!lJs/HU5N+$Ya$oE9_VV7Q1U2]8%2mQuc/=*k1%PB2F^?,E"U6fS++Ytm%mKFim[nCSFW@O,MXa8ejO"2&.^@*U$9>*Md#k*GSD,0S.\N.dM"TlV^s07%8/c=1"oQ;p^2*@#2cf0-3'%<f"GP5771)jnpSV%VT9p,YXLee+iqXbPt^Md:+0<ZAtCipE-m[`O(pqNdZ`0Eqj5[2_q7`Rt2m=VD/Pr1m0#gjbBOR\k-*O1otHX%39K$Z<n#3\@T&:KrFQ;?gYKY1op^LOVaaRZL4Oc]>e`Ko\+&D*1kl2;.QH^-X?4T5hB`E(Eg9RNb#3B$"+UTArE&IJA#O^i8W%rL%MG7LN]CudP*O\/DouRZr?B@kI];Da@c&kl-pX*`VhE@'Cp#175e>`2UMpa?_gS/X:h.R>INF!Egmg/[+Tm'(\8\a<Y]%Zq#Nhm!*%FDl\f[-e"r'`7qpo[OoY8!@1_8s(-FD9H?+YucI\?14]+!g``,*Obr[k9g]W$qQGqedn`F(Q^YL60c7]NERQZ!n)\e8G?4#Q8C@+%`jF_4H68GDX8C<9.5kSZd!^ca)<JOq(j`<0/-mY&S$8K3)2+ij_'B)HA_9D$dO_07\eZY0.9iJU:tT;qractG"-dDkG%)QE0oh#=%#\QU(l*675\taARh&h%:\mERn5>7gd2S_R+:U1h7JS1_>f7fsC:-VVHhu32_cB?9:mSra5#kNXg)Xju1a<'HAp?LMoTK*im=$5q.%9;IrXm1);SH_ZeUFn8)cmiN&uBGTro^=7]=_I9@:/B3;pTT$>PqeitR,OsE(=d*J,KI>\Cc1(VfiUQs_PCX7"KDMIDiiu3^=IRtk%X]j<S,U0K);2bTs?ed4bYW;,u-uJcs-\G4p/I0Gr`E5m*9+;j5[]6gu>L$aUU4rI2`nqg?9$0!%6SFZjR8L#%Qqpt2LEZLaq33&X%b&<UakT&+ZABM\=;rUnk3.BIL,s!ib[ec?Ep1/%//Q<lUMfdLq\uD74Z;M8(]&%#P4>P^'%^P]E,J3oS2_j%:K0T#XG;=GBc:Or9%[V2qi\Znnkc9-AkYM\g\0h?kha3[D/k1EVYoiT%,h0T0$Aj,Q?!\jgU]&)i>p*!ATSg`^@Kn6.k<#WA??_tYal8pELoarn(?a6ZD%Zh%Pon6^d.&rKlqUE;HE*)HjiaHg^Hh_`PpBMg5B"iI4bfec"Z$GM;[Ql%7l/HD;FWG?!6p,<,"W&sCTf//S0+QNU9s7@FC/2mE?%og*BXHL/IM$mW@h6P[EV"AmhQ52CZ(I)"'E0MoB4K*I/.89LBN_qmJ0$p%05SI4,1EiqkPF0_/g=7s>X'9F>?rO,n6%WZW2)GPE`%X*6&e7D2a,'0S"5_/qR=8Y^6)3]P4(AJMJ*XX85P[p3D:p-$<)&grOSmak"JDh>?=Yot#'(WJCsYpo*IO,E$0V=q71I(<N9IrGo[%7]qj*^<D$pie)dr8`%0$KVFT.51tt7h`gUu:l-I`Egk0f5K$-CEhjDaOG:XA"J@4D8@rMQ4(9otk-L-%cJqsjXkLtSM-SNRjn<'3%dU9:Xn(-4%hs\OnPD]Jb,2'"D.X._cqojNJnYi[ah(;X1GGY2Mb\1bt[1>@SrnD_?kk'g#98:I*=7R?W4Uaq)[9o'5fus%_FfQ^7%lN9?m%L0c]clG\?`XX5Mg@(S'XN@:`WN4iZ(gi/Y,eq's,H9[TKL:[&6^*\"poVW@(Od+?0Qr]ZQ#GE-L6:Z,ZEUdD<$q4R(.r4o%q3nP"]`/$tCMg5bqG:cIgDo&[I^Sc;>Xl<!4Yt@FCXIKKmiiO"C4+VQ3:qe920^aUn"n"`r&Cr[Ml`?\5rt9WQWIJ%:1"4OY?t?`%SSl3a^Xr@-$bs)Rg?D9(n_C7qrT3a"k0^`gXiSt1q=`e&eg^5X]=lj'gY!u<*BJ>3fPF)_/tHU@QZ!sAA`lgbLI\LNbaq*R:1IS0%IcjeDio[dMVd/niZ1$E2WZXH(Cn5#g>.75/<Z=.\,ImUI7OVQW,C62X*PKd7SIM^Mo<gI1S;MsRbSQtX=rU$']jdP_VnmHMQ68.N%3NLT71eQZ$S3--,+5/d+.%,1H4lnSgh)]B]?Ln$-F/Pq$p#Y)anVL2B_rZ?P)N)+cFamKVnrM(e9(@\TB)C`?Z.#Oa?++koMR'R7%FA[/E1qO`moCB%WV[ot9[<I&dghCV:3tts`<kiOB`lcgao!bbH>tmc9?aS;)YFhh+d4E7lCO=/HG.LF0Ks<>fm_<qd>(o^mI=%m4%#H,mOV[oboD590PSUP\K<-g(s,p.=`Eb;dsV[#lTr:*-!n(?l->MXMjoI0[MT/8V5)IpC-8oRkP^W4Wj*f2Pje`q%jZ.&#keq%V7%U$1#upA3$FXA<EqQ?uK!4$?=j?T2?D2]XunIG#[1S\i$A]=j3'YC3lT:Un$dDUG<09&a_A5:AO7$M3hU]RFi@lhAj#ERCW3?Wlg-%rg%Nko^o$RZOo>pP"nAAqcI33mU'6]mA[_&:Ua(p\@9V#fr<Fs'\;OY^N;]O3,ff%?uVQ<eiJ3qj0hC?:t@-@mBjSaW`aP7NPS^J%ES)^49(oN]D9%+?<:9LRe*V^7VqL8s,dgBsP]^3.d>t3%&(7FRI,GOZ:.%lh&=6Y`oVmT$VC#I)BhI8s8g?ED/!]Q[m;t9f8Qn0?%^Xeh[N@0FSilXaTaN=k?`-2.P#s6C*G++CCD*RCU6`5\O>Gi(,GkRtV\oEij3sD47A,Yh4=+3]LipP(]Ynb)/h!_Efg"nR-N"NKf%SVXMtI<WdRY=?HBVm#L/'DYNG(<ql@]&aEP(f"6e\KG0W[a$?Z(UmrpLO%\;NqYqmjA.Q+a'J-.E`[;)/TAbTUT@BHRJk/=G7qI0%]@F''B8qO:\(k'QWq8)faaHd%=1??b%:]nDC$p<9,j(CCF#T6=C$49R#WESjEa#UZ:Yt8PD^*pmhnIG_OOe;6;nHqXa5#L.;K0c)%(je=*m]r+@>O?M"EB3d[QM\oih`n9UjSm;Acefg9*Fk</$MSSI.D"X/ENe%s`?k8$^o,eFA2DhlZ$M@1hLlQ/g@*44EV60nQ@$Rm%>q@#-@][u;:Oe%`9C6>]J+u32Fj?7Z]%<EUUIXKP@<`hrM]\O*(^"%j[VsDD7+1sZ4#GR3qf'N`,?rUT[r\\ds-;4L4tk,b)ogm`%M65%J,u_F?>/-;VilVG`BKQ/po/]b8%8SGIg=bma):bhZ9.`3(At!<d)!pfj:aFXhV9D)e+0,q(ji>ME)Uc-1WL.Rf9#]"O!\.OL%2<O]MD'Lk]m>pLW=^33:-rkG.qX#YRhp7hR]5+',hN*N)"3gFJbL""j1Tg'=339ol$7ItTk8%Ym=;'2ncVqE\F*>DSC[@9Vj.ooT%CH]6DkrEr;4l!Yn\l<NY>W_&If>S-@^<_fS"QQi>8_pMt2ig^L.>@#n\[i.=R+^k7\<.UHSVf<.9D;f6RsM!?[KX?;0t($FC;oO]%0Ri'2Q@0jeAIsgMk0b\lPFt#8EpcnQGd;H1MHUSH&R7CD\q=drW&Z]j3`V$&j?-Jqj"KiV4%4G5'tl#V]UGD.==i979[)em7T/QD%I+.;,,@J&V;U/PEDC),da+7EYiodZgjVG^Qf!KSa)BZ;-X(0N+f:GSQp"(jT7/it*7E;L?iqN6/%A,I@Slf!"ZOc`2ZK5;bMbRG3%[^Vh!eK0<tZM`5oCGius&*7JhI,K,'Yl_;ObQYZ[4D!"^X/(j6hr1`Xp1cPLn8gIeIFR^'H.ur+K>LDq^@FCf0uGkb(C9S,-)uA=%:O3^:<9DfcYrMlY^lekPL)gj+/nViIEYL`g+Et?u!g89m-_QDb$rAKGa\%_FB_\CsRL9QW(?K&i`?4@*6Q7,paW8EG*cW3--u+^&%HsF8.+It`YZ;:D\mrc:GK22*5$f#)97bBLDf`bN0kAN.BqBNG_JB7:p/Er/g:_7[!LqWN/T8KpJ\mfko6<W(K^[s3Ck+2!Z&uj/b%B#d"MJ4N&1aQcu3:V&L$H6/5t9*`K#-WuLJ;084c$4`iN1gtoN@6O-\6C#j+HUs05X)\7__V<1fL-&jdFhh;Ef58HcD7coBWq\O^%D3mIJSpk@s/r#!O/I+NuVk0efGP^j3^,(dbk8i<UQsIq3q,KI*B/]TaiRHi4h,FJsi%RDXeic?AVXrNhW_HO'9N*r]U.(i^R1SuT%^.WP4kU*'%%R\?;^N")VI2K=GLSjoK)seO$T3-=+_XF/`c?%O0-GK)H*-f]hlZ`kL]p#8.Q!u@V;6L>Qj5Q3MFG?OVK]7ak4>gSD%Y%/BAFfVst7^<l[5[r\E\F07e.ece45Ih3nm(u=$F.*_/j*Qu=:JAl+Ic/IdK<cO8eNIU*DAuLSRF.P^R[pK_[j@c^#+aX`NN]Oe%m8#Au3NW0$-/s]]mIs]_OG)VgEp0r5)XmkAl$ek.=-1Y*$Uo]mi6R:Y@'T&]Igf,Uq2'2lbTEb6?Z4/c#URgEfXH/G!%ud>"#OWG%:o8uj3"s?P51Y2?0*l&gWGYIiI;HhC(PXX`8"0u@.=#X8_i/bfgD!__GlKOh;*&=VquG(+^6:>9/C6Frd//&KZgZ#V=97/R<e(5L%/1kO8mc,2-d56`dUGE:oNOZ9>FDTsV.eNt`c4k$NV'0'sZ1FCoCdr@_MiB/FXHt'YoGU,50`du449:<M(C1/"@$<0T_MQUE[qLLa%8)F%.]L@g'L?<q$82DM]R\kq2OH3h*8J.UhK/UO:I/mNF?4#J>Mbuid*d/dr15lnDE*FIB#Mro[BH!O5b;1mR$b(fK#7G#AhZkJ1%#cR4(Nc1.a$\380IrP_9-7elF1F=Amh:B%S/!'JuicfMW7.hkY3.mnN\LB]p3]Uk9[9p\$dO.2_nj(b_9AEP76(SM+RW=6hOC^%a%XHB)Zi136r0^KErdCOb.9B++6dS^VaM5Mr!F6K=\q3khGHfZkU%0_1r&q?)r%#nm8&tOHuJNA15-LT_sT*.#i(g<(3']h84YMJ@Q%HF]m$BjbbS!SR3H2nMj6l>EHQjU]C4N]r*O#LOamg%t':^r9W$k\75/.G<LX&e=oQ]"daSq8amTMn:oFG@Mh24qpDP"t]M0k-:>:%Gp2\H;,;Fa,[mJ;OaS0Z,c,36_Z#Zt&tWsRm+uR!]i"/ikPZWHo@*H#l)i>UP"2VNT)4$d,s,$dd#Kq9"#qL:?-%B<"!P[md5djG%ADQNUA6Hj2FeeQaLFf_^NeQ<SetDKn2<H;&^6KfmAiFp0V8A[cI"/PSo821Ha(`#hSr*`[=(,TVp/WPVCFJIVDhZ3.>'s)0MMm3"%`03>u'k]*>o55ig[%6l8TV6#XUn,Fj7[8(17H;M=[$-r-hd^K_[`6a:CnfMP_0B3H)6l`&pX]d7@=Y4o]<Rms3%r/LgC;$]ETlG+%`oeO6+9I8@Pi='01j0\AEAUKtjLC2E6/"eHHB.,u+h>?j"@p(p33AcIK"!]$cd>&f:\3RZ\%R&HR_C9%iK#tmg;ehj7nto&g7S"d%#R$.CG!Xgg_F+6p@@5*:B<S,%N(pEeNaBGGM/Af<:3rV4P;L'm6GoFKLBc!E*G-:&'OA/sQO<"?lZT0Y8..0b6%#h-OEKL,L4W!/%pU@;!Q<<(CA$`X>;S>#QFZk)j`b+djYUnpl51-2E9md]W"_Z*FeE"b\I+nrWg:Ocp@j16`lN0@VEDrg<-h"e:q"_t@Lu]5I$+-sk%fW+1B=C8'Sk^$Z]_tqgOms3u@K1PIT]l8.S%s=tHegs`pG23V$Z"`9G0,lH#2SXY>_(WogfZ!,K-O\VHTUd4BX$8EKn/rqB"?+aI%g8f9VI*g]rHS7bs__7kKh@8/OE$L[Um=j397Vk[K_SmOp"FrUoS5qIPq\J?Ddga2h('(jh=1Bf[e:^cHdl1)=k-7ojGqq99n*2gi%Ea%4h^=F>Bb>'pYTr>"]"ESi->Z5cRbkFMgGILf\E2U$njA$;cnbFdjgVtKQmiPH9D/$k._V^sO\hQ?m.;9ipCX2c?5ka;SLn8d0%Q."Zd]PXo.a/qen0[lQK?t7XtYp[O4Q<'mq0bPN`=Zc'TZ,+l.>Sd56d*)5cUBjtepa6nT^Ka2UT>a6Cj?C1,^@6T=lDl-iCNDc0%Ai]ag[;YB7jlPX7;H6ck?E2U=k7sm#\kmK'0m)7aFOl8Afjj4YSe6(cP8=fukL-=F60B"83,K(pG6FHS/N@)GSSP,KJrYuik),l(%NhBmW"m:`9o8]L8L_cL1L<_l4:@h;Q4,2%m*/PA95RcJe_R2eYl'fT(0m"0eogAp';R13LS^en:,OE\"e]$&DhE;M8p[fRg=aC)s%5KE/T?D)Nlh8EjD-HtZ^qc(!r^Q-<bJ<o'`[AePqh9Ykfb#X:Wg$rU2ZE_E,(:?;s;7Sf@_#jGm=jHe))Y<R<$8t)B^\C4B"Wj9d%BsN29_3"Z]*@C%WP&o]ZTB42t,fc!,>9oPBcs/82o2;jH%c'7&I0-@m*#3?m<tI].Nm8c4l-75N6c3,Ak-S4+d!dQn9A?.J_/<:L%aJfW$8BD_82Qt(:KAG>M//BhZ0A+NTk4^lT0Y&JP`kr[I<D@nl&8]K%c+ldU#AVKJK!k2&oP@PX-WBPO4S`8":Sm[rDWqdE>$lSu%GG1NR`3cPtPSU%KUCC+?)Pe^@3LS1*%>Q@r-EUmC)PX(F,#B(&VE_>#ei\+6QRFOT;R4>oj[T]:j*M[@pqR.-Z`Dc?pRL7<elec5%4&Dqm&<)YuD7@=4]R8Y`/fd88h<3,A#<mAPT?kIb;oS:[/=9?K"7)M<NVN_09L2gjp+qW;)Y8fpR1<`pV\_-sbjOpa`ur@s0P33?%dL.BRN_Z5D2Hej%*Xa7:mX#3+Z:c3'EjT'I`66i&E,NJ.E#^)Eam/#:=81m,!+esXpjA=>dB;s'en&L'#$1\?DXhRQB?9mRNC#a-%V@&TXAVMO,7Qbc6f+9mujU0)U,)0@M&_OhUM@:1FX_4i?kjXa?E'TT\J3l0eb0-&7<Z]ng@\8FJUAu_:V.A4>V_VI9W_,ZWndCPc%Euk"2-l3J*H?nlS+R"\AZ/d*i!M3?T`Y/ffZ[!,,Ni,J?Nf=0t4kWd\>Y2^q1<p7Q7XmFcefs,XP*MJ`G;0Uj"h2QtH)ClRMXphi%IWrj+aCbGu+\@TraE.oK7:n_:20!1P[M$A"6dPP?eV:uP/Ma3;h`74]+p12r@d`(n_8FW3ZcLdn"V8Xp>@]Drc0cY>*0KM*T/WT8%`lZMenThk-3Iud'!&nH)q,;;V08[oKYhVGuKk4?#nK>^>;,Aohc^;Y1MZnA]KVIJo9l=ek7\(c*cWOaJ%MXX5T@$5jfjBc0D@W/e%8K$RR-=%FXU'5u*lDA`nSa]Ip\2ni#P:>MVfKIMC;V9km"G?$q0<&D^Y:3\%\`s3V>dM&E6^eN?Ql@%dMlU@9K&YaV]*RQiWUl.*%S,3,hRH!0P]q@)(DUIun1OH&q'bBKdTt8$a\-5;/qKNlQh?`Bb`&1%I*:"'1.o>d2jN]\k4Ikfq;(Wu0&SGut4Ij_L!=Od?$TU\p%/N=fsY)Bh2ldTg!$](n)%F/V9JUJ`9.6I-?OY$\16pbCD-T]_&Vlpo>!h<A<a"#mJp4W'VkLM"!1;F2LBud59:C@Voa%/9J+08Y=%ERpU"I,KE5ReIi<:B&PK^N_BKb-.@Yq_G8N.X<8cI^\Nbq?@V<OGG=1Zms;cR_8@KBB;,B0iuuf[0_8$#&1^a^pP=^aP\7[""*F1%/].SB.qrY1AZ3)4/])f$\fpHc7#*k\VWI)TI62GfN8JJcG,r"C[RM+-h1eAHHnKU5<N,SHeG@UiHN6Du"Pt^c,5#i9&ZKu4Le.L;%HQa!#r).8Q&ZO.&66]=4Sb`(7[^(^F</b,kFq(fAHHj:0%i:&BV5[BT)$,)WZYs-(YCjBPTe-u(OcM(V'JAI>CG.jcc=pT#*sss5%h9q08T.$GlHK@8_E6K=jpRXJ6>bQ*M<eWaN$Kl(E$g)U;qkj[/ZJ5^-A4M*Q4%N%l,J6GdS%)XHjpT_DWS]3l/;aH:aOo,n8AJ@^%N7fg$T)*EBN(1i1[K&fW?FTMM/'g1lGt'Id_9H$OZG5>Wl%)Ii`G'ZQ7J7q9fu'LJp)WeXj[p$?#/?%G]QB*.Ktg+.O#Hf)Z@$p6%MW0QX=-;QZo/a1+?-)$7F"CIOUlJbm/p%&Ve$c%=h@C""DK2rd]>^9A^d:mM7d3%QYunHQSIO1OHL0[kemPu>qo\#]9@R,BQWJjr%;Y;?tg*q;JgSNBcZ6_&:1;`Iu/(cEt]6B-nC)`_tA$JSSR;%A]"hR3p4[Qq:p+Db.D8C,be?l>VbBnV`GO'[d&?lDC@(/qW[8X7)%]^HSD(]DJ2^:SMkpZT!(D:gnW^;otn\Eqp`jO\GG`XTUQYE9m-g>:d//E)1T&HKm24Vhtk$rlY2=`l2aX9t8V95!"A!%e]#Y<Plr%lbkMR#bq14-+tR6[LLd1G3n[<CQi/P=$,J$@#Lemh4crOBM[M4?-Mp(f:M_:c$#^0GG'?@B^tce+PQ-J?]oI3C%>"6J*W9l96/K`%iQg&@()%-K[eXY8qKsBIoC2(8JtDl]O`MP8_n0i9O,X8_TD^CMfob_"cH*Ti0"'BiNsi[.\;t.a=!0W1<mSPld!8f@B8WRU`==\P%1nBgO5co!`N2?u-5KoYFFA=_[gNm!f1n@Prh2IJW*mo()[Wk;<qmiHc(pk,qf'31=q4d,DRe"*7A>X%OfllFjUZn;oBsbQoJ^JR7%[XUd(?ViSM;_22shk$gAl'uSWg'd7"">ib.S^Zqg[fmQd:$6sT]#\PGVcZ"CgZI[UVR(n3EO51%U?S2$;^Y6,I*m%2o/HK^e@a1N%eu$m(I=G,AFO%2RU8-rS@r/;]3bq[2+u(FiLU$*=l(!c2gg;\*24Dgi!U:9%aCmW4=?>`F[)coAVpc9ZUpPqk3^<"S1!t+"-R4P,%VXrPL()'F*KFC3d?W].U'/Gr=pB="73Q9FW]uN(H!k9sA'gVJ@Z,Hj%3B^8SH^c6fi)<HiTj)SCUl.7iX0[H>.:(0q?Ce-=&I_IL%0AG4Nj:Wj>4T+d'^k7f#/O7-,lId1+.nICJlW-f.YLhm;#?.s["T&Q,2:Za@!m/ED_MuHXi$g`Nb;A'KdX`$4Pb3n7,<E2I7$DN>%5*e5-[4KXZmXiH[\b\sdpKRk8a_,t_cL#a7b<pJ0%aDXDbq5)/:a"QqDU1N=FHDmXRC`I&b]njk"afCWc_<rO\skDu_/<-BH0?l2%(F"KKLM-$Gm$l<gGC^6b?sd#Z*HU.cY)X87B@/qIOGa_[D#pn(7tH%BFS^*;XP^OD"RnSHThh%qdE_k9/<DKGmr'W>'4L+``">,G%cp'!3QkL?H-PqT%"2:uSRoGV,'$k?gF1<13jh(gmo<SXEZ//:WW8qG/%dFKlAH##C6]p%$\S2KA4jDu-EAtc0QN\@_5W`<(J^`9_%fM95k?(G.R4hIqhGul,*AMTG)+]?rWQCToL/?m^dA"J7ZheHsOYkD;o3D6ZG_`Vf?`5Vl#6N/#,87UQBH6?h>ls6cm]]qPOdc\;F%:ESlVaWk(bF7>jrd_sshW$a\tArB?n=kjC>2iE("nA[PO+m@Xpm7m7M[<ptE@W$1;[,U?#3DDU,h\&3/RJ4+(qC%p%S\us!iit'H%s$2<Q:3](uRTtT/jr_YU_u`1'$[4GAdf#0;WL'==$[4D@><V'UG92m-o.36R^+cPZ13Ye\ie`9#PW*MCOoA88grn(9Kfa'T;LnP(%R9mDpHLDU+\?cFk#'@5V.FcYj:C@Kqnqn<Q19d'O$5*^c$5Qae0?s/^\f(=BH=+B$/Fq3MZCIo^\K^Fb@a249&TP:A^tLl>UQ`;B%k223r]l<Zf-B6%#j4brOCSlJ3cg^9V_O)[@CG8lU`d7dq@b9&rkRJNNj<'P+mhE]NmUCaaQn3l;pG(Nm9kj4Y*lbRqr>!+Rcpqs)%<[BTr'4=fEG_GD>8U$e(YC%?a'u]0LJL>@`HL/#f$&0]LFdb!2?bu5[3%5]Y%nY9d,%=f8pW]tt`9s>m3ou9AJc4q/<4^4^n&'ib%9naEg=H)SCd.M.RWF_Gpg>+mUC7KBo>OXNFh+96bo>05Qr1fk^@pB$[+,Vb#iOiW)9n?tJ53Y-%Vp3'JE%hhm.p@bcU%3`=IFf=V%p[u398MnkN(t_n6d=#a!=BR@*Dq,&`p<=5=2Al#4!P:NITkV;NQ@o^dje9;_<S)K*_>#VL*e]m4&j@s"4PBE<S,;Mtd_hj31O%`h%CT"E1Wun6@/n<-YYO[IP%C]*%?LP*5Y:R*iCIHrsq+ER_TKW!ekP%Th(o]).0('d6(Q&9G\*\+ZZ!hkaB93!I8%N`o&RO7En<e/^%.Z[^WieEVCVmYU?X_XhMC+T,@e1&-/[M;A\L#F&U\TU"NhX!X84,rSiVlj1K0'H>9F9'B@D'Iu9a(E@Iq_$u:`gs8J3A\B)]DVQ&%Ee!6+UAUk8S[M7%Ls3&S:$C(Y19h>B3isHIea^GG+W25)5ds>I1l-S!/:cbkTEhmMf;^_BPE1F9j&J2Hf.'j`6;\8dVK/eZ%rA6U%(\BIUg$94aecm)/P4V`IG-,eU3r@)OjXFK949E=LD>O5OTn(u@RQ?a$60QF>kV`&.oU$4-Ts%7<d&=QJ0.lL9$'+YW]\1kAD`U4X%h!N&/J])oJR\@PRko4DL<t:R*^/Sp+`2mmS<2R6eekP:V8<1>/fV$59!:r)]jG(PPkLPoPSFSe<gg+XrgW(e%\-<j]!*tVdVmt?I%6ikSFct%Pp0ac:j_G5ULQ-(rR@X_KR`R@I1OF>@<1r<%[mCWhArTH?\LT+>kV'Ea59>PKJ%M/kP?TN2AljCEfr1C1!,0O`a%q;iN%@a&Faq8rBuccXlLN5=Qe7npYY,e4d.T]lO"m-e*$nLRo$nXb@NA$"Ob\`\JHah#7b..6gL"H^VT+L1'(H<NIY.%lj_]7k8\?>:OT%J::94qotaQo)=gpp]g!d-AFg:\'fjek51%]7!,P4@t)#31`5hDjU"+AgWAQ))"W/OB,Z_S"JebF$Tgt9'P"I=!="Ma%!W;>COfM@%e^N>94\-8pcko$[4aFUe5dmmu$m9W/i=&S66"9n7?=o6"A4X[<_mK9V:)a?R1^4NRAWA1STJ:tj5j/Ju%?0TjJYj[<(^9+3dUWb/%F'a.P4K:h4aqs\=[eV!+1WT&6+6Bh5(&lFPI,6N^/a?1sN#D-t:_rOK?RRra'e]J_5._QtcTKA5qEFI:+6<n"IcXgqo!)4!"A3fB%^O$Y`I\FS!YPQLl2jF$=hn5(V_;=hmE];MGn+rG>>JT&kY4)3]jejs,]7.1K?bkJo:@J%)>D4%SnJU3VF.+9@]:ih^f?^(P(\+Z#%[qCM7\XN7u5L2m'W1Qd5W.OL:Wa@/8NBu1p>sIeO=l6EQrEVW'a,>0C`;*\'mf?./W6Y+>hrHW!YPQKb?Q&A'&%B0DB6r1UqrTP+%lC7ZV5Hg(7rX+!T`4LKTB&RHAT^mE\cWeqBnq*Ip?,)50%a1o%F1oU1$bD">hW#"AY+PHhILCI_0Bq:b-tk]YT1j2`:pEHbcMXj&%Uo;DLlGpQ_0\<pchQQd\GBQ\$SoPj5R70L0hDN?cIbq:))3h3a>gN2JT=;_G)3Hu;]7*6IQK+@7pKYuBY+IWSOiA1,Y+PHhIZ&K4%cgPs8k^.^Kh;VkWa#AM'KDV]udm\>f^[('27-s8W48ld?hN,,WT;r..lfYR/CTmTZ+-kt%(ekR?SL"&c+8NY:kC)3'H&Ha(GPs)F%T"&6T`qT8*FOG,VO)OI0FP'[nk'i@EO=opAHc+pVIT&DK2\D05kIZ2E>JT=#I`/+jJ9Uta:atR/rMGTIRn:hDUp1foolGlr[H]bj%D)0u@RlBamfXlUKhW(+">sIdZrMFt'DoO21/%;$nf5H[WGkP-%UR+!uop^nc@UJeL]B*k_GQ#21]<&Wsm-jdr4$$NHUU.`$k7ihd%WpQDP_?GdAdbaYdfktNCR*WBn_=brrhXrZAQfG,qZ[*/9ht?T8#j);P3T'N$((?&n\q##'K'^SM^[#MMjM\*JG'RoTGQ#2QJT]`B%]^P\#_q;WjqO'/(FF`Bm>s$lSIbpQH7hk+f"(KBdY>1TEOu.A#:"pI24?dTU8q#K2A;F[G\l[a)GV!KGa*V%CU4o'4)NC/_2_[8T%-$.aD9O<Q.]0h`8!@%`I^=4`Kpsbe]WkGDYN#16ZD!be'>DEAGIs33?m4=Mo+cN>Q:L'OD#Ee5R`+fDa6'8RArNAb<qn%sBh"e&t%[Pfc\'%a7X*`o=gB=Q*.C4iQ.?'Mm7YBA(>/sI&oHuSoh*9Od&n]@?0eM$@U6r^\^K@VVu1]7+-DRiW6]7&?RF*FV<)#'E1M0%#3%95!&'bP_\?H7=la2t;?VHTR'i$jM>VAha/5gDl1Jmd4E[RZ@p0EiUT">`NbS_ItOOC@7_]T.1q0\'L,-OnI8grV9'7ZX&N]?e#Wf%^ODnM91n>'[bPag%jY`Zm/?gq]X=n4>"6NR^3'3@VM'];'rom;;/Sg>6J?^GE6CfoU<O(&0-(NWSFee(.R$DI'9Lp0Jf@,pA8Okf%N:CiSD<iL.@l[70>fV^6NVA8]EG^c;(6=>XoqQNJe]poO_r[6O4%?AB[/P5t<ta9`djHbHI>qW.iWWDoc+T91r_VK:;j4Z_A6hC"%(.*q%9RA9G1irD"nM".+`4&L<:c+?XXPI@0D)nn"c=\?Cptd'h*C^YX9;`VMH\r]QO]4V_7Zo.nqiUR/b:qB@n%;-=eM6W4+b>#^%KjQM'S#'.K_rI\%pGS'W"0u7YHe"!mP)!sWI6RK&\HC`,IhT5]bPWof8SrH9l&7SSQHkSaa:r.<[r6C0C@'"*F.FCg^D$AuU&Ec&%V+<9:.4sL\d[C.g0WHsYIOeYm52Zd=hXRghFEdHf>[X@@JF;LXAd1>KSa?QD;-tbhLSB)q.:m)t`Q+HR4l[YpAq97@=jStMGU)5P%-7mm51:?Ll1X58(B>7J>10N8=ekYTT%JW]$_cHI]!UVGYL$.Fh(c!^hnl+>WM87I/4gXNW+sK?W22OcQ6,lr`HE8O!_E;edj#f#k%1RQnfZOC$'P@W^-T/WS!FZMONo-Z86EqLYDh.o:Uo%#SY-D6!5LW_e"RqR('H[17#cT\5KRJPM"`b0M_VRfci^)<5.)/AR<JlQ&u%m8`%lNtn3s::(gpcIel:<Cr,=_u,4OY>t>JeEcZk;gXrG7Wm#jl6TrN()#_>FBjgm*ukRVp?T"R?4V2#(j_`!YP5@;U*p==c#r".%9h$B)pNqpM5<an@[jRci]UAL1!Mt\V!G:Z20'_>_&ns\%g7M$d@Z#![nFJi=ec'jRoPZB0[CsKWH+]n<o@"CF7OUm8?6\BEoel_j%,eT]GNfpYLGM3[VAdVM\Z5J9&\?Qq00Z[q/Ch='i*TG*ljYb0;rA/(E@t1=6Z\ejGBrVPW"T#YGE6EC0iaGd#=sqB8X9n>ea#?Ct%N\hpIhGriO\B%q'a>.5c3DVaJ5WA!,FcD%C9,XFnH:e1pfM7mANuSAB&kFUN;%1%63]h`-2/-<uAt2RL^jgHX6q`DT:'&W_`DBQb%AK?\GQlK^j$mWbn?CFXmA3P:/JF;MDb2n/5DJ.+I><NH'=48_P;1@6<p/8BBVcF;A#SVr-Vf=IP7.pmTq:b@:=rUme07i_AJh&#M%X*,#n=0&2HF'783r#M:O7^3Dd+soJ@G2o&R_X%2_(K\*>%l5g5ZHRa0m(F['(L9=YD3jDfZ!)XV55:t7[`$_kfsA"D'][QE\t1t(%ZlX+"`5^$i7jEA.j(V/Ile$ZJ&3,NF"]d4,R.6KQ_cjGT,R;e?`1mLm=n6/5-CnL1H+1L6Pah!3(($BkTD0k#5tGmNW,g[,Gh@JT%dYPnXpXr.+![S4mVl)PQ@6+q)Z<PGXhYRP674%.?6ghka*TZt,:l0-k*+'JYA?Y,V^.J3hAdI(dK6/s5>=`=(,8IHh1O4FJF<ZuH%F=La>_P6OCpMjooU;D?67Z*X0UE`UI:FQ:7"@6Gn1/\_mVd%2l`Ae*\Y[/GSUfN0lF>=SrfZ&\Q":mH')Y49J%Pk3<?ditDa;pQB%"ej]`O,-%#-nDG1Y#"h'Ion%f6bi?RYVWgK,<pPrOIheH?Ygd?`RWPJ2jL$N:5JL<r+qGkG[6+(`8,iDp1FQ&ZIrppi%%3aJO)mI%+O*l9es,qSZ'dW+qCH.4kS1tce&iho1s`-c)t5RC9*LbP+um7GiZ;`(loGrlOBYc[:tCp-g.eIf]QSHo1k"8"&sn\MS;XGM'qf(\%p3F4:\+jc1h#]M+eP#7dL"k`o!2K[O@F;[$Au?YM_k)[j0U6:/`^<b94j]nnA*pFgaK"$r1*aTaaAT"AV!2@*nCDW@%W*D-2A'(d%[OS]i&uClL$A"+Kg5%KF5r@bYUb47dm+/[YZs+R[[X7?,@L):K\5]S"bpGDm8^>s,\A(6](_*i]+m]$f[C.FGi'q)L[@%Y/2kP>V%J'1Etp6):R*0LNEGFPIDcbihKbC9tD?0cWDYu3-V5qg7&7)fBmGScCGUhQZbZP+%MQ6pM3d=l=US'1Zbh0N@.bdRa]-^VU-Z/)<j%O=ofk;@Tr,[*9M`cc\:WWko?^pp@&:_=;lr=OqWcRo>7D,h^^%<fA,g\'W4ncfq:p)o,CH9!;blL!tRMD.9)C'hV>"*aT^4pr/t8%r,cPDi'%j_+sFcFiFsFKlU][d)'kFfRkHf0X;=:<jT\I.!(pjcYeIss@CPm@2\F&^8C0EJ0%cjrie[_2j.gPl&Bp'CZQBV__O(j)%#8r`0mj#M>Kq_sOI!?h`!/t?qZ1jO,?S6Gn4i]hHNc%;BS4Lc.JTrS(D\MF;)@/bpRn*Zf&T/%'[F;TFL62h##M2rn:X;*2P9L!:%ZOMQY-7W4%jCU)m'Dtg(9K%ukgX\8jCs(;!>b@TN=RT"79?t^hP"DPUoXiV)@3Xe7K7tLO(pjLkF6$jm^hegR(U9@Y7"+gR$:Dgu%YX?fg_r0\9&`eD.,Td.&*buuLkRD'hc,DPFWZ@@@(sB"M-!.\;k.,po>Xu$*QjH)%[Sb^k/<cS/1"_"$JIi_-8uA"!"QBOdK/%Q_%#ri@='pU>0Gn+=:Y!ZkR,L!^X1LcFdH!f8h.4&X@K,n+%1a1)dFbD$H,J.F%)[87(_nltBH:!acP9PYgZQmf9\:hY&B4=@X-e"`(%mgY,=c=1G8F<^igAq07u_c8V@"`g8F.Z-uY'T(]PPpGq5<n>OOTO(GVnb*&J@0+3L&0l@Ih6qX[f8A'9ihgi0JBRPk#,iLj_[`2I%]PWSH=gu/:=BDFukbQhAU;eDl*tf;eCJ!l_Iuo;@V!^I%Wf74SbS.K"jKua@aY-n`T#sP.OXneF[eG@6[bo9?M6#t5DQNZTY7=Vh%A0t$0iR(8VZ1]a?[F/3GkZHX!q.2._PMD4U`Crm8D(`E-a#jLVosjrXA#/EY<i;scWUCYV@s.*o1,YGLL/"OB/EXqL7e:WoJXBs[%WHY^d0#!M3pk,tKEaWK8*M>jkmc+LIGm'UbOE;"mh%/n4$#dMG:j`uOc(6kPQa\?\<,TlUp)h:#6HOq(R$*FAG<!0-&[OKq^.[5M%o4;8nNZi;#K2o&/_jP[e@@"ecgO"D;]H.^&easYWif]O$N.VR#(2LnEpY,V,iRkER-Y(mm_Wt-r$B!n7K!4!XQ@PDV<Zu<cIiJ=b%kEaKIq[d$P1?.^rJp8%qOa(ZH\Cs-d9@\+]qr\D,m@O"b]>?%h\npgBna&`2hbUEl\W9h[OLE6LdZ50MGHmHJSY,;d]MsP[)"kdi%:0apV>ll%r7,]`'[KjK.T2S+hqQ4r5j%Chm3I+qoKXXRM7U1l@$FU'oG#/b0NI-4PY'n9+:(1eTfDH*S'E/GE`h^Q[\A_j[I='+$%?]//g3\=^+c3G#s$Kf#/aI7Q6%*@nH`o4-K:0/QD6ac<(*]h+^i_uB14rX3W2m=+h?+1_Ls!,c+jEQ;7?Wid)A,MJ3/Y$A,m;@EC%7i901Q5IX2/?/V17F.`QDjJh)"6mjqB5*RBZ8^MWV8CLBAp80W]3QQ^-eqjB^Gf6;O4B$OKHd7JgtP!d@_l0J6iHg6FbB+2$n*Hf%bI!GF+r1@p$+S:DOj0,,**ULRgR7J#K$.KK/0s[NO'aP'4lV%?@jjBH@^B=G9?DchA*L'-k'?qkffqJbdlI-!\9gB=:l\#jr2hUg%GFl=*Rq@p]rf0r)c9<X,]^"N;>h[ok"doWhpU>F<Tp.,2B0TT9?la&/N-0)1fJRXq1tMc]2<b,A]3`QeGs#]'H^jBt!H$l<\9&GD%%=kZM'&^1h[<le:ZD*l;VN]C&o'S""nl"J200+TenH[gi)3EBcC^KXTXZX#_hs2=tn)ujfemiqpYm4`e'r+L+-EaM0U<,5?bP9_7%_2gW\e'B<Zb5fh:H:/7Xck"\eri1BqD@<Y=obtPLS/9<aSK0u>iu-.-!\fptOLpe,"H_9tK6BdHr)mP*-93/*=ltgaMcn@+*B;8R%L;WN^Yt%5_4qUpl'ORqC]K96R-eEI#qN#@'k-1WN)AiaF=6`G6E?Zjq7G%]>EZ>EK=Z[0H-0Z1=S5cG6QfIdWn.6DhMj:r^9foPN%MJ>Z81A+V_bCYP/PL75$Vq,2u^:UjgXI#YD3aYa"c]@PP`HH]u/<seRC"FTOfB+r<1`dmBgLhD2NOO+l)2qEg*F'QEfRr9C\qG-(%?I)hO"tn]`Xitg7\g(9on+Z&Jd?,a/V*5e(6sQ/LA;$()cBfSG`b\d_W*-p99Ts_AR,sDRR=e(kD=R'JT+`Tp\g*H1O_>_H;W&]W%*BD2-lUM,##Dh^3?l_2CrM4QVUn-TUHJZPs(j(84FO1qi/#O)IKbIOMqk#o4][runMnjP)g2^VEWebFTRG0%^:g5p9<F9h@4b)Z=%T'6,PilYlp&C4KpRBKq7O#r4fALkq(;Ro^Uip,Ihggh:Q0qE%V,"H+XnW5u#^5M&CbT\<DO;4ASJ.0SO^pA0*$si7#d>?hM&j%D3%]=VDMFXC^XLh-4#lP<q".&P)fI_lP`iG]i2:M3Ld$:P&q;KF?de99fG8m)iWlIeCm,"9d.r)BZ+'rb#oW`#\l?dCV6C(BncDH!/E%c>QdW>h(2?68FPs">lu+:l0l(m+';"@O`BJ'_U%O(8F62G7h?";%uI79@r@STno"VB9U#&%eE?.%HH%OV8F*3*T,=o*\pmNJkEZ1%7lc_9oV-Pbm[RZ`T3u!(![S*be2c//&uA;FiYsDc4X$DW*6]hU+<T(oR0?5>le6&0LaPk!KV&]AO%ia*S8&H-252D]/EOOBX]a:1%2%EO^SV:*.cNkUSKlK9JM!>U#r`n1,hEMHO/]-M-DDDPH(!ic8&ZH:cM!9gk,_Y7'doO>-lt&;)^K!C$\PBIM=CuigQ+5Ke(`oA6%MRKqlc)Ud>cUp2VN3$&u3'=Jg3W"$7NajDW0bgU=c&'?T12'KY?aIW]l,"qA[olKt7+S/S\Sdf$DQGnD=nY0fg!R=5^7%Ac\t2[_%]A$LBX>e6%Lgl?2c*Zt\<hrAW(Ub#*Q@Z^0e>>rS]9n5FKs@B90<H`P69HP?aWkPt?K.j#O@`]blRre"%PF_[UgkcIAT/i3li+3a%<)9u&X1GSoI"sYh]aI7$ak876CV/mi%!^a(K63//d$Rpg\r%h]`&DmofDSHq)JEl6d![BJcY$8g'AqRLl2R4Tk-A"4[$LLsA1h(q%;-?*ECL?BTe3F[C]bI>&ciAi@1XXEVT]%A)0C-Jq2jVonjW>7FM"!b//VAp6gOgC2^r4su-cHlG]V#[#/]$a8GOR+;>+?_!1oHO`%%_Gqs>m2+5VV$>o5mAd+[03CDJrK2BpO#R"^r_qgY4/k0!rY>dL7uq'bpgOm0(VEB=Zgf3"D^kR07*bV#!\8>V"oK&)[@m,lUo;J%R8f#""#t2SB"gI)!nq7B3>ZPmN<AUi[*GlhEVokXB(b[.FKG*eI(Q<WaCE`)P'IULNq\,4181Yk0XF;9`j!NdDpnM]()cLM`8[NZ%DNTe%BTXJ7^1NT)Eu#X@_,.J[E07R'iTVO<1*ePN\+AoDR40^CUYS=7Mi8Os,:&,iKY(KPV24p/%f_!*;q8hYp#<4o_&_#B"+6's%SNgnK1%'Ve2T>``S&Z@5D`-\h#mjOZ19J<Tk=^d:9t@pi:k\E"Yem<4g_lAcb3@!(NnMQ(a=)lsmV%7Q7HOc%4jgh<D*:lWSBF4P%iGT'4iU(J$\5)o2=OY\6Fj)JF.M^mLBB>e<%,-rYcC/>]A6poENMh)WS2B3)oK$bkbXn"A>4$Xe[$[&S:t5BDBe^u0+N#%/9d%M*%YI:d7`LJdLVq#Zt9jT2A)oJ<r9iOVpc^K[%CV]_%TI3G\+*0V]>0KPOZX+WtRMKtm7!d8+RU@(s[Ts$(Fp+RLH/gM%?!h>0mMcQ^%0<Uma<JB&%GbQp_<55G%VVmS7/^o$L*scf%b8\?<f\'BO!F``BFBPPj$c"pm'8?VSg3j,MU"rXKL4d2I;]K]$aD`hbHi*as^q'/$%]S9T\Jt-W2H&]).#N.K#[`1Sqg@OePbo=fKXpr#jCHpFBLY!BP2>Wn[Hh!QlOZ0Jk/QY^1g:R:Ad*?FZm<"U0UQ&"u!1Ue\ESi#.%\_.B/Mr0Z*L!=!*`jBP/A?uJ[I,_&mFL'!G,#+L29(od+_ch2@:MtRKj.5+Tip'h>fYFQg*%'B5Pn!QQQ\.PfkDo>,*CCqNh.XR6%/X4:OS)!!"diQ^)A3Qjq_;M-j3rEYiHHE#R9K^GN]lp3=iH#`aYII"rdI<lOOSP[-gj3L2g4-LNA1pbn1?'f3%^K$s4!8l":!'&#%P@7CY4NOr\:$_C!9iP#23lpG-Wu&m1`@+HLLT4c_\XZZ6g>080].-OVe7Uka-;"r35@Z^n?:@loZG_1HY%:IE]"kY3.X,"pEn?h;%5E,2"[^YCPq_2=le1>8;>CJ+/j_!W(C7@LjL^p$GQ7jKT;?7o?238R$CQcI*2_gTjf6Fu.n!8(<fD<a/*PC_^C\X_AR4ghjq/+aC%2e,5:mU>7Y(B_3;\3]!nFTaQV3gH^1`Q[.%E1lMieoN1DH^&6p/dp\(D.aeuVTp6\rfln$hfAh-mkVsSlUN@K.^0j#pOO>6MJ8^i%784GT("MWo=QVc_-CfSF$p1`P'5WlM\2j`86Deli9$VL04mC_]k6uaI2SBD6k/GXaG`CaapU-iC9YeZmq(ASue!kkb#g1kGNGe"R%FIFAcL-Bok\YS-i\A0icHYGgbaXlf@B=iP$Dg0)Gf2+-a)-li:\`PrT#j$^3W\2p$#X\G\_'>E?,kD)Y'"_,)jD<"ghQq%soZ_+W%Aig0m$1P<cd_I*Ts17?'o?=O/Rk)Qg[]=f9ib"BnQqNN\DOUG^euV^)s4e>=>=V17LKRDQn5@,?Z1-<$k*)W;B^@X"9K_qAg<J^p%E1#,eF`11(F1YnTZ7Gt,3D=%7mi\394Fo!PG5EC7L=_OAZ\&H'"Q2.a6RQ3X;"E+e#JkZpfo^mk*WWB8D!schk;CibO]c"S=obc%%<ca_;B.=-LNRrQY0e9GQ'NZg<"!O6S&e?Z.a;IN2=c,B[-gstnkfkC)A.O[sqBeXiWTBSEX'B/tQ;uO3d45^&OPTB2ZZ&i8A(X((%:K``YV*[7;A.&O)#<]hP]\Gb`W!j$]rZSN`K6C/u^%pig8FS2Hej7ldXIjBt5'kdq.ro+XD79iRoEDf-a$np'pBAFSDDL5:Q?!D>%d/C]J[b7`0-GB'&(f[5jSr(Si.[>"K:,&NeFJP>INJ;c5ceq?XTPcUL]aVp(o,_d+kA+j,SAfT11sTtqZ0bf5_2SZ^AL9ncc&H?4%//,gYL>2tQe<.a#geH`s_ao2kL<46-E2U3u;m;3=a:b-+mk_I[[W&p15)%i8:XcoZ#N.XfhtSJS=WH%M&["JQ=&XCnYaqf_;V"R3%P,oYCG1k+0bm(D:l4+CB:#+a10S%j<C/HObXu1?[E9A%pa?lfpCo;)\q@[bFrZ9rV^t8dSFuE0hg+tUj$(J.fHA!%.^_tR1._tkg%j\?Ot=1pR3D,Sih)<Q'r5KIGU<W4E4J!eJWBm`s24bM"T^"EhN5W,+IT%/fK(n8o[1,@P,e8E)2S#Q>>M*#")KPTK(MPLE^)8]gP%`LFiOR=oaYc9,nI\Ae!@[r?sQ(DH?$r)_cCZeA<WRF]Y)-q!C^4<U>XHB;#O??lBs/cnA_C%9,AY9GnF5(T;pqQ(7_N=b"GY!Q<U%`2C_-R.XtI8fc$q\L+7]78H>SCKBfH@/@//;/7g\n8@+WC>LYef2k#J1lW#:j?^4X=];n<nnVnr\ur=#=1"@3W7DWJq^n"Rp?Bn$%3_d<;dRM37.I."dqaLHi8h%bbUPi2SRMT![\)gXs2R`7:4nC/XB0>'1D^2[F>:D[q?hX,NA*1('[X1gXl+n:eF)<SHgm*d\)n0M3%Wof#B07^j-!Mgb%pSHHd30YKtg>03F)hD[sm-Unt^lmGk2(t'_K9WOnNn4^nK(J"Z]eYp,iq#eQh,&@kB]@?bg+9=q0"pINLp*W7%g+BN>#>(pd1)CI*:?4ah:%]h3;>SF9cSQ.Wdhki=n%(7/p.>t)F.$I<-D%?tmFgppgi*`NKQ!]jgekh*?0L.m]6&s,lS"K#j,Nr%%IdcL.BFrT2H*uFpbP1$BF(HseN-rAcB9PnLs,GKGoqbl=K<BL//$\FPNWqnXF[3ZTPPG,+;b8F7SUg^pUsZEm)r#DUYW8N3Mj8eW%!cqp*F/AKSVkfq24j)pWJ9F;9orp<X"@+#[TN>L0QHiQkX07;ir'S/u;VGpW6m*Zarb;,5ar:Zc0R5lsY#I4qE-*,\$Q/X[1ZC4)%MH5p2\ua`E:"\V;qnjoTS.Xk-URg:iP3]jHZ[0!]>s_bQp,.q?SWe\GD("."aDg_I&W.c&Bu88JNtItLm$B^1i`b*=fT(aK$2/W0%L"pNgWni51lYg;j8YPX'G!`a0_PcL7?6XkSQfGM83#f4g>MX6RZl."#%X@uMg[%oFWd:fHHW9Dj`Z;HK$?(SRKr`Y<6!c1ENF#Nm%e*B]aEm0XM"\`,XlpCplacN*4Ps:Meci3LsG.mgi4m^h?c+(9uNHZHHipe)NX[rB^;#qQ7"^,ackt#9rEJ=-0QQmsI7%e2$ltJKG%e3Fi3A%)!=Q$TM)Ed&_Z9ME#[ltjEQP5WkI]d%*uPMb9/936J$dVWRbl]EEIqUOuMG([$0aeoo7(&&qH18+='l53eI^V9.]akN-h%!.T27M5BK1`b!JcGe<Q-N-b.C&oY1%,,t"L0>(b#5qtE8P>5Dm7@f6RA,LE&U?6o"2T@tj/V^"Dme=c17=*MY$etCtfG;_aipll;%gD72'r&-CT)=bY7KYAC9-ou^5_7*$BXE3,I(UI,9$`_fj\X9MI&@bt'97qTa'2FUd"E8S5Y/s($@qRU54Cd*G(#t9pj>HgsA:4.*%J^(:Kfo3i%-P[^McQh_iET_TaTUT3qQ'O83Go1uWCLic"h3gB#&Z6Gg1N-9,+aIk?g0WiC5K3^6P9e1WA9.0m,>C,S<cTENF;&,M%EI(`NkWPf]VMT/_@W:t2d@FO4jY5Clh:YQe+<Mo;:&KadYoEe>bh_]RhL5f+bF99fS?\:LN,IVeF@bhFeol)nK`Yu]V1Us[^VXqY%nY6AJT,2i"ATp.U]-;Lr$\HK12,dfn4T,H"U$2,M"C'/q!aQ@r`k6#h#bM$I@+LQX$u!)=6p3..%Rm;1+uh=M"i97DX!t4XT)O=L%mn<#;Y6^a!Jme12`o'o$-`4U#(tZs<<s2<K6*PVLC[`j+D+t.H^iiFaTIYVl^E@d\.b4T$"A]P\Gtho?.tX\6+P:^/B##pKB=s+E%at&(A^E>MO`RPW'"AaM5YiXm0R@9M8_`2!84T,H"qSh"6>S1d/&bprcj-n1@Xp>Ls%-FS8))&.anq(8IMlZfZ#hI0&^E>KINHnih%)hdO%?]OQ%7I]pc"T)KDl3Tgc!cbmnh;aCNJAYd):+/0X0W)H)R*aKM<s2<K61FN5UC53.@Bf.?JZ]9Mrds(-/k6_0#WGKp"IhJn%n10+(0*p.$dkTY.C3Q-?)Iq8R`pRoFFu<dsrD*d<-^&(H&:#`7l__(fdYok'm=?;k0Z80l.@Tt9Af@F%`KjVTjh2B,q)hW5m^FOG%Ci-k"qX2P`VdVu*_6d@3/I(65o\IS\Z?:'[VNI!Q1Hr94N!t`gYe>i^O$572U2HbR=;CQVh(UT^CdrmV-h5]j/Y6u>>'N8YN0AKY%O&buLQY>3&#4j$)$bc:[Uu[Gu+Yg1IW!#Xadiscf$/<#KLd99Fp<UfUXkC_S'<bW_WX7]S7bqs=^+KV!/>r80q^Pc@.e+<<]ZVmS%CZ:n)6QNqekSi?q>3)4O$prA.cAcpLa?;IleE%kQGSSVu>C82#:i@\+$1W$,7j%LH6RkEJIiI#=*MmYIr-6"m:/sWkEMaV8bO$67%q_inLTa027Gl:Y>-@EtgKM7k[IGD^U+4DJt%F;"6>5*/e8_Y$;iqHgBlp%dO8%rgu^NDd`-,]$BDN*\>pq6m9=..X>cl]VrRFWj.%EP`g'=0W"LJ'MAc0W\8XQtA%!eaWV*KJl1p4@FLtFIVUt;CEH;PUgl5mUH:n[A\P_]#XKYeNo!%e,ME&%mP,-Ql#=%6'gJbN2akd%Tbo3tk2YE1:deVGKu'_CC5c?0DLM"uGQX/t:QB?'b2J=6/c,ld2o@A#L3nX&O;5f7X&ji@28k1VnGiI%i8Y4Gp^D-\!0Ht7r&B?_%hiRK6YS98-5<X)H-C2CT$(MjpAL6+<AVD-"egB:MS,hG#fDJ*Z5=4[GW-]EAdeTCMY!I9h@4n+'[WsKQ_R+"-^']^[PSQ\N8,oFK%8pNFfc/uB<rKj+V6e5Zg@oH+SBW<3;dXnQ3BKu,OOdFOC(B&.3-t55MAC2KF*qj:gch\):6^j>U5_0J1FN!7*;9'$U'h<XP9FDKr%Kd]S+B5C_.=A`\P1*Ik!Z8ic#P.1'XZ]/=.&U&&ZR:;)A#UA6Z/AN/aPJs@$7*^KBGVY1)Zp;dp=1t@MFIVR1l0kZMDt(78HS]1[%j:J$RAgeUY`P_Fo;mae2[68#(_?/I)IG5s(mnBLhc]H*,dN!(t@7<c2q&CO`/diAcb8X"c#BVSS&gl]1=WS2$=M$g7*&NlBEoBIn%P6@#78=H'l@3J_SU517GRcfeE+@XLIH'4=hGZ%70F!<H_F$^eB3Y-pt2"Ueo$X!P<bp5hoNm$TW2'so99p17lC_foZBKK!g,UnL[%Z9U^-eluHKIL;jqEAAPkQkQ_(4:IP9a^@+XO$G1V7E5U,$J76Ij3<G5FuCp$:`iX,*+U3679PcsKhi(:=X*P0Bn7'8P*V:WCg9PQ%MOYn?8e*h6":]=SZA\pb`of/aoX$MJ'?$un<m7BdNg",`0CgAWQ?_+f?50cDZ?\W,d]tXR!M:UX^]Z*QQRrMq9X/@YEG<36X[Ho6%$KdGqASq@NACM7QCn@GZ&e'p36kEml,*;?d=efPkJCT/u7#j4Tg*A7GB17A3'I9V*!PsXr1/F-0bS7k*+GcgF,:uP;%9l`9S3k:`%b*(X;R/iV!")q*b>qqlbOWErn9K6_kk_t^>$3s-JKp-(7(5P;.<sUgEZkQ#5.BJ(?+^G8OkHZ@!7kP38On&Q+VEE2B"@*#9.Qk&m%CeM&g\Opi\jhkYm!Ac*d*XENBU^(3?nn&d`41`Q70L:If+QMG01(OMHirSAS]L9aFpd!O5Rc"@'Y!n$l$!ECl@#6KgXG.S6d?U'[%"IUB*aQD_DA939L-3YiTPI,X>)GI+]n.`uB<[#r;j_=`t%Moj*(paD$,g0,4iHTo_?'`Pee&`#UgW9jba_(.169sX1NY5JYQWM8.%<q<cA+GJF?6tT!@5!g];PT+4G;@:tobT'1dE`n6XQ`Nd$&+bZ0'<DIsX:SE"GRdMO,qqe87AP1*os?P`M"!]&.Cb%nBaTY2BMkR1%$rN/;3>?@o35J`mPf[#qREr0,?mh4o"8NN(lism(TIh3s6%J(#ACEZLfs)mcZFIW1Z@LOTLaFlgOFWOG#m_,b,&jdYABOT\&ZDm-%dc;r,P@4f/:D"0/*2PitR'igPZZNr9dmOX.fK-34)U78RKII$,,Gd[+cUrJ>.0V/p/BY=G8J4T%V(Ch+aXXY=XO\rU%:D42gt!So%Q^7h9)OtV;d9tsnmEh"C.ToXV3.No&\BIL$bYu/ng-Wh:?Db%<q[+o$ja#PmiB/ASjodJoee:H&.FfbZ]Y`?:nq<'f*]Z8"?6GaR%TG$mo3/+,8dG5:2aEli&IUGmt)*.,.S>,E=1+aeE*(?H\Ppd8%;@lMc!(3X^Te&HP(IYMpf7h5aJZ:-/_"9&ohgl(JH!Z[B'Nti?%7T487&5&VG,^lL3\L9IRR=&>6/<*$2+Q+AR$BHO15a!ZI1eH9@jA87=6;!gpjRo53Pm$;9igDPefV0_GcrP\B,XJa.,\geA!=`Wi%Gm7U5*jE=^`ZtRZ93J,#atSFu#g,Jq+A,7loTVksNjT9Z->K7cUuZe1bB1JB'P7Y,B`P/"9'+.4$YD8`>ab^UJtuD!D-dnTk_b]U%n%b0h2RFIER0dtK11r0_C'74u+XHQ77eh73OL7]N^9A:qj8]s\]KfU+01iSd_?VL[NARrcOd<?pOc#Q_rHso+.Ue4A4"7@07#E,V%d=KY="*f_pGS2]M8p4AFX_3a+$pks`-&Yra`lk#>.EA5\0QULM;@4]e8`P[r@KY'$MkUq[i*`9EKpj!RUBJ^#3%EESmYu<_]@/Za%\miU*5"Bi]/j7@jM1c+**3[Fo&HV/3R1]g/G7'EN,ij(8TP.dF:`W>"$.u#8NZg]cbXnLU5Yn&<,Z0jZAI&lV/&9R]cc54iSoEG[%PrRK8SeGfY\nB-hqdegX`4jfih!-G&$:@;o#;T:=RiC"c3N>f[3^.%pcuL#AK5#.0nkJEP@rPiI9bRZ1Z>7!G^^?M=iFE9MEaA#T%7_XdX`6<G2N#9*aGpKoJ/,_b&?XBCGSm>`.\HTF,T@RZU3YoeA+>nrt'^%d)kua-W+TeoA.+A;s&lCsT;&5=F.IjV_M7R$?#[nY@%+bc_SXb)miOls&9^r5SiRk1A.jGaIn:(^#SO<6brKf"mtM>AV%563*i$!CDcr^@CS'OEIlTGjVWcBVm4!BG4)WP$FUHPAbdQ1C_0%!JX"B&K+n!Biu$l(/[D85U'UrQHP3%MZo7@c:]AK%#-9oJUjHpb8l''MO5b>'(VtUM7AJcLbrLL;XXRNpLQFP-.d9H;#cV1"Dkn(%`B;dK'Jr&V!?#P_(*FG`45$J_<09M2[\^b5?@.PM2bP.%DnS-B+"D?n3AIVfZ)8EK^P":g@(mj?JFj!g#sC_W@<53R:d7V0&njl(%T)o-+4_ZpPSf,Y^#u^=rN)Wi2J1;lhTJjEhOb0pb#b-0Y22H6?qO2GrnYlR.jZU`'&CS/(=.6f\.!CeTZIDieK"e'3H0cIVeL<s3%60]Qj,pV,FAn^[i1_l,]`D:6/7WHX4*C)V1Lq1Q=-7nXo@!9%6F]kceJH>dqNVFD\Par.ud]q%rCW>!>66lXVQYR"l>-b/41#fS2%PUMXIN:^273MPRYp<?h_bp8`9SOJ).3+'O=gLB=fBB8C58SU6f<&*Mbr.ghhjlu(Jg$(9!AWmjTdMYNV-O[YbBmJ>n*34;J5_9r7%H&0R7>u^VgQr=A;XiU,\Rd6Q^9ns6T"&Y1h!.S\s*j")E!Up_"2KOXdaBrH!XDkm("$0JJb83b'']!g4BaTnL:Bb`[Mb*i!KHYY1%%YP28KbQr:A41$;E>'#FPuOlFE91438iOi[cE%*d"WlIJOcgiDUd=74nFg!>/ePZTL&_\!/Qc<M!3-+P?KW3)8PEFN4(Yp&(%k55%WN'c+\@ZFMNX-fN!oeg@_X[I+J^H"LRfs'3r'&=K`);kaaM8"GX;h=?V]i._#g$6,gUh$f,-83a/7E.=P)bRV)'elrbA:B?1GY)/%"[?cgljT"Z8d`8g:K9;<732:6WW&>QLa_>d50%2aZ]V1Nm4==Z]X,ic7/Z8mgd;L<[ZW\e\S2J/'V-dP"DfGf%QN![bBosDJ<W'3%7)SC"9?*3)n?ua\eX25#B&=TL<!BH;*CFN_82uB=iPNX"0%8VCg<=j)3HnQDQjen33D!]%L#n\5OQ0p&V?.GZ+@$WMAMMsG_^`MA%KI&$KFA\1A=U/"4V>;TWr2h/TbKpGFW<+nE8#bU*Vo7CVo[h(:J1\3]?Wi[&RqW."RR.R[k:?[)ARLV@JZ1>SKbL2KOXfrh&X7tX%GeP9JE?p7-b.*RGdir1H+k19p-RDXp>@+XZca't7K>!hm$FB>_98uH(ilV_rg>L%GH%s1'WJlGqhW:`f\Ok'.7"_Z,2q"V(Q[g[J%.:Sje)^.?A&B)L98K6rr!h:UE[&$oP<-bURV9%/PDZi*.aBLg(IQc0Oa9ko28Zu'TiB.k+oc0+3kojR^WQ>$D1.o5rksfD3mL>%r%b6X1mKNX%mY9KlY1#\-,9:0''-a%uaSRg^gk\;/W[^CcrD*gWube@%\RX?DL=]*5rReZO`g6it4g3*6-B'M/sA>+lJm.I73V)Op<%X2n`qPrWOn6$$X`W)oS)jB<(cG#caq5U<<TY;sOH@P4Tq'tO_a,=EL-,XE`J3#bZ=YU"5RLjF=UL6incHV9N:m.du.5I5OnhZj2i%)!.9bNd'qpI7)<BE"f;I-otA.Um3Q#dukLoVAi\]M)pic/jpPN:Z0lBI4Ho"E%G@0j3Fu<_\#E*p!"=WmN-.VN@H3SP=_PB(ISmm%FAqscIO&o,,kUG$_INP"Da.'76Yt>$_YO@.jR12!9c82e9ru=2%ZWk*9l^8l]M_!JH+NJVWQr>9(ZYkeHMnD*$I<D!S5PG(-g!`q%MVp@1O?I_)D$AboHN!>7^'!I%1%j!+`H"64L9b_K"cs?4$kcSo-`/?&b"N=k_t5:G(>*s.8.4`n,Zp@f))XufH.[/Q4%\s/lMG0D%bu&AeWm9l#<*&sB8ohl6Ekpr1@KKn?=l@JmjEu6ZSZf),8&TiV?^H#N)o>:akc\)^-!Ehi<r>56Y#*U[-Kd!#5r(HAoPXqhR5p5#%<jnl44@SLbpNP%&N,)mc&M/@db`R55(bRR6Sm&ao;rfX1J2?B-3-/D/@*Y8&:O0:[UoS,ue:&*Q;<ZjIFXD3_6MnWYc(<!P9LtUL%N5sG59V,p,?X+FP%GhUcFkAA:+E\uiHr6e,TT8d;"B(\)1O5Xrc4M-bbW%4ri.s,N5[[>ZED!mDM`>QM+ANjrL^X/B1ABgbHP!c4%_46?eVodY<r[#Ku_Uq,r$lPsoNC62'CcsRqX42Skg*6*#S>6X>2^r9NZep.q4<Gnaf%cEQKccD]5:%=<#s3\3du+NkBk;iMDj!?H%c1[='SfLu26&](np229?6IlNH8Y'DbMuG:D<2!OTh5W]F/,jl02I9:BbUF*j9.OA\^*6(q*gn6sB\psQ0GK?Wi:&).#MQNn-cBf3%B[cYXg9f+U[a;-)Bg73X#Dmd<]U?9p7_s?.RCN[fDm:pXYapM\B'nZ,JAV[TE9tCeB\69#NI^uqFEQ8*F4!GD*&h.p<YtpEMh:%1%Vtr]<0F,7_?;+a#.gq;]PPckF[20OhFl_lono[OV]-,<#lj'FHNe!+M4+pQ+X0Z@dXr)ob<lG<PEnLt>jcLV:;WP'Y5[[6CE?;cu%^m6o.KNpTn;R'"n9lBn/:Y'U8)?i^IYqDmf#[Fe$W1rr'jrCCG&(J+rr;7tr)e[:n,KbJErgbeG:Kl5d;sX%P8R!0j$CuKH7cRcn%p%2c!1=kdo)JK[@BpD;Z(MihVgZstY?I-5S97&k,VT>H*J\[`jj-3YOJMqFCLt]8acJ-mQYE?tP-cA/4OjW9$<$Y4i5[6tXaoS3m%I#$apD("%n4ClDb&Eei]kC=4YV)Tc-eO>ud-kN;9%`F'MI?d4?4(7PkM2[1Cs6+&S&/II\SGVHL@6a8a?R`0u'?2!L0>\D`KIIH<%dp`Ag>$57WRhQN(dd41T'70Ar7)lj4m-0@c7aB,@g3+UAZJDKshG,jJ%)UMb?0<['=1qMd#;P?\E9=eMj5a0_0ioGpgYV;,o(St\%J`l,Mh@4U'9P7<t)B3<!K_:C+YN7k4R)LtqMmEH%1iCU%XK_rS'KM[4i1,'IJMXDZE99k%;7neK/-L^!4ZB5-DFf+`>,-NtX-\`#%"Ti?/f5#CZ3S*i<)=N(^:LOc5^F#j'`gHp[1G-U,o?&]2Zq5g)D0Fhgo^'-QNH[bDPL:H4j2:u5ldUsq@:a<Dp5nX'%9\fHCq"?7%`5Ft?G.AWR(gdb4?X?Fa9.LBtH':RVYK[QXIA(<"bB:H:_Od@g.'h;^18dBFY0?SNP-<I!,BGHGHo&eJ^+\U_3Qro`R+#N73NqdY%:7Drbdq/jI6I3A8b2_;Sp\^gWQA[s;FUj()[b8j<WN2jZbZA'L:p9[uB_9I/GrT9_3T/D40nDBflqhnp'Tu)Bm'tPmHM1@e*q+iq%V^4O4SimL@Q%pZp/U,ZKnbGdk4Yg($[=lcEZ#[Go;rfX05[[9DEQ5YsM_T'H@&uIA"("-;B&_k,;"jP"7lmOiKfKC@p"aa(a*16_%`8RrVPqAn/Bj/ObEl<cT^kqYl!c_CH+O4.)dRr6WCW1S5NC0>)p37t'4Yc2`jI2LXQi_9@GL_Jir3d&$fkhbF#N+*P;5VF.9S#I^%XnP1o(M2<r^mR)BY!Mfd!WSQZO*<tFo9(0E_s7pBs#ht7pK;CR8t#DX"^Lf1Y>dO-4I:>1Y&_GtF2/[b@KL%C=^]IC'Tu%+<i+i^%ob.u[mt7k-,Wi50]B;o>gBHJ>/re`K*7t?rAR,+pE<Y/>q^+su6^@e)/1nkUnB*AhEg\jf?W_p:?SIj31=bo$k^%EH"3\#u@t=15%5ZiOUBt'SA4P)s-Nb^Z7SA["8HmOXdF:dR$!8_!3-.&Mh"kpUT+cW:WNm#_G?XFu$nQq#uHBNmsCZi3`;rCjM]bPq&%H\IHH!PdY%M&+p]*gfme0W.0D:5a*i]X!GVD,R$%RsckUc``btGX'tH/'.h`I<Kd_N^-]u)n;j;@]WBH2e..E9jhdc>^WjR0]n0Gk(*3TM[>>V%AUuRS;FhjgHUI)SZR7([h@F2D:3'a=QELX:jr=ZME8,9(o#-UHE#"c#.h=8pEln,h:6EGa!eE?``]<S3!d!4o&CP@#iu7RSfiL^c%]H?F1Qfp];YJgtA#7-jijjJ@EOmgtJi!^E9?CW=p(E,83jD^t]j@kF;S7uONBA0/KZY\5?q7C989m"#id[liikT=FiEH4)O(?/qQ%PP3,[St&XFX'Cj0aQEX,B9!gA%TlM&1!YMT(-(n4`=u4a=)"h/4ZD'aDFf+P_P;TsF,Z#1"Ti$A=%uLAhcr$i]Ct]o-MYI(l\NSI%%UTPG^)jGG30dcs4^9jaRN5J&:X>W!np!*H4[&&Wj?"cF3=!F\>:qW>7)@4%%ibFcSaj3Jpt=gG!ca5;E=OsJ?Aqa%.LX0tMaE*#%N=O-_TjM.Ol1%N)H[aD<IQRq,cf+W.oQDmWhuc6r4p9F$j4_>"cZAFkA$^e)D[naF?;0:Z?FpqonaBlm``aB`BjtE6.jR76"`I10%G*L&>:jJ6G8rr3[HkRklSBJ]Jf+7,>qBe@)+4EUM0g0W9EPB)k^fPiG*\)*V6flLj[3)%-GW1jM4kYC)@cWmVG9CE-a1h8aYf;,_%'Cd+.f3T<k^02r,&S')eB?lDAbe6R]SL+Lf7@P='R\=A$,MDU)W-_jV"*`8@*5\ZWGY`=II_"+8lTlb.j^W0'$E)>4!Qfs2BBeqG%i[Ml-o?%,IhP=O6[+Sd6e[)/#45LK^cV&H>3qZc'B+BT&BU.ms/3`.i`p(RS4#klP^:.?(mNi$)\e+r2W>?4-HfK4<-M^Tslk#hD%SinsanU=#U:9jt6rjiI'!5VgZ%oG?,TC9[VIIkKAEo_"4Qkp8h#/p:W5^OB+E@/?(^m@"%TCQSa#Ne[gVu=\Ia87%HfuX_;fG6+u%4@!itp^787G&R,oL?*+@QQQBMrSqe/7cGCBiZ)psXH^M)D%@F%Sd%VFdB8B:ms]\=AB0$?mb,\lW+5h.V\'^Fn*cLe('IC2<B8n9%"qpEJc?OP8h\aqo@nD[tEt10N?At$[.WalAPPckJ[[2+/lmj>Dh@Xs-8pW`9c`qh)b^lG5q(%aI@s,en$0VN+%iZ>WqV(Kdel1!_%Pd(=85J<H"QrXt>o-X93hX"W[6I26ioQWlj4ZVbX[eJi#SBhf:r_E8%7GrhM4MKhnR9RXj5PS/KcV/RL"rM:P]63h3@>(/>%W/+,%rfjnF9=h_-r/A[CiU(@D%[:3rfRsui5Zk#MRXFMI8MbJ^5%t3bpu=j\@u;8K'F:5b-d=th(MDHt^mR)BE#*cnb]Lle,40+/N]s^O%&KQl6=AQuWBC_e70rB>X5&rQMIdlnj7BMms;dPV3b1QfsVl(AAj&C1]4&*#Y::%'u]4]G`GJ#0KSs&M,WI=PQjI[Y.pq#qC6l5E]%O*&Vb:Mc+u_P[`2/BAEubCMpF(),oS@m72@?d9N-*S:_tH<.?3h9biU<(FuQ?UbEPm/a<#APb2C72$]6E$+K@CN8FL`X=7e<BT',%&eHAW!7p%+N,`kf43X6Bq,?-d0BqcTo913`Lq9L^4/db"g:X@_+Ac/"(UuNo=A>n]1=p-NA-]L6'U._]3Qro`R+#N7'<gb3Y1@b0%Vi;2)KmnH0AB0%*mRaC<12.*VHD7><BK+,QpHSgfL%Or[p$t-NWUI.P;G7u,@uZgN*'eghIb-c<16dPjPEU-X@h5+G>=!J2SsSP`%+)F)#_,2OPHmHr;-OnatGhX57dSkM1>+5D@[4D3#JA^*+HjjQhf!M<iR^^=Oo/8[I=1=cni-6ofI7'1gdsj9bm1!-X5KNjM?c68H%lk,;ha/]%>q8dMJ.)q#M_uCCJDHChg%JL7&`5YlSM:LG(V/?P7R7")<jDTJR$a9PRl3DOqYGos"HL\gfPJ?NZr9a/3/Sa)()p=-r%djN,'@!0]X=K7=B9Js`_9+chSn!@Ie//uhoYN@k`j3M<F7`oV^ZimLtXZ6<?H:p)6\Q-P/=9,d52N7B$ZrHPJkogoB>,e)E`T,_C%[1LpM"7^t_1Ks&c8`U?(Mb7Z>4Kbd<[!/EqCgA`'Sj,i^V+Q,VHD5+UVOrV5U*k3m+%n+^*\#@AW*Z"$_KF/>RQ,68,CI+.\rUbp%->Eq1,^I)oDS`fZ;;NFa\oaRg3F%S6'5*Fe16t*>IZ15A(YB$4po=69X;ls,4a1WI][/\7c%-i&W<!I#aJJkieg,=cE.]h30*,,;%eVrMa7iHHbP4kVX_gsMgiKeM03;GT<)`lXH67P/L$k-Jk#(&5L4ZgHb/.RhY,ticA[>dsM"2dW374?kXe4E>6I/CBmH2MAlYYn>;%((=PXVs2q)3TFB??$lhsfB+si'!TG=4ql/e^b.9X16p'j%W7P$*hS]%L:DnK%Busnij1$-BJIZsBG3'<e$;g,L?Bu2O^]_S1Y.Fk%1k$1KO91mch(V<A0L6g#P]pUEEoQO<""HYT9c1sr&H0gK-!4!b!&-59(qkdl)?Nqu1+5sMkM<_=S-f[)e=GYOIV9$^B_$[NhJ"_;%!2A(Scg&[F$7Wg,5c#p:;lu1]9%/<4>`XhE&o[&PO3C[gj[IW[N_h%<V7=1XJYZ,)1]sW4)=T]ZK;_'iC7k&+ll\R$dkjK/.0s,E%KhMe0dLjRS0p:=((L3DK+)0=".,Yi4&]Z>r0G,da[XGSD@;;Qo<RZm?WtOOl!O4<Z.g1']CSKC;Ylpt;6<DMgbDc&,ik+-i1C*kT%dIka6aONh`71L@AF]0eI=Xm9#eXEie7t"D&HJ9;.UZQ=-Z5$@,;2;qBo68\r`Fl0kCQ.Nn(qCq;Wo8hRp?c.[\cu2t?k6um(uHqY%e:5H84]Z=F9E:QM0t/FDqLTVL('drGX[UFO(m"Kt@),<69=/f"<NO"VMo]!tA#b9IZ)krE%4kuq3NHYG"`'I@^+_J3O'!_,EFJ@I%<kmsf@aD3c9`C!ne`?OgAoGAp2C+K0;)$(IXGa)N50Z?q,>\^ufha0kcpn6d3"/[?Q!UC@%V=HMO#"ssaJl*.ETJ;]ct0"&<YV7=%2SH.YWM2joqI>TW#_c?"qfn3,EjGI`RipS7JU@YV9EXQ@9kP=NRk>E`-V79g9rkkH;dAXWI[*$cd<CGr[$%IfZ)KBMk=Y.HJ!MTY%q`;Q5bu$VhcdjH&@qp[O99/?CFi1e7MMa6u<2V8q7.jR%m4PnX.]>AkBO5H_lECb5hlSc0[TAZ\@G8+5&IVMNZnPJT*$Q/qXXd;Z%46lH!E04LeWZP'cl"qaKcXY?F=:uNOR^I9.Mc2^EO3DjT9Yds^Bbh*diqm>>V$!$G)\3^hP2A'Z@VRoS;9+$jYe\[$%;_=I7'&"_%R`,Ih1XAn,m(iC<@dj@M9H8c]Wk&k;#5:/F9ADT8/TrcooZY">^jpc#JLU>b!i,0p"m4&I$NoHRgDNM*mD<hS$[AJa4[g/-pEtTD%\_e8-dJ_N:YjTOQ\TW0ULqgR@@@F_'*2\q3fjWUF4!(8sH0o#U]5o'+]>Xb9.<qd&P_Y#.6-4B8&X8E5-p_Qm-khi7LHIj/H>%DB%V+4?JV0\qKHIp'>TU\/]$VK3l]:eNdf[-l.*[Cs%iPB'/0-53>4644lYZE!(Fh;g+>rR6V,^(s]6>*X%+i8Dt)^98\c?I2Z7f42V%p%AQCKq("LZh85gojV&6WJ>t.0BM<1VO(Y;BH'`T`h>Yt"Y"tXOTWoSc.E_h'F6W%)k?Q*\Rh',>23BrFn4/oj4QiQgrWl6Iu'XA%mG$?8+$MbdRX)]Y&(2V?aAP`5#G7FhAm#?))^pYFCm!m-0?f8Nfb%b3-<S/jJAXo&0(#.n813bWd5n/[f+/+.<LJ^i];(OtJ\i\5%-dQq'WGlNt'.G'7Q[AfdbI5,bm0D&q1j^(W29/?0l'Wh#K_[$!S8_E>(ip*U_aaj6[9mMQ1`H;d1%UfW#Ra3QY:W'0K[R`<ptfK3%PQWu]9J\jMgRG)K+N'!gng[",$4@!r&Dm&Xg1YFGUm-ca%&uiSa"U43e=j?&2`OQ:jsX1ia.D?<Pps;=j%eD[aapj2a?/YF_XYd'%Rd6u8-'g.;,AfCTpkf:b8^#QE7SL6;(n5;K1^]`o+V-*L,k!(j:DK6GK;s5'(em<$4U;k$]XtX@oCO9bO+XsH,Z,,cp6Gh+[4JbK%S6*fBi'JHlQ\?.WT[Di*]Qk*G0m]%a5dXNV4^kCI@EI&g8!kXOE$&RA;T5fX1')dA%qA3H3<Ii4_pHnd6%[:m,K@<-j:YgRAfPYn%<C"ZLZA5\6d+CH_TueSVa?Z'D2)ZLUb>SaUG\ZX_;_VAiq_J;K0S./-Mp0(dP1MDI#a($`mIQHn,p+(im>O$:"W[%Raaf^D6#DGk%"QtMm]1,AmOA[>nJj`X1.1BmO>e%N/<*U%G(R^I!@4'Jn$=\#)mk^h!gfoqgS6<qud_mVT##b1ei?0m>1R1=Z#%#T67QAd-%#112%:h5[MN#G%"Qs?@4iK,Ii9B0"I;W3FhWP\Pm0ffZC;UI=X7T=IEpTS:LFVH$RP8`C%`JN,rbRsYJYa)6K`(a(H=>]60%=ftqMMm)[%^(`X_EZ@P*!6Ft/cL)MV@"YBB0dsj4F&^!F!0_jO!sOX9mU4*cDU<u[#(sr5a#h<q1<+Oq*s2k/I'=Lu/Rt.`_&`uM8$q"eQ;k">%XQFh=#\mm&S2tV]gpih/j]cV(PDA@dX)#"u*#N'2b#hN<TOrSiPu.j9g5O7nH*_%6N=_Vm>d[`U8Z4$mr@O$hI)q"/R6`U\dBkr6%K&D`VI0gfK);foZ";:,S]4+'Fi<FW97KjbD+hKU?,/C<-+jY/F5RUb!eKu%UbZT(oklcZO,TE037"s7=O[GM_L^s2!\7+AqTu<!?%:/_]02Kk9UBo3$sFX%b;'FlflW!()X!R27N2[+rOVlNX^U4YqtcV4Ut#cn^XE`8KaUYobir<gX*D:?B._>%K:TWd\.'NNNG;#7ds%HHGeDs.GcCZP1,60,3aZ0`DQ.YWE+&GEH^@fd@7K0.R6;,gD%D[0,!G[*G`s0R@G'lNsY/8]$j[APA;%ArSg_Z&</q6jS<Wk\&J;%Z*pA?E'`b>`)k3]#Z\D'&Xq]C8nbO-18/LGncT0P1C?gd#N^?ET+tIPIk6P=qe]aUh7j>mm=&H)$MP?hoXJ6GUs/e`+H>fe*hd_#%2TW>=]jVD\HQ;1*]?t%^\[rmET"F)mNk5*/k-DVp@Es3Z&9NP[%7,bOF:hK3#9cAZH*@o\QNoB6`Hgqd<1sOg6"P?r'i_4=>sSX@%E-=(Ga)F><H`S"t^W2#D5^;W4%#N#l_;KPh)@VhMXMKF4C`<dgLk3elL/?RJk)$%m\q\#TN,XU!h,`EQ]SP&r5BMNqK*\o[=b]L'%qcU/'b7V9V$4dt\O9^OCa"[b@X.*TC]a"`SGq!6)J$/!9!>XY"ol_gdN+gQI9QDGtFS/^6+6#rTS_mg2NUq$<m"\`JO)!AB`l\$#%d4_`GX$[SbfP:5JMs]L'O^>@T.M>o]V.IbN@)GRuk;keqB%RrIMiYE8eZgg&P(9+S^-1"ZSZ4:h`iQ4ZCT/h+Z\f8UZ>Kf<.:3W>%jJ.n.*3rN4WI;oV0'_R64;'Db+.qJGh`c0]!c&gp>PK\A7_ba6#&f73(StoV*<Rj5Lb&7"!AN=,b*`=:-`L;+Eq1\gJLjCT!=HDX%=IX^X$1b;5_@k1;g,9"(gf/=kC9qa[,ZVD_>fC;s>k=Ouof6eg\W^H8796q#Dkt&m`$Q-oEjG$4LMu7^Zoosc_"gCZNVi;-6*IqW%hL3j@KkSh<C@'eJ2en]C%TmY4go+=0l%7/,FVJAh5msnJqbZ5<5s56a3c%p5D$!iQ'&S5uLno1NKTVrVZ*OF)f%gP?N3MmHJEiP6%"@/O0o8@Dl&q>FuUWJp6`l)`P<F^-uK&7$H(tku_o=8\l*`+A1fMnZq,tK25>5F=HZN-;uD&H!4g<EoSq_N@tSK\A]PNZ!Q`-W4@%Qu!+4nA[aQ4.EP6,&*O@1KG9'3\Tl04\gW:13mSAX$XW3.hW+rU95e8mHe)9"3B(0n5?kYKhXI9"&#UdU&`fU'M4?g@,DRj2[Q@j%XuUWbh(*!JE;>>,YY*k4=8Ceg06H^b'hg.d[X-B'-6+?A8_VU(COD7al1P+%-(JN(X$8.\5e(2h-6Un/=K_eLU3!Tj2l+3u_a+?+%o(f8s'("d)bN]fHY"GqE-e(?MqBSY8"T,hmp5.BZ8S:T&dZP_@q8uob,>hBU$!m8pi.cVb4!Z:K_CU;EdVU2X9err*Q.iT&j_W'M%;c,NIAo6BKJSbP$5_i/1egcP5V.iL%9`Q^^<5C?A!CaZ,Knq*,4?V9R]R>>FHeR5<!b+9R'\F2(<p3"J$>:Um4!Q`\_F];m(jDO7%!o!hDh76j^_`AY$c!sWoA&J#2'\K7s8ID^!pQ-(s4Y96VC/I*3:4,S>*:+pSo\Cr>r`)H^$><B+Ujt;t:'sPDY+u%7&7;DB9SlQq%/k4Og>'!3rfgh6^`^bi5\^KM'MTaVT!GC#'Ue<D7[5]oO!lU!r>:-]`)R!`6Bh8=@87(o94\@'2n8Putf`[fI_kDE2F<\L^0"O)[%'*_cbeic8VZ.Rf;gGTl;"N5VX7EIGbTe2O@S'Q';]?7G(HhdPsfY+`"bIVE7,#GVXMM<s)_lC30mJtd0^bRN3$ec!Yo;Y--BfTRe%Ou$q\bgKOh2*#t[aYW;kXLDg#5AO\8A;FjIeqf&;Rp\i/&4\fJq/aVq).>B8pjkZH(5rQO[B7%Fbik]299bf`il0h&$HS/C0,j$.%fV)._9DcOR8hcg2m6iiW,i74o@bodZ/7sf#'9X)/S'B.D>BYjlD<L#-%<^2)TLgEV;t(J\!Mdi,k##N^CoaIZ*m!0iMS=?a(hHpd%<_!@UD;d@%Vm\/p]\jS,j%NhLT7BpH$6T0s?sJ3Na&!"r9#5H+I3ol:Rt$2?pZMa#^WNiQ?W%`jJ)4ZHHqN7SU+=s[H\17QSsT8O%]R)s(;KHD(@RIN:]=\^)Z)0,OZYRdJWp@F^6:7F@l]f69L4H.q+d0Ft/DS.omauUD.CE9Ngr%2)[QKC8!j!ngX^34V:M>I'!]hg6%)&CeKB0jZa'oq3p-nM*D^9jFK(AWbmok9=0,hB`JJhR\1=A<QnC]P?<s"/&q^^LlE22qi[YQQb)UO_/ih?0ET+tOkt4THoMQ=Mke%H02mD9N\;J5eGV+Y9j_NGBQ[>g>R'\dI025Wu`OM@oE8"%Amdr6t>X6T0`5dA+PPpC6!QJ:VXSjnj<kBhd?BZ6[AL^Q[e(%!!<U5%'DY/H#il(g]n3caod,@k/78WQa+D24kM7e"kM>%:+bU%9VS<h6B;KFVM,k7;k@$C<P@&c1s8MCYHMOHT4"Z"HCcLuOhQ-#+^j^td%Hc-p$F>+^)@+G+q?i:$?hY\H;roAS+!W&fd-:jc^TntEZi!T^<_tIJ7r,k/9f_$LPjk`S)@\4(@TBoL"%E0\(]:XJgalb="2EY*'%]Ua>&#9CAt2!l>*4:4;:8;\R!f49-QT^+m^q7f5WTDY5"jG<1F.L"_B/ar9I7H9lp267Ze^+oY<@D/91S\ob<q7DCSY5N3]%[?'I%[&]J^_1RFhh[8'`I.><;Jp%H-G`p)4c[P^L3WK&%s74p2s%&@<ci35,n%S\pYC?$-QiA2CIJ`iP^\QD5^AA`CSV5tJ^A70"^].@;%rmQW]PFbQDOd^UlGQ7[(+9'G*;gA+9iE'GMg]($Fl^,98Z11h_9\+LVhO+oEarE`!b.A*=Y,FVJ)[L6EbY'%*n;Ph=0OMWJcuZjW%H'5F]Oc^-t8YQk@UT_Q'-!>K63:OrBgBlj+@6jVO`rRTOJTiNG.7Qe',#=&I?l+>E*+<5VNrI:UpQTG<CZgGiM!i+*b_7C['AtZ"%e2cA;#\5,ZNq\EI_BjJmit5[U=*T6H>R/1$8BGUXX@;%o^/t"Ifgc*%Gb5=<gl3T#8lH3=PXUWpo#cD,4$J[Qih[qZe)sHd8RUk8%b`:L7K^]agY-4$:p<)iD-7a-[1$'k@(C<M'A4;1'_t6+0jLc(d1kc)3l7TQ=/I$HtTY/9$!omr9I=Y<&J1iS7]F@Mp+g:6,M]`r3%M&4gsdG]Z7_`5`a+JL)+quVphEF06`5#tDBn<shtK(F)3"p?(gA;R-N.d*'E@!k3B8/j%CliV4T#FPRJmP9pfXi[%e8Wk:dbQEBL%4VlisX"46UFK*JbjWR4KBAC5Q=.F>m'D(l)P83dQ^\if`"\\5f$_k8Z/:2I$"0q&5I0jF1UgVS0\GBl'DprsmQ-LhB[Su3?aOEjh%1]bHtVHIDHkk-Z@>t_]cU]?dRS?5tX8]"U%J_]QW[[\]Xl5eWbac?d<;A#mGhH;gLQSB$nZ71eWjJ?fb.Vk(?a;OPeX7'9<Ge_5j%'_NL*+HXg&e8VL%<j&T8qm]JKB+qeC"/dfG&X#&B=$J]VLWbBRpoJg2gha4Cm(Lo7E(A2]N<n%)ee^%>c8h60l341D/PQgD)maiJ%AI?O-+pb\"N>Jp(E?-cYPa0iRa:EWP5:9\*(VI_XUROB/D"@T'J73)+d:5V52lSG6YQb?*8i<He=1?Rd^<l<^@iQSr]WlGW16Y6O%?at%uSQ)2Hjk.QekL,:6m*$tX3'W-r4-%C/*:SZ[Wjj$Rdc,nO<Usli3:;4V*k*bcTZDl4.Ru_51XPm/d7c*!44Qd$.T7>_LfH!h%5L2@u3HC;731Ii'YBfWJ[o=)6nlfdF+%3Ih)^EDAE%Hm>j-u.dTf"IY0e6:d[i.plMIU_l9bVBiqZds(U?+^$4Otie_1i,YG6&rW%hkuEPS_BDoKQ3J19Zn-F5IrHtnFb!f/l`]&kV(p#E:ul[RpA/Zh#YUJ$:sVYOBUrN<"P0H\/sX>"'eZhIDA:_5NIT$fud/q@k;cY%K?.CqOLZn)K9`jijh1/(&8dOm6c$(,%PJ%PrbLAU%G>oK=u=b_3K4eSHh@gCluG6Wg'EHJ\XW]\Ap<EWD9.m^Hct.h,-cfD<r7uN%$h7pJYVNMc9Q>Y?$od`59-e!"E%b@0&PoW2D.f$0]]Cd(hS1Mo%Dl&"#]e:M"=T[tl&iHf[[$Ke-JTc^T3F_Ug.6M81%luP75UY;%U<(lSq[/=`D,br#7ma^1_^(Y`$1*A2q5/sE_V8s1]!8DlK!n:NWiC@*ehml[F*n2fZQa-\rO*kPcIg&Y3>Clu0,egC?6u$2MCdL[%=d-SB`9B%DFjH1`E,fS^P(Vgt2aj)o,@<#D?PBU\a==3i)HM%hA!7`'Z$@.Tja[b<c!6_=1>f>_o6Q/)F=p(JM[Vh!7lF1M&dD24%@#rnJ(tsf3J_lj+f.WN*.q<T490Y+Gntj"<*tb`pM^$X>`>$+Qi6V_4%*+iR7XQn%38S1%ie&u'n\oHQ+8c5Ph'IgO^%iRro(OJI%cBH!r@rn7>I46+bnhFeK7tg.&CZYWFn'(n2iJ$Y`2P5M8>BgIO@)X=&]A5n1=9c&m5WUFu&AE)a#l>./6&'?>%@0A$\-kjDC).Ap%aGYXcCs\llg/SoHJFq-L3j?2:ArM^R5tW-ob^co*#)!uYGn@WTfuf&)2#?Be./5?@__l_"!-hq.hVoJZZ]p-!W*i+:DY%SP^&c2(%,U9Z<]PrD1VX2,ds#DtjCPWH'Db+"2@*])YB/T0^Q]4`OB*t.OX^0p>,adPK?3'03jYb#]#CmW$/o5KN(T`!s?t(FBCI<#[rciGP%KLSi!j<=MY*Y:MR;7_2XR2b#G5)?l'B:JWoF#9kG@h&Uof^?uVTeF8]>"dSb:'(tj]>B!4)Sq.&>Db8Ll@;AJ(P[*#/\H-[UUi'n%ai/.GFp(-o`#Up8D8(o_1W&li5]B+dW9dZu#U.L*G/;f_KimK#"Q>Oq5\.sJIQLP_^*7kQ3#k\7KnWid[pq'),]%Z>?E?S5NeVgG%jcLERBuj4.krS7sJG?jHR]g(cY*MrC=qZQ%J&,Cg*&&kKb!^,f@0P8@0Ek!:g(h\&,O:T\R0U@Fk%1-I[;8<WR3*u#;@@;[GU2YI%nI&a;9F2ulcnR:le4T&e+:nNh\o7*^?(:#/Qr]@T*OI<l)3LE2,o'QE%Y@[@^hc8lHYa)'`/PH8DM&&.Ys&_*N8b%LG<=I<I=KsC%U`3Df,2nEne58V2<YggnS\sTA_(H%Mb4=8NgGOQO0b>It;%S`-eL;\p^bpnFYa)8&8Q[KS%4h9sai4>n8TnQG=$[uMahSC;I3C'j%Y@!A5bp]g4J:('_"dG&.?"<C+D,A%U!MD0i%'Xn"+S@16jE#P]n^%\-b4&!6MCWZR+%78GAfkon">VI6nLg!DF$sVWLOX\7eI';3%-"5?l64/#+2VT+%GDYuu+@nHon-8BZ!['?PZW+&>Gq-WljUo<]o"o2.>A]rGXa@Wi6lPVpN+JUI:#[lMHm&>Vd^JliF/f:B@5#RA%G%h&fPa.D*_fa\iA7)?H6G$"XV7IPOmle(TD8h?m5*r8@q(VEK,9R]=$8X1gIteO%P"`G0Nkr]9B,R1ug\lZP[36RDEq2CP"+)-^%Tj<s,S3TEQ$dTn^FL6:Y`MWpcirSC8[/pqoAS&W^<+iK?+u#R3+gRoI+bGHm%fe3^&QEDgQV+h4-jdB@N,h-/UPEl#g]Q!Q0)D/L%HqcbjPb>-KQ@gJsJ@D&X-qMP7,9!$+-ZPK$J3Z*4#9l&>gNM)"%CpP9+frsF,#\[R$)%8ai,.e,L,i$1X3u$aGp&YCC(l,g1&tS`%I7W@bYuTmC:>@NI1DCnjbQj:)qWRh8.@^YT`-T(C-sMIO>19_aJ]Eu16BJF*EH9]2HFdkP-/Vm=cI7mFgnn<lp&JA(Irms4F"E/G%_@E(b$A`o;nsCXt;>;2p[S2.u&=$JhXWNiaEI!Sa]sR@r>=AuacG#Id]a6:cRB]q!^jtLg63T^dgOTGUfMRS[-`!ER%aLmaOqRn5%);-OV1h)ph&`0pnp<t_0gn%/R>=_8V!Dp0NB?Qft4l?>R`]I,H9O<=4i>_&]i)G4OiorD1QLQCf"3;e]+VDTV-*-BJ*.pO,dcH>O%:k4@9K\k?"C,k4J*&(8Lnm3M=.cdk@-0K)4O),hJ[%U6[U!>@n^@8]U#3Hu@f.RQ3/HPe=Y>J[<g8ZU_'0\npHf_7I2W0[p(YRr+%mJWQQG3&;u[eKBee*p>!HsnGE&ZtKo_ncmS@4Ik3&8K&E4nT]`qS=+n*jTs]Jf]9Z(XW/$\!)2TRrA;9.o"<cVXV`1s$_ecKDicX%)U;MOc#X`N,JsSqns)Oh6\.I#\#Lf/jWK=ca-nW,SUtf>(,k^eIMG.kg7n2#2>S$ZfX9<AJ,Wrm=b.TcaAGF<*&9Ok^A)#dW8Y)s%430]1n`A/?#paE>/!iLBj:LI@bE8.PZKCf`J[@n;LU>a4S;471lbaIIWc2?MlU@7P-66gCc9iBjmKK]N&Mea0\jmq(UUt$U@N5]E%)<S6`"hFPUD*c7U8`qO<p*o72F!>0kqKN1P>P%RGQtALK$4?7?mOa57T9W\.8fW"]P:OE.6b#W"U"h*<&b!u\9N"VW-;7b%&\-::%J&pC3"hj0Vo=n]W-[P[''CT<Y2V8J/dQST:&88r$VjVm9i=T<1!ghb:3Cogh0GBjQOGVM]cXlQ%a<0tBHU2S]-F3@N?`Hg5p@=:1%Aa/S_^MD#]Vq&'.oOi[Qi?pkgS,V=EnlNU$fsh"Xh=lEqV]UBYPQ1RJ0>ID]n%\g.T>(4%__6N2mJm"MjkF/@lIWfLp:&rX1]?Fs%Qf!;eS)=5AqsRj?o07a'It>rsp@qF4ns=k#=!.D`qo-im~>%AI9_PrivateDataEnd