%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bifurc.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Giacomo
%%CreationDate: 03.04.20
%%BoundingBox: 0 0 506 392
%%HiResBoundingBox: 0 0 505.2495 391.4795
%%CropBox: 0 0 505.2495 391.4795
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 5752 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0FFFA8FD78FFA8A852FFFFFF7DA8A8FD79FFA8A8FFA87DFD7BFF%7DFFFFFFA87DA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD09%FF7DFD05FF7DFD78FFA87D7DFFA8A87DFFFFFFA8FDECFFA8FD12FFA8FD11%FFA8FDDAFFA8FD12FFA8FDECFFA8FD12FFA8FD23FFA8FDC8FFA8FD12FFA8%FDECFFA8FD12FFA8FD11FFA8FD33FFCAB5B5CAFD7DFFB5FCFCCAFD22FFA8%FD12FFA8FD47FFB6FCFCC3FD7DFFC3FCFCBCFD20FFA8FD12FFA8FD23FFA8%FD25FFC3B08CB5CAFD7CFFCAB6FCB5CAFD1DFFA8FD12FFA8FD4BFFCABCFC%B0CAFD7DFFBCFCB0CAFD1BFFA8FD12FFA8FD11FFA8FD3CFFBCFCFCC3FD7D%FFBCFCB5CAFD19FFA8FD12FFA8FD50FFBCFCB0CAFD7DFFBCFCB5CAFD17FF%A8FD0EFF7DA8FFFFA8FD23FFA8FD2EFFBC8CB5CAFD24FFA8A952FD56FFBC%FCB5FD16FFA8FD0FFFA8FFFFA8FD53FFCAB5FCB6FD28FFA8FD54FFCAB5FC%BDFD14FFA8FD0DFFA8527DA8FFA8FD11FFA8FD43FFC3FCFCC3FD23FFA8FD%59FFC3FCFCFD13FFA8FD12FFA8FD57FFBCFCB5FD7EFFB5FCBCFD11FFA8FD%12FFA8FD23FFA8FD34FFCAFCFCC3FD7DFFC3FCB6FD10FFA8FFFFA8FFA8FD%0DFFA8FD5AFFB5FCC3FD11FF5252A87D7DFD67FFC3FCB0FD0FFFA87DA8A8%7D527DFD0CFFA8FD11FFA8FD49FFB5FC9AFD10FF52FFFF7D7DFD68FFCAFC%B5FD0EFFA87DA8FD10FFA8FD5CFFB5FCC3FD0EFFA87DA87DFD6BFFC3FCB5%FD0DFFA8FFFFA8A87D7D7DFD0BFFA8FD23FFA8FD39FFFCB0CAFD13FFA8FD%69FFBCFCCAFD0CFFA8A8FFFFFF52A8FD0CFFA8FD5DFFBCFCBCFD0DFF7D7D%FFFFFF7DFD6AFFCAFCBCFD0CFFA8FD0552A8FD0CFFA8FD11FFA8FD4BFFC3%FCB5FD10FFA87D7DFD6AFFCA8C94FD0CFFA8FD12FFA8FD5DFF7DF827FD7D%FF7DF852FD0CFFA8FD12FFA8FD23FFA8FD39FF52F852FD7DFF27F8A8FD0C%FFA8FD12FFA8FD5CFFA8F827FD17FFA8A8FFFFFFA87DFD5FFF27F87DFD0D%FFA8FD09FFA87DFFFFA87DFFFFFFA8FD11FFA8FD49FF52F8F8FD18FFA8A8%FFFFA87D7DFD5DFFA8F8F8A8FD0EFFA8FD09FFA87DFD04FF52A8FFA8FD11%FFA8FD47FFA827F852FD0FFFA8FD09FF7D7DFFA8A8A87DFD5BFFA827F852%FD10FFA8FD0AFFA8FFA8FFA8FFFFFFA8FD23FFA8FD33FF7DF8F827A8FD7A%FF7DF8F852FD12FFA8FD12FFA8FD55FF27F8F87DFD7AFF7DF8F8F8A8FD14%FFA8FD12FFA8FD11FFA8FD3FFF7D27F8F827FD79FFA82727F827A8FD17FF%A8FD12FFA8FD4DFF7D52F8F8277DFD77FFA87D2727F8527DFD1BFFA8FD12%FFA8FD23FFA8FD23FFA87D5227F827277DA8FD75FFA852522727277DA8FD%1FFFA8FD12FFA8FD42FFA85252272727527DFD75FFA85252272727527DA8%FD24FFA8FD12FFA8FD11FFA8FD29FFA87D5227F8F827527DA8FD73FF7D7D%2727F827277D7DFD2BFFA8FD12FFA8FD33FFA87D7D522727F827277D7DFD%72FF7D7DFD05275252A8A8FD31FFA8FD12FFA8FD23FFA8FD05FFA8FF7D7D%52522727F827277D7DA8FD6FFFA87D7D5252522752277D52FFA8FD39FFA8%FD12FFA8FD20FFA8FF7D7D7D2752F85252527D7DA8A8FD6CFFA8A87D527D%F87D272752527D7DA8FD43FFA8FD12FFA8FD13FFA8FFA87DA852527DF852%27277D277DA87DFFA8FD68FFA8FF7DA8A8277D7DF87D2752A852A8FFA8FD%4DFFA8FD0EFF7DFFFFFFA8FD07FFA8A8FFA852A852277D2727A8277DA852%A8FFA8FD61FF7DA8FD0AFF7DF87D52277D7D27FF7D7DFD5AFFA8FD0EFF7D%A8FFFF7DFFA8FFA8FFA8FF7D527DA87DFFFFFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0EFFA8A8FFFF%FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0EFF527DFD7FFFA8FD%27FFA8FD1FFFA8FD07FFA8FD0BFFA8FFFFFFA8FD20FFA87D52A8FD0BFF7D%52A8FFFF7D7DA8A8527DFD07FFA8527DFFFF7D7D7DFFA87DFD08FF527DA8%FF7E7D7DFFA8A8A8FD07FF7D7D7DFFA87D52A87D7D7DFD09FF7D7DA8FFFF%7D7DFD1FFFA87DFF7DFD0BFF7DFF7DFFA8A8FF7DFFFF7DFD07FF7DFF7DFF%FF7DFF7DFFA87DFD07FF7DA8A8A8FF7DFFA87D7D7DFD07FFA87DFF7DFFA8%7DFF7D7E7DA8FD08FFFD04A8FFFF7DA8FD1FFF7DA8FF7DFD0AFFA87DFF7D%FFA87DFF52FFA8FD08FF7DFF7D7DFF7DFF7DA87D7DA8FD06FF7DA8A87DFF%52FF7D527DA87DFD06FFA87DFF52FF7DA8A87DA87DA8FD08FFA8A8FF7DFF%FFA87DFD20FF7DA87DFD0BFF7DA87DFFA87D7DFD04A8FD07FF7DA87DFFA8%7DA87DA87E52FD07FFA87E7DA8FF7D7DA8A8A87DA8FD06FFA87DA87DFFA8%7DA8FD047DFD08FFA87D7DA8FFFF7D7EFD20FFA87DFD0DFF7DFFA8A8A87D%A8A87DA8A8FD07FF7DA8FFA8A87DA8FFFFA8FD08FF7DA8FFA8A87DA8FFA8%7DA8FD07FFA87DA8FFA8A87DFF7D7DA8FD09FF7DA8FFA8A8A87DFDD7FFA8%FD7DFFFD047DFD7BFF7D7DFFA87DA8A8A8FD78FF52FD04FFA8527DFD78FF%527DFFFFA87D7D52FD78FFA87DA8A8A87D7D527DFD78FFA8A8A8FFA8A8A8%FD32FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2020-04-03T01:14:50+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWM6i3mW38xaW0F&#xA;8ZYLy5kS50oRx+klmkTH1/U4CYOr+mD8fGrBadyqp+c9VvtOubWeS5vtO0NFb67qVjHaSqkjuqp6&#xA;6zpO6RqvIlkTvuRirILrUrS1mhglMjSzhmjWOKSUlUKhmPpq3EAuu5xV36St/wCSf/pHn/5oxV36&#xA;St/5J/8ApHn/AOaMVd+krf8Akn/6R5/+aMVd+krf+Sf/AKR5/wDmjFVserWkilkWYgFlJ+rz9VJU&#xA;j7HYjFV36St/5J/+kef/AJoxV36St/5J/wDpHn/5oxV36St/5J/+kef/AJoxVa+rWiMisswMh4oP&#xA;q8+5oWp9jwU4qu/SVv8AyT/9I8//ADRirv0lb/yT/wDSPP8A80Yq79JW/wDJP/0jz/8ANGKu/SVv&#xA;/JP/ANI8/wDzRiq1NWtHZ1VZiYzxcfV59jQNT7HgwxVd+krf+Sf/AKR5/wDmjFXfpK3/AJJ/+kef&#xA;/mjFXfpK3/kn/wCkef8A5oxVbJq1pGoZ1mAJVQfq8/ViFA+x3JxVd+krf+Sf/pHn/wCaMVd+krf+&#xA;Sf8A6R5/+aMVd+krf+Sf/pHn/wCaMVd+krf+Sf8A6R5/+aMVWjVrQyNGFm5qAzL9Xn2DEgH7H+Sc&#xA;VXfpK3/kn/6R5/8AmjFXfpK3/kn/AOkef/mjFXfpK3/kn/6R5/8AmjFVk+s2cETSyrcCNASxFtcN&#xA;QDcmixk4qjcVdiqSf4Zm/TEupDWb4CZ0eS0H1URcI91iD+h66xj+USdz4mqq3U/Kh1SL6tqGrXtx&#xA;p77XNgRapFOvqF+MjRwJLxoQlFdaqN6mpKqZyAfpS226QTgfLnDiqKxV2KuxV2KrUACmgpuT95OK&#xA;rsVdirsVWsAWSorQ1H3HFV2KuxV2KuxVaoAZ6ClTU/cMVXYq7FXYqtcAqKiu4P3EYquxV2KuxV2K&#xA;rQB6hNNyACfkTiq7FXYq7FUNqf8Axzbv/jDJ/wAROKonFXYq7FXYqhZP+Opb/wDGCf8A4nFiqKxV&#xA;2KuxV2KtL0+k/rxVvFXYq7FWm6r8/wCBxVvFXYq7FXYq0vVvn/AYq3irsVdirTdPpH68VbxV2Kux&#xA;V2KtD7Z+Q/jireKuxV2KobU/+Obd/wDGGT/iJxVE4q7FXYq7FULJ/wAdS3/4wT/8TixVFYq7FXYq&#xA;7FWl6fSf14q3irsVdirTdV+f8DireKuxV2KuxVperfP+AxVvFXYq7FUkfzl5YGvny8dQjXWBx/0V&#xA;uS1J4sFDkcC9GB4huXtlXjQ4uG93P/kvUeB4/AfC7/2c686pO8tcB2KuxV2KtD7Z+Q/jireKuxV2&#xA;KobU/wDjm3f/ABhk/wCInFUTirsVdirsVQsn/HUt/wDjBP8A8TixVFYq7FXYq7FWl6fSf14q3irs&#xA;VdirTdV+f8DireKuxV2KuxVperfP+AxVvFXYq7FXm35mflBZeZWk1fS3+p6/sSSSIpyoCgP/ACNQ&#xA;CjD6R3GFqdIJ7j6nrOwfaeekAxZRxYftj7u8eXyY75F/NzVNE1D/AAv59WSGeAiKPUJvtof2RcH9&#xA;pSOkg+ZqPiynBqzE8OR2na/s1j1EPzOiog78I5H+r3H+j8q5PakdJEWSNg6OAyOpqCDuCCM2bwBB&#xA;Bo828UOxVofbPyH8cVbxV2KuxVDan/xzbv8A4wyf8ROKonFXYq7FXYqhZP8AjqW//GCf/icWKorF&#xA;XYq7FXYq0vT6T+vFW8VdirsVabqvz/gcVbxV2KuxV2KtL1b5/wABireKuxV2KtN0+kfrxVi/nz8v&#xA;dF84acYbtRDfxKfqeoIoMkZ60PTkhPVT9FDvlGfTxyDfm7nsftrNoclx3gfqj0P6j5vLPKHnbzD+&#xA;XGtf4V83q7aRX9xcDk4hUnaSE0q8J7r1HzqpwMWaWGXBPk9l2n2Tg7Vw/mdL/e9Ryvyl3S8+vu3e&#xA;8W9xBcwR3FvIs0Eqh4pYyGVlYVDKw2IObUG9w+bThKEjGQojmFTCxaH2z8h/HFW8VdirsVQ2p/8A&#xA;HNu/+MMn/ETiqJxV2KuxVCXmsaTYzQQXt7b2s103C2imlSNpG6URWILHftircn/HUt/+ME//ABOL&#xA;FUVirsVdirsVaXp9J/XireKuxV2KtN1X5/wOKt4q7FXYq7FWl6t8/wCAxVvFXYq7FWm6fSP14q3i&#xA;rH/O3knR/N2kNYX68JVq1pdqKyQyfzDxB/aXv86EU5sIyCi7PsrtbLosvHDl/FHpIfjkejyLyX5v&#xA;1v8ALbzA3lLzWCdId6wXAqyxByQJoid2hc/aHUb7VqDr8OWWGXBPk9x2r2Zh7VwfmtN/e9R3/wBE&#xA;/wBIdO/3UXvcckcsayxMHjcBkdSCrKRUEEdQc2wL5rKJBo7ENj7Z+Q/jihvFXYq7FUNqf/HNu/8A&#xA;jDJ/xE4qicVdirsVYX59u/KMizaJqmoWljd6nDELmW4njiZLWKUuGUOy/EW5BOP7W/bFWSySvJqF&#xA;lJAoZJIJWPMtGQhaI1oVJr7GmKo6r+A+/wDsxV1X8B9/9mKuq/gPv/sxV1X8B9/9mKtKXp0HU9/f&#xA;5Yq3V/Aff/Zirqv4D7/7MVdV/Aff/ZirTF6rsOvj7H2xVur+A+/+zFXVfwH3/wBmKuq/gPv/ALMV&#xA;dV/Aff8A2Yq0perbDr4+w9sVbq/gPv8A7MVdV/Aff/Zirqv4D7/7MVaYvToOo7+/yxVur+A+/wDs&#xA;xV1X8B9/9mKsX/MHyJY+cNFazmVYr6EFrC87xyHsaCpRqUYfxGUajAMka6u47F7YyaHNxjeB+qPe&#xA;P1jo85/KjzxqXl3WX8heaKxPFJ6NhLKf7uQ9IeXeOStYz/AimHpcxhLw5vVe0fZOPVYhrdNvYuVd&#xA;R/O94/i/WN+2gvzOw6Dv8/bNm+et1fwH3/2Yq6r+A+/+zFXVfwH3/wBmKoTV2nGl3XpojN6T7MxU&#xA;U4nuFbFUZirsVdirsVQsn/HUt/8AjBP/AMTixVFYq7FXYq7FWl6fSf14q3irsVdirTdV+f8AA4q3&#xA;irsVdirsVaXq3z/gMVbxV2KuxVpun0j9eKt4q7FXYq83/OX8uv8AEelfpbTYidd09KoEHxTwr8Rj&#xA;26su5T7u+YWs0/GLH1B6z2X7c/K5fCyH9zP/AGJ7/d3/AD6LvyZ/ME+ZtHOn6hJXWtNRVlLH4poR&#xA;ssu+9R9l/ffvh0eo440fqDH2p7F/KZvEgP3WTl/RPd+kfLo9GzMeVdirsVQ2p/8AHNu/+MMn/ETi&#xA;rE5vzA1mO/uZx5anl8q2dxLaz63FPG8wa3cxTyiyVTI0UcqMpZWLUFeOKpp5L82f4lsr+4NvHA1h&#xA;fTWDGGb6xFJ6IU+rHJwiqrh9vhxVkOKuxVCyf8dS3/4wT/8AE4sVRWKuxV2KuxVpen0n9eKt4q7F&#xA;XYq03Vfn/A4q3irsVdirsVaXq3z/AIDFW8VdirsVabp9I/XireKuxV2KuxV4D+YemXX5efmFZ+bd&#xA;ISmn30heWBdl5n+/hPYCRTyXwPT7OanUROHIJjkX0vsTUR7U0MtLlPrgNj5fwy+HI/te76ffWuoW&#xA;NvfWr+pbXUazQuO6OAyn7jm1jIEWHznNhlimYSFSiaPwV8LU7FUNqf8Axzbv/jDJ/wAROKsUs9N1&#xA;PQtZutYn0GC+urxFjutS0h2jkdQ3Kr2Nw/FdzyJjldjvtXqqmPlW+8lJJc2OhGKyuriaS8u9MZHt&#xA;rj1ZKc5Gtpgki8uPXjQ4qyPFXYqhZP8AjqW//GCf/icWKorFXYq7FXYq0vT6T+vFW8VdirsVabqv&#xA;z/gcVbxV2KuxV2KtL1b5/wABireKuxV2KtN0+kfrxVvFXYq7FXYqxn8xPLCeZfKeoabw53Pp+tZH&#xA;uJ4qslP9b7J9jlOox8cCHbdidoHSaqGS/TdS/qnn+v4MP/5x58xvfeWbrRpmrLpMoMNevoT1YD/Y&#xA;ur/eMxtBkuJj3O+9ttCMeojlHLIN/wCtH9lPVsz3i3YqhtT/AOObd/8AGGT/AIicVYPF+bvlV4J7&#xA;TXp7jy9cma4tkuZ4J4YGEcrxLLBdMjQmoUGpbriqbeSb1dYt7yS6vrbXhpl+8WmavEsLc4mt4pVc&#xA;PCPT9QCYozRhQadBirK8VdiqFk/46lv/AMYJ/wDicWKorFXYq7FXYq0vT6T+vFW8VdirsVabqvz/&#xA;AIHFW8VdirsVdirS9W+f8BireKuxV2KtN0+kfrxVvFXYq7FXYq0Ptn5D+OKvC/yzVdG/OrX9IjNL&#xA;ef60kSDoAsqzR/8AApUZq9N6cxHvfRu3j4/ZGHKfqHB9xB+17rm0fOXYqhtT/wCObd/8YZP+InFV&#xA;doo3Ro3RWjaoZCAQa9aj3xVB6Toel6QLpdOt0tYrub6zLDEqpGJDGkZKooAFRGCfep74qjsVdiqF&#xA;k/46lv8A8YJ/+JxYqisVdirsVdirS9PpP68VbxV2KuxVpuq/P+BxVvFXYq7FXYq0vVvn/AYq3irs&#xA;VdirTdPpH68VbxV2KuxV2KtD7Z+Q/jir5b/KnVLzXP8AnKrzQ0Epk0vT31KQLsVBSRbXkpp+0z/j&#xA;lYxREuKt3Mn2hnlhGEyPhDlF9S5Y4bsVQ2p/8c27/wCMMn/ETiqJxV2KpYuvQnzGdCa3mS4+qm8j&#xA;uD6fovGrrGwWjmTkGcfaQYq7VNbeyu4LS30+51G5mR5THam3X040Kryc3EsA3L7UJPXFUTJ/x07f&#xA;/jBN/wATixVFYq7FXYq7FWl6fSf14q3irsVdirTdV+f8DireKuxV2KuxVperfP8AgMVbxV2KuxVp&#xA;un0j9eKt4q7FXYq7FWDfnJ+Y1p5A8i6jrbuv6QdPq+kwEisl3ICI9j1VPtt/kg4q8w/5w58i3Wne&#xA;WNS85aijfXPMEgjs2kqXNrCSWkqd/wB7Kx69eIPfFX0RirsVQ2p/8c27/wCMMn/ETiqJxV2KsZmt&#xA;9V/5WHb3y6dM2mrp0tm98Ht/TEkkqTD4DKJqUj47J19t8VQHnLTL7XII47PQZ7fWlp9Q115LSP6m&#xA;yykcmeOd5ytF58FRgwIBoa0VZRPG7anaUlZCsMxbiF+KjxbHkG2PtiqM4n+Y/h/TFXcT/Mfw/pir&#xA;uJ/mP4f0xV3E/wAx/D+mKtKpp9o9T4ePyxVvif5j+H9MVdxP8x/D+mKu4n+Y/h/TFWmU1X4j19vA&#xA;+2Kt8T/Mfw/piruJ/mP4f0xV3E/zH8P6Yq7if5j+H9MVaVTVviPX28B7Yq3xP8x/D+mKu4n+Y/h/&#xA;TFXcT/Mfw/pirTKafaPUeHj8sVb4n+Y/h/TFXcT/ADH8P6Yq7if5j+H9MVSLzp518t+TNCm1vzDf&#xA;C0s4tkGxklkpVYoU6u7eA+ZoKnFXytpOnebf+ckfzHXVtUjl0/yHozemI1b4Y4yQxgjbYPcTUHqO&#xA;B8Ip4KCq+v7HT7Swsrexso1t7O1jSG2gjAVEjjUKiKKbAAUxVX4n+Y/h/TFXcT/Mfw/piqE1eN30&#xA;u6CyvGfSf4lC1+yf5lYYqjMVdirsVdiqFk/46lv/AMYJ/wDicWKorFXYq7FXYq0vT6T+vFW8Vdir&#xA;sVabqvz/AIHFW8VdirsVdirS9W+f8BireKuxV2KtN0+kfrxVvFXYq8c/NX/nJryV5LjlstLZdf15&#xA;QR9WtnBt4SRQGeYVHX9lKn5Yq8s8s/lD+aP5065H5r/My6n0vy/u1pYhfSleOu0dtA1fRjI/3Y4L&#xA;N4NXkFX1LoHl/RfL+lwaRotnHY6baIEgtohRVFTUkmpZidyxNSdziqY4q7FXYqhtT/45t3/xhk/4&#xA;icVROKuxV2KuxVCyf8dS3/4wT/8AE4sVRWKuxV2KuxVpen0n9eKt4q7FXYq03Vfn/A4q3irsVdir&#xA;sVaXq3z/AIDFW8VdirsVUL28s7O3a4u547aBCOc0rqiDfuzEDFXlPnD/AJyW8k6RbTNoUcnmGaNJ&#xA;itxCywWHOCA3DR/XJuKO/p0PCIOxrsMVee3UP59/mxdPDyOk+WvUZHKiax0+VYrilQzFL27R0jJ+&#xA;zHQ4q9H/AC1/5xw8i+TXgv7pP05rsIUpfXSKsUTKqrygtxWND8IPI8nrvyxV6xirQ+2fkP44q3ir&#xA;sVdiqG1P/jm3f/GGT/iJxVE4q7FXYq7FULJ/x1Lf/jBP/wATixVFYq7FXYq7FWl6fSf14q3irsVd&#xA;irTdV+f8DireKuxV2KuxVperfP8AgMVUL7UtOsIxLfXUNpGxorzyLGpIFaAsR2GKvOde/wCcify3&#xA;062Mun3UmttWKJWsUJt1nuXZIIpruThbwtJ6bsObj4FLeFVWBT/nn+bHm9nt/Ivl82qFZjHciBr2&#xA;RGX93AJZJDBZqkr/ABepHJKAo3HXFV6/kH+YPmu7N55z1ww25Z/St7qQarcqjwC3CMhWHT1pzkkR&#xA;0h5qSN64q9S8rfk35C8uzC7isTqOpgKv6T1N/rdzxSNIkUPIKKEjhRV4gbDFWbYq7FXYq0Ptn5D+&#xA;OKt4q7FXYqhtT/45t3/xhk/4icVROKuxV2KuxVCyf8dS3/4wT/8AE4sVRWKuxV2KuxVpen0n9eKt&#xA;4q7FXYq03Vfn/A4q3iqC1XXNE0iKKXVtQttOinkEMMl3NHAryN9lFMhUFj2A3xVhmufnr+XOlmeK&#xA;O+k1O9t5ngexsIXlmJiWVpXTlwR0jFtJzdWIHGnXbFWE6p/zkreXs11aeUfLz37xSOYb2T1bhBbR&#xA;FkM1xaWiSXcHrSKqwh1+INzNAKYqhLib/nJrzSJDBbny9A3OdrZmt7R4nkEi2kUVyBePPHGrRyXA&#xA;eFGJBQEdMVVLT/nF661KV5POHmaXUqj03SKNpPWSSb1riZjeNc+hPKVjTnb8OKrt9rZV6JoH5Kfl&#xA;xos63SaUNQ1BCCL/AFJ2vJ6LEIEUtMW+GOIcEFPhHTFWbxQxQxJFCixxRgKkaAKqqNgABsBirbdP&#xA;pH68VbxV2KuxV2KtD7Z+Q/jireKuxV2KobU/+Obd/wDGGT/iJxVE4q7FXYq7FULJ/wAdS3/4wT/8&#xA;TixVFYq7FXYq7FWl6fSf14qlOo+cPK2nWmo3d5qtrHDpPH9JkSq7QFzxRZEQs6s7bKtKk7DFUin/&#xA;ADg8iR3OkQx3r3MWtCNrW7t4ZJLdFnuPqkRnkApFyuKx/F0YGtKYqw6b/nIy1utH1O90XRZJZNOu&#xA;beJ3uJOUKW9zJPEs85slvJYSHtWUxunIclPQ4q3J51/O7WdVMGkeXhpdjqGk/WLCW8hP+j3Mun+s&#xA;jSXLScPUS8b0PRaD7PxnaoxVTs/I3546nPol7qXmR7GOzuXE9q9yUuBardRyI8wsFjtLuaSFHiKu&#xA;oRQwbdq4q1pn/OMWgpZT2uq61dXBkYiOSziitiY3ga3n9ZZvriyTXKPWaYBWJAK8cVZrbfk1+WUB&#xA;uw2gwXUV66vJb3he7hQq7SAQxTtIkI9SR2IjAqWOKswhtreAUhiSIUVaIoXZBxUbeA2GKr16t8/4&#xA;DFW8VdirsVabp9I/XireKuxV2KuxVofbPyH8cVbxV2KuxVDan/xzbv8A4wyf8ROKonFXYq7FUh8y&#xA;axqWm6joKWxha11K+FjdxyRu0lHhklV43Dqq09GhBRq17U3VTKV1GsW0f7TW9wwHsrwg/wDEsVRm&#xA;KsP/ADS856v5R8uRanpemjUZ5bqO3k5idooEdHb1ZBbRzyleSLGKL9pxXbFUkk84fmjcea/LKWnl&#xA;9oNA1S0srjU45YSz27XCyNeJLc+rGIXtf3XFPRPqVO4psqltn5e/PXUtL80WGrarHaTXLQto9yJV&#xA;iUNHds8qQSWSJcQQS2ipHVyZVYlhiq1fyZ17WIPKl5rHmeWTVPLrOtxNSa4csl8J629w8kLrKI4/&#xA;q7TSI5dOoqcVTmy/IjyXBf67cztc3Ueu8w9uzpF6Ae7+vkxSwJFMWW6o6PI7MtAAaYqn1h+WPkOy&#xA;TSOGjQTTaEXfTLq4BnnieSQzPJ6spZ2dpmMlWP2jUb4qyK3srO2aVraCOBp2MkxjRULuerNxAqfc&#xA;4qvkkRHiVjvI5VPnxZv1KcVX4q7FXYq7FVkciO8qqd43Cv8APirfqYYqvxV2KuxVZPIkaBnNAXRR&#xA;82YKPxOKr8VdirsVdiqxZEM7xA/GqKxHsxYD/iJxVfirsVdiqG1P/jm3f/GGT/iJxVE4q7FXYqkX&#xA;mby/qOrXOkTWt7DaLpd2L0pLbtOZHWN4lWqzQ8V4ytXY708KFVvUNc8qPq8ekXzRzXySIqJJA8kc&#xA;csq8o0MxRoo5HUVVSwY9sVTL9FaX/wAscH/ItP6Yq79FaX/yxwf8i0/piqhfQaBYWc17eQW8Frbo&#xA;ZJpXjQBVUVJ6Yqh9HuPLGsQyS2EETiF/TmjktmglR+IYB4pkjkWqsCKruN8VQllr/ka9+sG2MDLb&#xA;RmZ2a3ZFaIMUMkJdFEycxx5R8hXbFUVo915X1iOZ7CCJzbSGG4iltmgljkADcXimSORdiDuuKph+&#xA;itL/AOWOD/kWn9MVSrVdV8naTdx2l+sMU8iiSgt2dUjZ/TWSV0RliQv8IaQgVxVV1i68r6PFFJfw&#xA;RJ67+nBHFbNPK7BSxCRQpJI1FUk0XYYqtuNQ8n2+lW+rS/VRp10YltrgRqwkM5CxhQqknkW8MVTL&#xA;9FaX/wAscH/ItP6Yq0+m6SiM72tuqKCzM0aAADckkjFUr0TU/J+tmRdNjhlaJUkZXtmhJjkrwkQS&#xA;oheNuJ4utVPjirrbVfJ1zqz6VCsLXqNJHx+rsI2khAMsaTFBE7x1+JVYkd8VRFlL5avrme3s4IZ2&#xA;tiVmkS3JhDg0ZBNw9JnU7Moao74qjf0Vpf8Ayxwf8i0/piqXa1eeVdFjifUIYk9cssMcds08jcFL&#xA;uRHCkj0VRVjSg74quu7rypaaQNYmW2/RrKjx3CRCQOJSBHwVFZnLlgFCgk9sVQE3mXyJDZQ3jqhj&#xA;naWNIks5nnDW9fWDW6RNMnp0+Pkg498VTm0tdCvLWG7tbe3mtrhFlglSNCrI45KwNOhBxVV/RWl/&#xA;8scH/ItP6Yqlet6n5Q0QxDUo4ommV3REtmmbhEAZJGWGOQqiAjk7fCO5xVE358u2GmS6ncW8RsoU&#xA;9V5Ybcz/ALv+cLEjswoakgdN+mKq9tZ6Lc20VzBawPDOiyRP6SiquOSmhAPQ4qqforS/+WOD/kWn&#xA;9MVd+itL/wCWOD/kWn9MVWyaNo8i8ZLG3df5WiQj8RiqMxV2KuxV2KvNtT0rUmuNa0RLOdrrVdbs&#xA;tStdQWKRrcW0bWzuzTgFEaL6s68CwJ241rir0nFXYqx/z9p13qHlO9t7SJp5w0EwgTdpFt545njU&#xA;GlS6RlQO+KpZp3rXV55l1f0Lq0s9VS1s7P1badJi6RtG0pg4eqqh5gvIr0Xl9nfFUm0OO5h/w9cX&#xA;Gk3kUflbR5bXUYfqsrPJck26xx268f3/AMVuXDoSvQ1BxVlXlKS2nl1G+W3uYr2+lSe9e4tri2Tk&#xA;EEUcUQuY4XcRxxqC3GhO+1aBVkWKvPPN1hfpqHmmFLCe8bzJpMNlpssMTyxrMgniaOV1DLCAZ1k5&#xA;PReu9RiqP1oy2OveXr57e7u7fRoZ7a+a3tp5iHuoY/TlQIjGQfuWVinLjy+KmKsW1Hy150TybZxf&#xA;o2K4SKS3mgtfXlFxA82prcvWCOCVTxTihbn8ChyB1BVetwmUxIZlVJioMiIxdQ1NwrEIWAPfiPli&#xA;qA8yWFxqHl3VbC2PG5vLO4ghatKPLEyKa/M4qxby5JPJq8GrvYXdlZ6Xoi2NzHLbTJI0/qK5jii4&#xA;l5fTWI7xhgeXw1xVJ7bR9ams9M0K2tbi11LTNU1C+l1J4pY4THMt0YZEnYcWaQ3SfCG5LQ8gKYqj&#xA;/wAuNO1CwvLa1hhv7TTbfS0i1K0vvX9JdSEi72xmqhBX1Cxh+A1U9cVeh4qxTzKJrHzXo2uva3F3&#xA;Y29teWsq2sMlxJHLP6Txv6cQZ6MIWStNqiuKpINL1Gw8leW7KaznlvNIuLTUryygiklIhSYlo0ZV&#xA;4PJF6gb01PI8dgcVSbWdJ1G4ludQ+pahaWmpX9/c2t9aW9w17Av1SG3jR7ZV9UR3bxMXDJ0C14kh&#xA;gq9N8s/Wv8O6YLq0XT7kWsIlsY9khYIAY1G9AvQDtiqZYqwzzSLix8zfpVrG5vrW50i40+NbWGS4&#xA;Kz+oJFR1jDFVmG3IjiCu5GKrmgn0z8t30OeKefUbPRUt5EggnmDSvAYQkbRowc8xuFqVG5oMVT3y&#xA;tIX8t6ZWOWJktoo3jnjkhkVo0CMGjlVHG69xv16YqmmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxVjuq+a7iLzDF5c0exXUNWMAvLv1Zjb29vbFzGrSSrHO3ORgeCKhrQk0GKr9C8&#xA;z3F5LqkGrWS6TNpU8dvIWnWWKQyQpKHjkKx1Q+pQVAPiAdsVT8EEVHTFXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwq70vVNE/MC68zW1nJqGmav&#xA;ZQ2l+lvxM9vLasxjkEbFfUjdZCpCVYHtToqgfNNl5m1ebTbh9If6imoPOFX6vJeW0KWbRRuIpJBb&#xA;s80juv7z1AikVWv2VU2/K2z17T/Jtnpmt2TWVzp3+ixI8iSl4kUUesZZQORKqP5QOnTFWW4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>191.558333</stDim:w>
            <stDim:h>148.519444</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>13.0d2e19</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.ttc</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -391.479 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 391.479 li
505.25 391.479 li
505.25 0 li
cp
clp
[1 0 0 1 0 0 ]ct
72.3999 331.771 mo
504.9 331.771 li
504.9 12.2705 li
72.3999 12.2705 li
72.3999 331.771 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
.7 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
504.9 12.2705 mo
72.3999 12.2705 li
504.9 118.771 mo
72.3999 118.771 li
504.9 225.271 mo
72.3999 225.271 li
504.9 331.771 mo
72.3999 331.771 li
432.817 331.771 mo
432.817 12.2705 li
360.733 331.771 mo
360.733 12.2705 li
288.65 331.771 mo
288.65 12.2705 li
216.567 331.771 mo
216.567 12.2705 li
144.483 331.771 mo
144.483 12.2705 li
72.3999 331.771 mo
72.3999 12.2705 li
.873 .873 .873 rgb
@
2 lc
432.817 12.2705 mo
432.817 16.5957 li
360.733 12.2705 mo
360.733 16.5957 li
288.65 12.2705 mo
288.65 16.5957 li
216.567 12.2705 mo
216.567 16.5957 li
144.483 12.2705 mo
144.483 16.5957 li
72.3999 12.2705 mo
72.3999 16.5957 li
432.817 331.771 mo
432.817 327.445 li
360.733 331.771 mo
360.733 327.445 li
288.65 331.771 mo
288.65 327.445 li
216.567 331.771 mo
216.567 327.445 li
144.483 331.771 mo
144.483 327.445 li
72.3999 331.771 mo
72.3999 327.445 li
72.3999 12.2705 mo
504.9 12.2705 li
72.3999 331.771 mo
504.9 331.771 li
.149 .149 .149 rgb
@
.301961 .301961 .309804 rgb
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 52 /four putdup 54 /six putdup 56 /eight putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VHXJJO+Times-Roman /Times-Roman findfont ct_VMDictPut/VHXJJO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]VHXJJO+Times-Roman nfVHXJJO+Times-Roman*1 [25 0 0 -25 0 0 ]msf65.8999 361.771 mo(0)sh122.478 361.771 mo(0.02)sh194.564 361.771 mo(0.04)sh266.65 361.771 mo(0.06)sh338.728 361.771 mo(0.08)sh416.814 361.771 mo(0.1)sh278.235 387.87 mo
278.871 388.684 279.667 389.324 280.626 389.792 cv
281.584 390.261 282.579 390.495 283.61 390.495 cv
284.475 390.495 285.274 390.326 286.008 389.987 cv
286.743 389.648 287.386 389.172 287.938 388.558 cv
288.49 387.943 288.915 387.251 289.212 386.479 cv
289.508 385.709 289.657 384.892 289.657 384.026 cv
289.657 383.881 289.741 383.808 289.907 383.808 cv
290.251 383.808 li
290.396 383.808 290.469 383.901 290.469 384.09 cv
290.469 385.068 290.282 386.011 289.907 386.917 cv
289.532 387.823 289.003 388.62 288.321 389.308 cv
287.639 389.995 286.853 390.529 285.962 390.909 cv
285.072 391.289 284.142 391.479 283.173 391.479 cv
281.839 391.479 280.574 391.209 279.376 390.667 cv
278.178 390.126 277.134 389.383 276.243 388.44 cv
275.353 387.498 274.66 386.407 274.165 385.168 cv
273.67 383.928 273.423 382.636 273.423 381.292 cv
273.423 379.959 273.67 378.673 274.165 377.433 cv
274.66 376.193 275.353 375.1 276.243 374.151 cv
277.134 373.203 278.178 372.462 279.376 371.926 cv
280.574 371.389 281.839 371.12 283.173 371.12 cv
284.131 371.12 285.047 371.329 285.923 371.745 cv
286.797 372.162 287.563 372.751 288.219 373.512 cv
289.844 371.215 li
289.958 371.151 290.027 371.12 290.048 371.12 cv
290.251 371.12 li
290.303 371.12 290.352 371.144 290.399 371.19 cv
290.446 371.238 290.469 371.293 290.469 371.354 cv
290.469 378.917 li
290.469 379.084 290.396 379.168 290.251 379.168 cv
289.735 379.168 li
289.569 379.168 289.485 379.084 289.485 378.917 cv
289.485 378.386 289.378 377.787 289.166 377.12 cv
288.951 376.454 288.677 375.821 288.344 375.222 cv
288.011 374.623 287.625 374.095 287.188 373.637 cv
286.136 372.615 284.933 372.104 283.58 372.104 cv
282.547 372.104 281.561 372.339 280.618 372.808 cv
279.675 373.276 278.881 373.918 278.235 374.729 cv
277.548 375.604 277.071 376.603 276.805 377.722 cv
276.54 378.842 276.407 380.032 276.407 381.292 cv
276.407 382.563 276.54 383.759 276.805 384.879 cv
277.071 385.998 277.548 386.995 278.235 387.87 cv
278.235 387.87 li
cp
.149 .149 .149 rgb
f
295.096 388.12 mo
295.096 388.776 295.338 389.328 295.823 389.776 cv
296.307 390.225 296.877 390.448 297.534 390.448 cv
298.138 390.448 298.685 390.298 299.174 389.995 cv
299.665 389.693 300.055 389.282 300.346 388.762 cv
300.638 388.24 300.784 387.693 300.784 387.12 cv
300.784 384.215 li
299.94 384.215 299.073 384.353 298.182 384.629 cv
297.292 384.904 296.554 385.339 295.971 385.933 cv
295.388 386.526 295.096 387.256 295.096 388.12 cv
295.096 388.12 li
cp
292.832 388.12 mo
292.832 387.006 293.268 386.1 294.143 385.401 cv
295.018 384.703 296.068 384.212 297.292 383.926 cv
298.515 383.639 299.679 383.495 300.784 383.495 cv
300.784 382.354 li
300.784 381.813 300.667 381.29 300.432 380.784 cv
300.198 380.279 299.857 379.865 299.409 379.543 cv
298.961 379.219 298.466 379.058 297.924 379.058 cv
296.685 379.058 295.742 379.334 295.096 379.887 cv
295.45 379.887 295.745 380.021 295.979 380.293 cv
296.213 380.563 296.332 380.876 296.332 381.229 cv
296.332 381.604 296.198 381.925 295.932 382.19 cv
295.667 382.456 295.352 382.59 294.987 382.59 cv
294.612 382.59 294.292 382.456 294.026 382.19 cv
293.76 381.925 293.627 381.604 293.627 381.229 cv
293.627 380.251 294.075 379.521 294.971 379.042 cv
295.867 378.563 296.851 378.323 297.924 378.323 cv
298.685 378.323 299.448 378.484 300.213 378.808 cv
300.979 379.131 301.604 379.592 302.088 380.19 cv
302.573 380.79 302.815 381.49 302.815 382.292 cv
302.815 388.604 li
302.815 388.969 302.893 389.303 303.049 389.604 cv
303.206 389.906 303.451 390.058 303.784 390.058 cv
304.086 390.058 304.312 389.903 304.463 389.597 cv
304.615 389.29 304.69 388.959 304.69 388.604 cv
304.69 386.808 li
305.518 386.808 li
305.518 388.604 li
305.518 389.021 305.409 389.42 305.19 389.801 cv
304.971 390.181 304.677 390.482 304.307 390.706 cv
303.937 390.931 303.539 391.042 303.112 391.042 cv
302.56 391.042 302.086 390.829 301.69 390.401 cv
301.294 389.975 301.076 389.47 301.034 388.887 cv
300.69 389.584 300.179 390.141 299.502 390.558 cv
298.826 390.975 298.107 391.183 297.346 391.183 cv
296.627 391.183 295.924 391.078 295.237 390.87 cv
294.549 390.662 293.977 390.331 293.518 389.879 cv
293.06 389.425 292.832 388.839 292.832 388.12 cv
292.832 388.12 li
cp
f
504.9 12.2705 mo
500.575 12.2705 li
504.9 118.771 mo
500.575 118.771 li
504.9 225.271 mo
500.575 225.271 li
504.9 331.771 mo
500.575 331.771 li
72.3999 12.2705 mo
76.7251 12.2705 li
72.3999 118.771 mo
76.7251 118.771 li
72.3999 225.271 mo
76.7251 225.271 li
72.3999 331.771 mo
76.7251 331.771 li
504.9 331.771 mo
504.9 12.2705 li
72.3999 331.771 mo
72.3999 12.2705 li
@
.301961 .301961 .309804 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginVHXJJO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendVHXJJO+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/VHXJJO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]VHXJJO+Times-Roman nfVHXJJO+Times-Roman*1 [25 0 0 -25 0 0 ]msf52.3999 340.271 mo(1)sh33.3999 233.778 mo(1.5)sh52.3999 127.271 mo(2)sh33.3999 20.7705 mo(2.5)sh21 193.815 mo
21 193.993 20.875 194.081 20.625 194.081 cv
20.583 194.081 20.5049 194.065 20.3911 194.034 cv
20.2764 194.003 20.1851 193.964 20.1167 193.917 cv
20.0493 193.87 20.0161 193.81 20.0161 193.737 cv
20.0161 192.592 19.9531 191.794 19.8281 191.347 cv
19.7446 191.107 19.4946 190.93 19.0781 190.815 cv
3.68701 186.971 li
3.51025 186.94 3.38525 186.925 3.31201 186.925 cv
3.104 186.925 2.98975 187.04 2.96875 187.269 cv
2.89551 187.612 2.85889 188.279 2.85889 189.269 cv
2.85889 189.457 2.73389 189.55 2.48389 189.55 cv
2.24463 189.488 2.08301 189.438 2 189.401 cv
1.9165 189.365 1.875 189.258 1.875 189.082 cv
1.875 180.815 li
1.875 180.648 1.99463 180.565 2.23389 180.565 cv
2.43213 180.597 2.58545 180.631 2.69482 180.667 cv
2.8042 180.703 2.85889 180.794 2.85889 180.94 cv
2.85889 182.315 2.90576 183.232 3 183.69 cv
3.07275 184.149 3.34326 184.436 3.81201 184.55 cv
19.187 188.378 li
19.4063 188.462 19.6094 188.503 19.7969 188.503 cv
19.9429 188.503 20.0161 188.18 20.0161 187.534 cv
20.0161 184.94 li
20.0161 183.472 19.7241 182.282 19.1411 181.37 cv
18.5576 180.459 17.8984 179.784 17.1641 179.346 cv
16.4292 178.909 15.6689 178.542 14.8828 178.245 cv
14.0962 177.949 13.687 177.732 13.6558 177.596 cv
13.6558 177.346 li
13.6558 177.159 13.7808 177.065 14.0308 177.065 cv
20.812 179.55 li
20.937 179.581 21 179.669 21 179.815 cv
21 193.815 li
21 193.815 li
cp
.149 .149 .149 rgb
f
27.437 174.834 mo
27.3848 174.834 27.3486 174.829 27.3281 174.819 cv
.34375 165.084 li
.229004 165.043 .143066 164.978 .0859375 164.889 cv
.0288086 164.801 0 164.694 0 164.569 cv
0 164.403 .0493164 164.267 .147949 164.162 cv
.24707 164.059 .385254 164.006 .562012 164.006 cv
.671875 164.006 li
27.6558 173.741 li
27.8853 173.855 28 174.032 28 174.272 cv
28 174.428 27.9453 174.561 27.8359 174.67 cv
27.7266 174.78 27.5938 174.834 27.437 174.834 cv
27.437 174.834 li
cp
f
21 161.272 mo
20.25 161.272 li
20.1978 161.272 20.146 161.251 20.0938 161.209 cv
15.2808 156.865 li
14.5728 156.209 13.9766 155.676 13.4917 155.264 cv
13.0078 154.853 12.4507 154.447 11.8198 154.045 cv
11.1899 153.645 10.5493 153.33 9.89795 153.101 cv
9.24707 152.871 8.55713 152.756 7.82813 152.756 cv
7.06738 152.756 6.33838 152.897 5.64111 153.178 cv
4.94287 153.459 4.38281 153.879 3.96094 154.437 cv
3.53906 154.994 3.32813 155.673 3.32813 156.476 cv
3.32813 157.277 3.57275 158.004 4.06201 158.655 cv
4.55176 159.306 5.18213 159.762 5.95313 160.022 cv
5.94238 159.949 5.93701 159.85 5.93701 159.726 cv
5.93701 159.309 6.07764 158.952 6.35889 158.655 cv
6.64014 158.358 7.00488 158.209 7.45313 158.209 cv
7.88037 158.209 8.24219 158.358 8.53906 158.655 cv
8.83545 158.952 8.98389 159.309 8.98389 159.726 cv
8.98389 160.163 8.83008 160.53 8.52295 160.826 cv
8.21533 161.124 7.85889 161.272 7.45313 161.272 cv
6.74463 161.272 6.0835 161.139 5.46875 160.874 cv
4.854 160.608 4.30713 160.228 3.82764 159.733 cv
3.34863 159.238 2.98145 158.678 2.72607 158.053 cv
2.47119 157.428 2.34375 156.761 2.34375 156.053 cv
2.34375 154.991 2.57031 153.999 3.02295 153.076 cv
3.47607 152.155 4.11426 151.426 4.93701 150.889 cv
5.76025 150.353 6.72412 150.084 7.82813 150.084 cv
8.64063 150.084 9.41162 150.261 10.1411 150.615 cv
10.8696 150.97 11.5337 151.426 12.1328 151.983 cv
12.7314 152.541 13.4087 153.251 14.1641 154.115 cv
14.9194 154.98 15.4268 155.548 15.687 155.819 cv
18.7339 158.99 li
18.7339 156.303 li
18.7339 154.98 18.7207 153.876 18.6948 152.99 cv
18.6689 152.105 18.6353 151.631 18.5938 151.569 cv
18.354 151.35 17.4946 151.126 16.0161 150.897 cv
16.0161 150.084 li
21 150.881 li
21 161.272 li
21 161.272 li
cp
f
2 lw
0 lc
0 lj
452.205 191.279 mo
452.205 189.623 450.862 188.279 449.205 188.279 cv
447.548 188.279 446.205 189.623 446.205 191.279 cv
446.205 192.937 447.548 194.279 449.205 194.279 cv
450.862 194.279 452.205 192.937 452.205 191.279 cv
452.159 193.491 mo
452.159 191.835 450.816 190.492 449.159 190.492 cv
447.501 190.492 446.159 191.835 446.159 193.491 cv
446.159 195.148 447.501 196.491 449.159 196.491 cv
450.816 196.491 452.159 195.148 452.159 193.491 cv
452.159 193.491 mo
452.159 191.835 450.816 190.492 449.159 190.492 cv
447.501 190.492 446.159 191.835 446.159 193.491 cv
446.159 195.148 447.501 196.491 449.159 196.491 cv
450.816 196.491 452.159 195.148 452.159 193.491 cv
452.021 195.702 mo
452.021 194.045 450.678 192.702 449.021 192.702 cv
447.364 192.702 446.021 194.045 446.021 195.702 cv
446.021 197.359 447.364 198.702 449.021 198.702 cv
450.678 198.702 452.021 197.359 452.021 195.702 cv
452.021 195.702 mo
452.021 194.045 450.678 192.702 449.021 192.702 cv
447.364 192.702 446.021 194.045 446.021 195.702 cv
446.021 197.359 447.364 198.702 449.021 198.702 cv
450.678 198.702 452.021 197.359 452.021 195.702 cv
451.79 197.909 mo
451.79 196.253 450.446 194.909 448.79 194.909 cv
447.132 194.909 445.79 196.253 445.79 197.909 cv
445.79 199.566 447.132 200.909 448.79 200.909 cv
450.446 200.909 451.79 199.566 451.79 197.909 cv
451.79 197.909 mo
451.79 196.253 450.446 194.909 448.79 194.909 cv
447.132 194.909 445.79 196.253 445.79 197.909 cv
445.79 199.566 447.132 200.909 448.79 200.909 cv
450.446 200.909 451.79 199.566 451.79 197.909 cv
451.46 200.113 mo
451.46 198.456 450.118 197.113 448.46 197.113 cv
446.804 197.113 445.46 198.456 445.46 200.113 cv
445.46 201.77 446.804 203.113 448.46 203.113 cv
450.118 203.113 451.46 201.77 451.46 200.113 cv
451.46 200.113 mo
451.46 198.456 450.118 197.113 448.46 197.113 cv
446.804 197.113 445.46 198.456 445.46 200.113 cv
445.46 201.77 446.804 203.113 448.46 203.113 cv
450.118 203.113 451.46 201.77 451.46 200.113 cv
451.033 202.312 mo
451.033 200.655 449.69 199.312 448.033 199.312 cv
446.376 199.312 445.033 200.655 445.033 202.312 cv
445.033 203.969 446.376 205.312 448.033 205.312 cv
449.69 205.312 451.033 203.969 451.033 202.312 cv
451.033 202.312 mo
451.033 200.655 449.69 199.312 448.033 199.312 cv
446.376 199.312 445.033 200.655 445.033 202.312 cv
445.033 203.969 446.376 205.312 448.033 205.312 cv
449.69 205.312 451.033 203.969 451.033 202.312 cv
450.503 204.507 mo
450.503 202.85 449.161 201.507 447.503 201.507 cv
445.846 201.507 444.503 202.85 444.503 204.507 cv
444.503 206.163 445.846 207.507 447.503 207.507 cv
449.161 207.507 450.503 206.163 450.503 204.507 cv
450.503 204.507 mo
450.503 202.85 449.161 201.507 447.503 201.507 cv
445.846 201.507 444.503 202.85 444.503 204.507 cv
444.503 206.163 445.846 207.507 447.503 207.507 cv
449.161 207.507 450.503 206.163 450.503 204.507 cv
449.87 206.696 mo
449.87 205.039 448.527 203.696 446.87 203.696 cv
445.212 203.696 443.87 205.039 443.87 206.696 cv
443.87 208.354 445.212 209.696 446.87 209.696 cv
448.527 209.696 449.87 208.354 449.87 206.696 cv
449.87 206.696 mo
449.87 205.039 448.527 203.696 446.87 203.696 cv
445.212 203.696 443.87 205.039 443.87 206.696 cv
443.87 208.354 445.212 209.696 446.87 209.696 cv
448.527 209.696 449.87 208.354 449.87 206.696 cv
449.129 208.882 mo
449.129 207.225 447.787 205.882 446.129 205.882 cv
444.472 205.882 443.129 207.225 443.129 208.882 cv
443.129 210.538 444.472 211.882 446.129 211.882 cv
447.787 211.882 449.129 210.538 449.129 208.882 cv
449.129 208.882 mo
449.129 207.225 447.787 205.882 446.129 205.882 cv
444.472 205.882 443.129 207.225 443.129 208.882 cv
443.129 210.538 444.472 211.882 446.129 211.882 cv
447.787 211.882 449.129 210.538 449.129 208.882 cv
448.279 211.062 mo
448.279 209.404 446.936 208.062 445.279 208.062 cv
443.622 208.062 442.279 209.404 442.279 211.062 cv
442.279 212.719 443.622 214.062 445.279 214.062 cv
446.936 214.062 448.279 212.719 448.279 211.062 cv
448.279 211.062 mo
448.279 209.405 446.936 208.062 445.279 208.062 cv
443.622 208.062 442.279 209.405 442.279 211.062 cv
442.279 212.719 443.622 214.062 445.279 214.062 cv
446.936 214.062 448.279 212.719 448.279 211.062 cv
447.316 213.237 mo
447.316 211.58 445.973 210.237 444.316 210.237 cv
442.66 210.237 441.316 211.58 441.316 213.237 cv
441.316 214.894 442.66 216.237 444.316 216.237 cv
445.973 216.237 447.316 214.894 447.316 213.237 cv
447.316 213.237 mo
447.316 211.58 445.973 210.237 444.316 210.237 cv
442.66 210.237 441.316 211.58 441.316 213.237 cv
441.316 214.894 442.66 216.237 444.316 216.237 cv
445.973 216.237 447.316 214.894 447.316 213.237 cv
446.239 215.407 mo
446.239 213.75 444.896 212.407 443.239 212.407 cv
441.582 212.407 440.239 213.75 440.239 215.407 cv
440.239 217.063 441.582 218.407 443.239 218.407 cv
444.896 218.407 446.239 217.063 446.239 215.407 cv
446.239 215.407 mo
446.239 213.75 444.896 212.407 443.239 212.407 cv
441.582 212.407 440.239 213.75 440.239 215.407 cv
440.239 217.063 441.582 218.407 443.239 218.407 cv
444.896 218.407 446.239 217.063 446.239 215.407 cv
445.043 217.571 mo
445.043 215.914 443.701 214.571 442.043 214.571 cv
440.386 214.571 439.043 215.914 439.043 217.571 cv
439.043 219.229 440.386 220.571 442.043 220.571 cv
443.701 220.571 445.043 219.229 445.043 217.571 cv
445.043 217.571 mo
445.043 215.914 443.701 214.571 442.043 214.571 cv
440.386 214.571 439.043 215.914 439.043 217.571 cv
439.043 219.229 440.386 220.571 442.043 220.571 cv
443.701 220.571 445.043 219.229 445.043 217.571 cv
443.728 219.73 mo
443.728 218.073 442.385 216.73 440.728 216.73 cv
439.071 216.73 437.728 218.073 437.728 219.73 cv
437.728 221.388 439.071 222.73 440.728 222.73 cv
442.385 222.73 443.728 221.388 443.728 219.73 cv
443.728 219.73 mo
443.728 218.073 442.385 216.73 440.728 216.73 cv
439.071 216.73 437.728 218.073 437.728 219.73 cv
437.728 221.388 439.071 222.73 440.728 222.73 cv
442.385 222.73 443.728 221.388 443.728 219.73 cv
442.289 221.884 mo
442.289 220.228 440.946 218.884 439.289 218.884 cv
437.632 218.884 436.289 220.228 436.289 221.884 cv
436.289 223.541 437.632 224.884 439.289 224.884 cv
440.946 224.884 442.289 223.541 442.289 221.884 cv
442.289 221.884 mo
442.289 220.228 440.946 218.884 439.289 218.884 cv
437.632 218.884 436.289 220.228 436.289 221.884 cv
436.289 223.541 437.632 224.884 439.289 224.884 cv
440.946 224.884 442.289 223.541 442.289 221.884 cv
440.724 224.032 mo
440.724 222.375 439.381 221.032 437.724 221.032 cv
436.067 221.032 434.724 222.375 434.724 224.032 cv
434.724 225.689 436.067 227.032 437.724 227.032 cv
439.381 227.032 440.724 225.689 440.724 224.032 cv
440.724 224.032 mo
440.724 222.375 439.381 221.032 437.724 221.032 cv
436.067 221.032 434.724 222.375 434.724 224.032 cv
434.724 225.689 436.067 227.032 437.724 227.032 cv
439.381 227.032 440.724 225.689 440.724 224.032 cv
439.03 226.174 mo
439.03 224.518 437.687 223.174 436.03 223.174 cv
434.373 223.174 433.03 224.518 433.03 226.174 cv
433.03 227.831 434.373 229.174 436.03 229.174 cv
437.687 229.174 439.03 227.831 439.03 226.174 cv
439.03 226.174 mo
439.03 224.518 437.687 223.174 436.03 223.174 cv
434.373 223.174 433.03 224.518 433.03 226.174 cv
433.03 227.831 434.373 229.174 436.03 229.174 cv
437.687 229.174 439.03 227.831 439.03 226.174 cv
437.205 228.311 mo
437.205 226.653 435.861 225.311 434.205 225.311 cv
432.547 225.311 431.205 226.653 431.205 228.311 cv
431.205 229.968 432.547 231.311 434.205 231.311 cv
435.861 231.311 437.205 229.968 437.205 228.311 cv
437.205 228.311 mo
437.205 226.653 435.861 225.311 434.205 225.311 cv
432.547 225.311 431.205 226.653 431.205 228.311 cv
431.205 229.968 432.547 231.311 434.205 231.311 cv
435.861 231.311 437.205 229.968 437.205 228.311 cv
435.244 230.44 mo
435.244 228.783 433.901 227.44 432.244 227.44 cv
430.587 227.44 429.244 228.783 429.244 230.44 cv
429.244 232.098 430.587 233.44 432.244 233.44 cv
433.901 233.44 435.244 232.098 435.244 230.44 cv
435.244 230.44 mo
435.244 228.783 433.901 227.44 432.244 227.44 cv
430.587 227.44 429.244 228.783 429.244 230.44 cv
429.244 232.098 430.587 233.44 432.244 233.44 cv
433.901 233.44 435.244 232.098 435.244 230.44 cv
433.146 232.564 mo
433.146 230.907 431.803 229.564 430.146 229.564 cv
428.49 229.564 427.146 230.907 427.146 232.564 cv
427.146 234.222 428.49 235.564 430.146 235.564 cv
431.803 235.564 433.146 234.222 433.146 232.564 cv
433.146 232.564 mo
433.146 230.907 431.803 229.564 430.146 229.564 cv
428.49 229.564 427.146 230.907 427.146 232.564 cv
427.146 234.222 428.49 235.564 430.146 235.564 cv
431.803 235.564 433.146 234.222 433.146 232.564 cv
430.909 234.683 mo
430.909 233.025 429.565 231.683 427.909 231.683 cv
426.251 231.683 424.909 233.025 424.909 234.683 cv
424.909 236.339 426.251 237.683 427.909 237.683 cv
429.565 237.683 430.909 236.339 430.909 234.683 cv
430.909 234.683 mo
430.909 233.025 429.565 231.683 427.909 231.683 cv
426.251 231.683 424.909 233.025 424.909 234.683 cv
424.909 236.339 426.251 237.683 427.909 237.683 cv
429.565 237.683 430.909 236.339 430.909 234.683 cv
428.527 236.794 mo
428.527 235.137 427.184 233.794 425.527 233.794 cv
423.87 233.794 422.527 235.137 422.527 236.794 cv
422.527 238.45 423.87 239.794 425.527 239.794 cv
427.184 239.794 428.527 238.45 428.527 236.794 cv
428.527 236.794 mo
428.527 235.137 427.184 233.794 425.527 233.794 cv
423.87 233.794 422.527 235.137 422.527 236.794 cv
422.527 238.45 423.87 239.794 425.527 239.794 cv
427.184 239.794 428.527 238.45 428.527 236.794 cv
426 238.898 mo
426 237.241 424.657 235.898 423 235.898 cv
421.342 235.898 420 237.241 420 238.898 cv
420 240.556 421.342 241.898 423 241.898 cv
424.657 241.898 426 240.556 426 238.898 cv
426 238.898 mo
426 237.241 424.657 235.898 423 235.898 cv
421.342 235.898 420 237.241 420 238.898 cv
420 240.556 421.342 241.898 423 241.898 cv
424.657 241.898 426 240.556 426 238.898 cv
423.323 240.997 mo
423.323 239.34 421.98 237.997 420.323 237.997 cv
418.666 237.997 417.323 239.34 417.323 240.997 cv
417.323 242.653 418.666 243.997 420.323 243.997 cv
421.98 243.997 423.323 242.653 423.323 240.997 cv
423.323 240.997 mo
423.323 239.34 421.98 237.997 420.323 237.997 cv
418.666 237.997 417.323 239.34 417.323 240.997 cv
417.323 242.653 418.666 243.997 420.323 243.997 cv
421.98 243.997 423.323 242.653 423.323 240.997 cv
420.495 243.088 mo
420.495 241.432 419.152 240.088 417.495 240.088 cv
415.837 240.088 414.495 241.432 414.495 243.088 cv
414.495 244.745 415.837 246.088 417.495 246.088 cv
419.152 246.088 420.495 244.745 420.495 243.088 cv
420.495 243.088 mo
420.495 241.432 419.152 240.088 417.495 240.088 cv
415.837 240.088 414.495 241.432 414.495 243.088 cv
414.495 244.745 415.837 246.088 417.495 246.088 cv
419.152 246.088 420.495 244.745 420.495 243.088 cv
417.511 245.173 mo
417.511 243.516 416.168 242.173 414.511 242.173 cv
412.855 242.173 411.511 243.516 411.511 245.173 cv
411.511 246.83 412.855 248.173 414.511 248.173 cv
416.168 248.173 417.511 246.83 417.511 245.173 cv
417.511 245.173 mo
417.511 243.516 416.168 242.173 414.511 242.173 cv
412.855 242.173 411.511 243.516 411.511 245.173 cv
411.511 246.83 412.855 248.173 414.511 248.173 cv
416.168 248.173 417.511 246.83 417.511 245.173 cv
414.371 247.251 mo
414.371 245.594 413.028 244.251 411.371 244.251 cv
409.713 244.251 408.371 245.594 408.371 247.251 cv
408.371 248.908 409.713 250.251 411.371 250.251 cv
413.028 250.251 414.371 248.908 414.371 247.251 cv
414.371 247.251 mo
414.371 245.594 413.028 244.251 411.371 244.251 cv
409.713 244.251 408.371 245.594 408.371 247.251 cv
408.371 248.908 409.713 250.251 411.371 250.251 cv
413.028 250.251 414.371 248.908 414.371 247.251 cv
411.07 249.321 mo
411.07 247.664 409.726 246.321 408.07 246.321 cv
406.413 246.321 405.07 247.664 405.07 249.321 cv
405.07 250.979 406.413 252.321 408.07 252.321 cv
409.726 252.321 411.07 250.979 411.07 249.321 cv
411.07 249.321 mo
411.07 247.664 409.726 246.321 408.07 246.321 cv
406.413 246.321 405.07 247.664 405.07 249.321 cv
405.07 250.979 406.413 252.321 408.07 252.321 cv
409.726 252.321 411.07 250.979 411.07 249.321 cv
407.605 251.385 mo
407.605 249.728 406.262 248.385 404.605 248.385 cv
402.948 248.385 401.605 249.728 401.605 251.385 cv
401.605 253.042 402.948 254.385 404.605 254.385 cv
406.262 254.385 407.605 253.042 407.605 251.385 cv
407.605 251.385 mo
407.605 249.728 406.262 248.385 404.605 248.385 cv
402.948 248.385 401.605 249.728 401.605 251.385 cv
401.605 253.042 402.948 254.385 404.605 254.385 cv
406.262 254.385 407.605 253.042 407.605 251.385 cv
403.974 253.441 mo
403.974 251.784 402.631 250.441 400.974 250.441 cv
399.318 250.441 397.974 251.784 397.974 253.441 cv
397.974 255.099 399.318 256.441 400.974 256.441 cv
402.631 256.441 403.974 255.099 403.974 253.441 cv
403.974 253.441 mo
403.974 251.784 402.631 250.441 400.974 250.441 cv
399.317 250.441 397.974 251.784 397.974 253.441 cv
397.974 255.099 399.317 256.441 400.974 256.441 cv
402.631 256.441 403.974 255.099 403.974 253.441 cv
400.175 255.49 mo
400.175 253.833 398.832 252.49 397.175 252.49 cv
395.518 252.49 394.175 253.833 394.175 255.49 cv
394.175 257.146 395.518 258.49 397.175 258.49 cv
398.832 258.49 400.175 257.146 400.175 255.49 cv
400.175 255.49 mo
400.175 253.833 398.832 252.49 397.175 252.49 cv
395.518 252.49 394.175 253.833 394.175 255.49 cv
394.175 257.146 395.518 258.49 397.175 258.49 cv
398.832 258.49 400.175 257.146 400.175 255.49 cv
396.204 257.531 mo
396.204 255.874 394.861 254.531 393.204 254.531 cv
391.546 254.531 390.204 255.874 390.204 257.531 cv
390.204 259.188 391.546 260.531 393.204 260.531 cv
394.861 260.531 396.204 259.188 396.204 257.531 cv
396.204 257.531 mo
396.204 255.874 394.861 254.531 393.204 254.531 cv
391.546 254.531 390.204 255.874 390.204 257.531 cv
390.204 259.188 391.546 260.531 393.204 260.531 cv
394.861 260.531 396.204 259.188 396.204 257.531 cv
392.058 259.564 mo
392.058 257.907 390.715 256.564 389.058 256.564 cv
387.402 256.564 386.058 257.907 386.058 259.564 cv
386.058 261.222 387.402 262.564 389.058 262.564 cv
390.715 262.564 392.058 261.222 392.058 259.564 cv
392.058 259.564 mo
392.058 257.908 390.715 256.564 389.058 256.564 cv
387.402 256.564 386.058 257.908 386.058 259.564 cv
386.058 261.222 387.402 262.564 389.058 262.564 cv
390.715 262.564 392.058 261.222 392.058 259.564 cv
387.736 261.591 mo
387.736 259.934 386.393 258.591 384.736 258.591 cv
383.079 258.591 381.736 259.934 381.736 261.591 cv
381.736 263.247 383.079 264.591 384.736 264.591 cv
386.393 264.591 387.736 263.247 387.736 261.591 cv
387.736 261.591 mo
387.736 259.934 386.393 258.591 384.736 258.591 cv
383.079 258.591 381.736 259.934 381.736 261.591 cv
381.736 263.247 383.079 264.591 384.736 264.591 cv
386.393 264.591 387.736 263.247 387.736 261.591 cv
383.234 263.608 mo
383.234 261.951 381.891 260.608 380.234 260.608 cv
378.578 260.608 377.234 261.951 377.234 263.608 cv
377.234 265.266 378.578 266.608 380.234 266.608 cv
381.891 266.608 383.234 265.266 383.234 263.608 cv
383.234 263.608 mo
383.234 261.951 381.891 260.608 380.234 260.608 cv
378.578 260.608 377.234 261.951 377.234 263.608 cv
377.234 265.266 378.578 266.608 380.234 266.608 cv
381.891 266.608 383.234 265.266 383.234 263.608 cv
378.55 265.618 mo
378.55 263.961 377.208 262.618 375.55 262.618 cv
373.893 262.618 372.55 263.961 372.55 265.618 cv
372.55 267.275 373.893 268.618 375.55 268.618 cv
377.208 268.618 378.55 267.275 378.55 265.618 cv
378.55 265.618 mo
378.55 263.961 377.208 262.618 375.55 262.618 cv
373.893 262.618 372.55 263.961 372.55 265.618 cv
372.55 267.275 373.893 268.618 375.55 268.618 cv
377.208 268.618 378.55 267.275 378.55 265.618 cv
373.682 267.62 mo
373.682 265.963 372.339 264.62 370.682 264.62 cv
369.025 264.62 367.682 265.963 367.682 267.62 cv
367.682 269.276 369.025 270.62 370.682 270.62 cv
372.339 270.62 373.682 269.276 373.682 267.62 cv
373.682 267.62 mo
373.682 265.963 372.339 264.62 370.682 264.62 cv
369.025 264.62 367.682 265.963 367.682 267.62 cv
367.682 269.276 369.025 270.62 370.682 270.62 cv
372.339 270.62 373.682 269.276 373.682 267.62 cv
368.626 269.613 mo
368.626 267.956 367.284 266.613 365.626 266.613 cv
363.969 266.613 362.626 267.956 362.626 269.613 cv
362.626 271.271 363.969 272.613 365.626 272.613 cv
367.284 272.613 368.626 271.271 368.626 269.613 cv
368.626 269.613 mo
368.626 267.956 367.284 266.613 365.626 266.613 cv
363.969 266.613 362.626 267.956 362.626 269.613 cv
362.626 271.271 363.969 272.613 365.626 272.613 cv
367.284 272.613 368.626 271.271 368.626 269.613 cv
363.382 271.599 mo
363.382 269.941 362.04 268.599 360.382 268.599 cv
358.725 268.599 357.382 269.941 357.382 271.599 cv
357.382 273.255 358.725 274.599 360.382 274.599 cv
362.04 274.599 363.382 273.255 363.382 271.599 cv
363.382 271.599 mo
363.382 269.941 362.039 268.599 360.382 268.599 cv
358.725 268.599 357.382 269.941 357.382 271.599 cv
357.382 273.255 358.725 274.599 360.382 274.599 cv
362.039 274.599 363.382 273.255 363.382 271.599 cv
357.946 273.574 mo
357.946 271.918 356.603 270.574 354.946 270.574 cv
353.289 270.574 351.946 271.918 351.946 273.574 cv
351.946 275.231 353.289 276.574 354.946 276.574 cv
356.603 276.574 357.946 275.231 357.946 273.574 cv
357.946 273.574 mo
357.946 271.918 356.603 270.574 354.946 270.574 cv
353.289 270.574 351.946 271.918 351.946 273.574 cv
351.946 275.231 353.289 276.574 354.946 276.574 cv
356.603 276.574 357.946 275.231 357.946 273.574 cv
352.316 275.542 mo
352.316 273.886 350.973 272.542 349.316 272.542 cv
347.66 272.542 346.316 273.886 346.316 275.542 cv
346.316 277.199 347.66 278.542 349.316 278.542 cv
350.973 278.542 352.316 277.199 352.316 275.542 cv
352.316 275.542 mo
352.316 273.886 350.973 272.542 349.316 272.542 cv
347.66 272.542 346.316 273.886 346.316 275.542 cv
346.316 277.199 347.66 278.542 349.316 278.542 cv
350.973 278.542 352.316 277.199 352.316 275.542 cv
346.491 277.501 mo
346.491 275.845 345.148 274.501 343.491 274.501 cv
341.834 274.501 340.491 275.845 340.491 277.501 cv
340.491 279.158 341.834 280.501 343.491 280.501 cv
345.148 280.501 346.491 279.158 346.491 277.501 cv
346.491 277.502 mo
346.491 275.845 345.148 274.502 343.491 274.502 cv
341.834 274.502 340.491 275.845 340.491 277.502 cv
340.491 279.158 341.834 280.502 343.491 280.502 cv
345.148 280.502 346.491 279.158 346.491 277.502 cv
340.468 279.451 mo
340.468 277.795 339.125 276.451 337.468 276.451 cv
335.811 276.451 334.468 277.795 334.468 279.451 cv
334.468 281.108 335.811 282.451 337.468 282.451 cv
339.125 282.451 340.468 281.108 340.468 279.451 cv
340.468 279.451 mo
340.468 277.795 339.125 276.451 337.468 276.451 cv
335.811 276.451 334.468 277.795 334.468 279.451 cv
334.468 281.108 335.811 282.451 337.468 282.451 cv
339.125 282.451 340.468 281.108 340.468 279.451 cv
334.246 281.393 mo
334.246 279.735 332.903 278.393 331.246 278.393 cv
329.588 278.393 328.246 279.735 328.246 281.393 cv
328.246 283.05 329.588 284.393 331.246 284.393 cv
332.903 284.393 334.246 283.05 334.246 281.393 cv
334.246 281.393 mo
334.246 279.735 332.903 278.393 331.246 278.393 cv
329.588 278.393 328.246 279.735 328.246 281.393 cv
328.246 283.05 329.588 284.393 331.246 284.393 cv
332.903 284.393 334.246 283.05 334.246 281.393 cv
327.822 283.325 mo
327.822 281.668 326.479 280.325 324.822 280.325 cv
323.166 280.325 321.822 281.668 321.822 283.325 cv
321.822 284.981 323.166 286.325 324.822 286.325 cv
326.479 286.325 327.822 284.981 327.822 283.325 cv
327.822 283.325 mo
327.822 281.668 326.479 280.325 324.822 280.325 cv
323.166 280.325 321.822 281.668 321.822 283.325 cv
321.822 284.981 323.166 286.325 324.822 286.325 cv
326.479 286.325 327.822 284.981 327.822 283.325 cv
321.196 285.247 mo
321.196 283.591 319.853 282.247 318.196 282.247 cv
316.539 282.247 315.196 283.591 315.196 285.247 cv
315.196 286.904 316.539 288.247 318.196 288.247 cv
319.853 288.247 321.196 286.904 321.196 285.247 cv
321.196 285.247 mo
321.196 283.591 319.853 282.247 318.196 282.247 cv
316.539 282.247 315.196 283.591 315.196 285.247 cv
315.196 286.904 316.539 288.247 318.196 288.247 cv
319.853 288.247 321.196 286.904 321.196 285.247 cv
314.365 287.161 mo
314.365 285.504 313.022 284.161 311.365 284.161 cv
309.708 284.161 308.365 285.504 308.365 287.161 cv
308.365 288.817 309.708 290.161 311.365 290.161 cv
313.022 290.161 314.365 288.817 314.365 287.161 cv
314.365 287.161 mo
314.365 285.504 313.022 284.161 311.365 284.161 cv
309.708 284.161 308.365 285.504 308.365 287.161 cv
308.365 288.817 309.708 290.161 311.365 290.161 cv
313.022 290.161 314.365 288.817 314.365 287.161 cv
307.329 289.064 mo
307.329 287.407 305.986 286.064 304.329 286.064 cv
302.671 286.064 301.329 287.407 301.329 289.064 cv
301.329 290.722 302.671 292.064 304.329 292.064 cv
305.986 292.064 307.329 290.722 307.329 289.064 cv
307.329 289.064 mo
307.329 287.407 305.986 286.064 304.329 286.064 cv
302.671 286.064 301.329 287.407 301.329 289.064 cv
301.329 290.722 302.671 292.064 304.329 292.064 cv
305.986 292.064 307.329 290.722 307.329 289.064 cv
300.085 290.959 mo
300.085 289.302 298.743 287.959 297.085 287.959 cv
295.428 287.959 294.085 289.302 294.085 290.959 cv
294.085 292.616 295.428 293.959 297.085 293.959 cv
298.743 293.959 300.085 292.616 300.085 290.959 cv
300.085 290.959 mo
300.085 289.302 298.743 287.959 297.085 287.959 cv
295.428 287.959 294.085 289.302 294.085 290.959 cv
294.085 292.616 295.428 293.959 297.085 293.959 cv
298.743 293.959 300.085 292.616 300.085 290.959 cv
292.634 292.844 mo
292.634 291.187 291.292 289.844 289.634 289.844 cv
287.978 289.844 286.634 291.187 286.634 292.844 cv
286.634 294.501 287.978 295.844 289.634 295.844 cv
291.292 295.844 292.634 294.501 292.634 292.844 cv
292.634 292.844 mo
292.634 291.187 291.292 289.844 289.634 289.844 cv
287.978 289.844 286.634 291.187 286.634 292.844 cv
286.634 294.501 287.978 295.844 289.634 295.844 cv
291.292 295.844 292.634 294.501 292.634 292.844 cv
284.975 294.718 mo
284.975 293.062 283.632 291.718 281.975 291.718 cv
280.318 291.718 278.975 293.062 278.975 294.718 cv
278.975 296.375 280.318 297.718 281.975 297.718 cv
283.632 297.718 284.975 296.375 284.975 294.718 cv
284.975 294.718 mo
284.975 293.062 283.632 291.718 281.975 291.718 cv
280.318 291.718 278.975 293.062 278.975 294.718 cv
278.975 296.375 280.318 297.718 281.975 297.718 cv
283.632 297.718 284.975 296.375 284.975 294.718 cv
277.106 296.583 mo
277.106 294.926 275.763 293.583 274.106 293.583 cv
272.449 293.583 271.106 294.926 271.106 296.583 cv
271.106 298.24 272.449 299.583 274.106 299.583 cv
275.763 299.583 277.106 298.24 277.106 296.583 cv
277.106 296.583 mo
277.106 294.926 275.763 293.583 274.106 293.583 cv
272.449 293.583 271.106 294.926 271.106 296.583 cv
271.106 298.24 272.449 299.583 274.106 299.583 cv
275.763 299.583 277.106 298.24 277.106 296.583 cv
269.026 298.438 mo
269.026 296.78 267.684 295.438 266.026 295.438 cv
264.37 295.438 263.026 296.78 263.026 298.438 cv
263.026 300.095 264.37 301.438 266.026 301.438 cv
267.684 301.438 269.026 300.095 269.026 298.438 cv
269.026 298.438 mo
269.026 296.78 267.684 295.438 266.026 295.438 cv
264.37 295.438 263.026 296.78 263.026 298.438 cv
263.026 300.095 264.37 301.438 266.026 301.438 cv
267.684 301.438 269.026 300.095 269.026 298.438 cv
260.737 300.282 mo
260.737 298.625 259.394 297.282 257.737 297.282 cv
256.08 297.282 254.737 298.625 254.737 300.282 cv
254.737 301.939 256.08 303.282 257.737 303.282 cv
259.394 303.282 260.737 301.939 260.737 300.282 cv
260.737 300.282 mo
260.737 298.625 259.394 297.282 257.737 297.282 cv
256.08 297.282 254.737 298.625 254.737 300.282 cv
254.737 301.939 256.08 303.282 257.737 303.282 cv
259.394 303.282 260.737 301.939 260.737 300.282 cv
252.236 302.116 mo
252.236 300.459 250.893 299.116 249.236 299.116 cv
247.579 299.116 246.236 300.459 246.236 302.116 cv
246.236 303.773 247.579 305.116 249.236 305.116 cv
250.893 305.116 252.236 303.773 252.236 302.116 cv
252.236 302.116 mo
252.236 300.459 250.893 299.116 249.236 299.116 cv
247.579 299.116 246.236 300.459 246.236 302.116 cv
246.236 303.773 247.579 305.116 249.236 305.116 cv
250.893 305.116 252.236 303.773 252.236 302.116 cv
243.525 303.94 mo
243.525 302.283 242.182 300.94 240.525 300.94 cv
238.868 300.94 237.525 302.283 237.525 303.94 cv
237.525 305.598 238.868 306.94 240.525 306.94 cv
242.182 306.94 243.525 305.598 243.525 303.94 cv
243.525 303.94 mo
243.525 302.283 242.182 300.94 240.525 300.94 cv
238.868 300.94 237.525 302.283 237.525 303.94 cv
237.525 305.598 238.868 306.94 240.525 306.94 cv
242.182 306.94 243.525 305.598 243.525 303.94 cv
234.604 305.754 mo
234.604 304.097 233.26 302.754 231.604 302.754 cv
229.946 302.754 228.604 304.097 228.604 305.754 cv
228.604 307.411 229.946 308.754 231.604 308.754 cv
233.26 308.754 234.604 307.411 234.604 305.754 cv
234.604 305.754 mo
234.604 304.097 233.26 302.754 231.604 302.754 cv
229.946 302.754 228.604 304.097 228.604 305.754 cv
228.604 307.411 229.946 308.754 231.604 308.754 cv
233.26 308.754 234.604 307.411 234.604 305.754 cv
225.471 307.557 mo
225.471 305.899 224.128 304.557 222.471 304.557 cv
220.814 304.557 219.471 305.899 219.471 307.557 cv
219.471 309.214 220.814 310.557 222.471 310.557 cv
224.128 310.557 225.471 309.214 225.471 307.557 cv
225.471 307.557 mo
225.471 305.899 224.128 304.557 222.471 304.557 cv
220.814 304.557 219.471 305.899 219.471 307.557 cv
219.471 309.214 220.814 310.557 222.471 310.557 cv
224.128 310.557 225.471 309.214 225.471 307.557 cv
216.13 309.349 mo
216.13 307.692 214.787 306.349 213.13 306.349 cv
211.473 306.349 210.13 307.692 210.13 309.349 cv
210.13 311.006 211.473 312.349 213.13 312.349 cv
214.787 312.349 216.13 311.006 216.13 309.349 cv
216.13 309.349 mo
216.13 307.692 214.787 306.349 213.13 306.349 cv
211.473 306.349 210.13 307.692 210.13 309.349 cv
210.13 311.006 211.473 312.349 213.13 312.349 cv
214.787 312.349 216.13 311.006 216.13 309.349 cv
206.579 311.131 mo
206.579 309.474 205.236 308.131 203.579 308.131 cv
201.922 308.131 200.579 309.474 200.579 311.131 cv
200.579 312.787 201.922 314.131 203.579 314.131 cv
205.236 314.131 206.579 312.787 206.579 311.131 cv
206.579 311.131 mo
206.579 309.474 205.236 308.131 203.579 308.131 cv
201.922 308.131 200.579 309.474 200.579 311.131 cv
200.579 312.787 201.922 314.131 203.579 314.131 cv
205.236 314.131 206.579 312.787 206.579 311.131 cv
196.82 312.901 mo
196.82 311.244 195.478 309.901 193.82 309.901 cv
192.164 309.901 190.82 311.244 190.82 312.901 cv
190.82 314.559 192.164 315.901 193.82 315.901 cv
195.478 315.901 196.82 314.559 196.82 312.901 cv
196.82 312.901 mo
196.82 311.244 195.478 309.901 193.82 309.901 cv
192.164 309.901 190.82 311.244 190.82 312.901 cv
190.82 314.559 192.164 315.901 193.82 315.901 cv
195.478 315.901 196.82 314.559 196.82 312.901 cv
186.855 314.661 mo
186.855 313.005 185.512 311.661 183.855 311.661 cv
182.198 311.661 180.855 313.005 180.855 314.661 cv
180.855 316.318 182.198 317.661 183.855 317.661 cv
185.512 317.661 186.855 316.318 186.855 314.661 cv
186.855 314.661 mo
186.855 313.005 185.512 311.661 183.855 311.661 cv
182.198 311.661 180.855 313.005 180.855 314.661 cv
180.855 316.318 182.198 317.661 183.855 317.661 cv
185.512 317.661 186.855 316.318 186.855 314.661 cv
176.684 316.411 mo
176.684 314.754 175.341 313.411 173.684 313.411 cv
172.027 313.411 170.684 314.754 170.684 316.411 cv
170.684 318.067 172.027 319.411 173.684 319.411 cv
175.341 319.411 176.684 318.067 176.684 316.411 cv
176.684 316.411 mo
176.684 314.754 175.341 313.411 173.684 313.411 cv
172.027 313.411 170.684 314.754 170.684 316.411 cv
170.684 318.067 172.027 319.411 173.684 319.411 cv
175.341 319.411 176.684 318.067 176.684 316.411 cv
166.309 318.149 mo
166.309 316.492 164.965 315.149 163.309 315.149 cv
161.651 315.149 160.309 316.492 160.309 318.149 cv
160.309 319.806 161.651 321.149 163.309 321.149 cv
164.965 321.149 166.309 319.806 166.309 318.149 cv
166.309 318.149 mo
166.309 316.492 164.965 315.149 163.309 315.149 cv
161.651 315.149 160.309 316.492 160.309 318.149 cv
160.309 319.806 161.651 321.149 163.309 321.149 cv
164.965 321.149 166.309 319.806 166.309 318.149 cv
155.731 319.876 mo
155.731 318.219 154.388 316.876 152.731 316.876 cv
151.074 316.876 149.731 318.219 149.731 319.876 cv
149.731 321.533 151.074 322.876 152.731 322.876 cv
154.388 322.876 155.731 321.533 155.731 319.876 cv
155.731 319.876 mo
155.731 318.219 154.388 316.876 152.731 316.876 cv
151.074 316.876 149.731 318.219 149.731 319.876 cv
149.731 321.533 151.074 322.876 152.731 322.876 cv
154.388 322.876 155.731 321.533 155.731 319.876 cv
144.954 321.593 mo
144.954 319.936 143.61 318.593 141.954 318.593 cv
140.296 318.593 138.954 319.936 138.954 321.593 cv
138.954 323.249 140.296 324.593 141.954 324.593 cv
143.61 324.593 144.954 323.249 144.954 321.593 cv
144.954 321.593 mo
144.954 319.936 143.61 318.593 141.954 318.593 cv
140.296 318.593 138.954 319.936 138.954 321.593 cv
138.954 323.249 140.296 324.593 141.954 324.593 cv
143.61 324.593 144.954 323.249 144.954 321.593 cv
133.978 323.298 mo
133.978 321.641 132.635 320.298 130.978 320.298 cv
129.321 320.298 127.978 321.641 127.978 323.298 cv
127.978 324.955 129.321 326.298 130.978 326.298 cv
132.635 326.298 133.978 324.955 133.978 323.298 cv
133.978 323.298 mo
133.978 321.641 132.635 320.298 130.978 320.298 cv
129.321 320.298 127.978 321.641 127.978 323.298 cv
127.978 324.955 129.321 326.298 130.978 326.298 cv
132.635 326.298 133.978 324.955 133.978 323.298 cv
122.806 324.992 mo
122.806 323.335 121.463 321.992 119.806 321.992 cv
118.149 321.992 116.806 323.335 116.806 324.992 cv
116.806 326.649 118.149 327.992 119.806 327.992 cv
121.463 327.992 122.806 326.649 122.806 324.992 cv
122.806 324.992 mo
122.806 323.335 121.463 321.992 119.806 321.992 cv
118.149 321.992 116.806 323.335 116.806 324.992 cv
116.806 326.649 118.149 327.992 119.806 327.992 cv
121.463 327.992 122.806 326.649 122.806 324.992 cv
111.441 326.676 mo
111.441 325.019 110.099 323.676 108.441 323.676 cv
106.785 323.676 105.441 325.019 105.441 326.676 cv
105.441 328.332 106.785 329.676 108.441 329.676 cv
110.099 329.676 111.441 328.332 111.441 326.676 cv
0 0 0 rgb
@
357.768 63.1357 mo
357.768 61.4785 356.425 60.1357 354.768 60.1357 cv
353.112 60.1357 351.768 61.4785 351.768 63.1357 cv
351.768 64.793 353.112 66.1357 354.768 66.1357 cv
356.425 66.1357 357.768 64.793 357.768 63.1357 cv
360.447 65.0771 mo
360.447 63.4204 359.103 62.0771 357.447 62.0771 cv
355.79 62.0771 354.447 63.4204 354.447 65.0771 cv
354.447 66.7344 355.79 68.0771 357.447 68.0771 cv
359.103 68.0771 360.447 66.7344 360.447 65.0771 cv
360.447 65.0776 mo
360.447 63.4204 359.103 62.0776 357.447 62.0776 cv
355.79 62.0776 354.447 63.4204 354.447 65.0776 cv
354.447 66.7344 355.79 68.0776 357.447 68.0776 cv
359.103 68.0776 360.447 66.7344 360.447 65.0776 cv
363.091 67.0488 mo
363.091 65.3921 361.749 64.0488 360.091 64.0488 cv
358.434 64.0488 357.091 65.3921 357.091 67.0488 cv
357.091 68.7061 358.434 70.0488 360.091 70.0488 cv
361.749 70.0488 363.091 68.7061 363.091 67.0488 cv
363.091 67.0488 mo
363.091 65.3921 361.749 64.0488 360.091 64.0488 cv
358.434 64.0488 357.091 65.3921 357.091 67.0488 cv
357.091 68.7061 358.434 70.0488 360.091 70.0488 cv
361.749 70.0488 363.091 68.7061 363.091 67.0488 cv
365.705 69.0479 mo
365.705 67.3906 364.361 66.0479 362.705 66.0479 cv
361.047 66.0479 359.705 67.3906 359.705 69.0479 cv
359.705 70.7046 361.047 72.0479 362.705 72.0479 cv
364.361 72.0479 365.705 70.7046 365.705 69.0479 cv
365.705 69.0479 mo
365.705 67.3906 364.361 66.0479 362.705 66.0479 cv
361.047 66.0479 359.705 67.3906 359.705 69.0479 cv
359.705 70.7046 361.047 72.0479 362.705 72.0479 cv
364.361 72.0479 365.705 70.7046 365.705 69.0479 cv
368.286 71.0713 mo
368.286 69.4141 366.942 68.0713 365.286 68.0713 cv
363.628 68.0713 362.286 69.4141 362.286 71.0713 cv
362.286 72.728 363.628 74.0713 365.286 74.0713 cv
366.942 74.0713 368.286 72.728 368.286 71.0713 cv
368.286 71.0713 mo
368.286 69.4141 366.942 68.0713 365.286 68.0713 cv
363.628 68.0713 362.286 69.4141 362.286 71.0713 cv
362.286 72.7285 363.628 74.0713 365.286 74.0713 cv
366.942 74.0713 368.286 72.7285 368.286 71.0713 cv
370.835 73.1177 mo
370.835 71.4604 369.493 70.1177 367.835 70.1177 cv
366.178 70.1177 364.835 71.4604 364.835 73.1177 cv
364.835 74.7744 366.178 76.1177 367.835 76.1177 cv
369.493 76.1177 370.835 74.7744 370.835 73.1177 cv
370.835 73.1177 mo
370.835 71.4604 369.493 70.1177 367.835 70.1177 cv
366.178 70.1177 364.835 71.4604 364.835 73.1177 cv
364.835 74.7744 366.178 76.1177 367.835 76.1177 cv
369.493 76.1177 370.835 74.7744 370.835 73.1177 cv
373.355 75.1846 mo
373.355 73.5278 372.012 72.1846 370.355 72.1846 cv
368.699 72.1846 367.355 73.5278 367.355 75.1846 cv
367.355 76.8418 368.699 78.1846 370.355 78.1846 cv
372.012 78.1846 373.355 76.8418 373.355 75.1846 cv
373.355 75.1846 mo
373.355 73.5278 372.012 72.1846 370.355 72.1846 cv
368.699 72.1846 367.355 73.5278 367.355 75.1846 cv
367.355 76.8418 368.699 78.1846 370.355 78.1846 cv
372.012 78.1846 373.355 76.8418 373.355 75.1846 cv
375.845 77.271 mo
375.845 75.6138 374.502 74.271 372.845 74.271 cv
371.188 74.271 369.845 75.6138 369.845 77.271 cv
369.845 78.9277 371.188 80.271 372.845 80.271 cv
374.502 80.271 375.845 78.9277 375.845 77.271 cv
375.845 77.271 mo
375.845 75.6138 374.502 74.271 372.845 74.271 cv
371.188 74.271 369.845 75.6138 369.845 77.271 cv
369.845 78.9277 371.188 80.271 372.845 80.271 cv
374.502 80.271 375.845 78.9277 375.845 77.271 cv
378.305 79.3745 mo
378.305 77.7178 376.962 76.3745 375.305 76.3745 cv
373.649 76.3745 372.305 77.7178 372.305 79.3745 cv
372.305 81.0317 373.649 82.3745 375.305 82.3745 cv
376.962 82.3745 378.305 81.0317 378.305 79.3745 cv
378.305 79.3745 mo
378.305 77.7178 376.962 76.3745 375.305 76.3745 cv
373.649 76.3745 372.305 77.7178 372.305 79.3745 cv
372.305 81.0317 373.649 82.3745 375.305 82.3745 cv
376.962 82.3745 378.305 81.0317 378.305 79.3745 cv
380.737 81.4941 mo
380.737 79.8374 379.393 78.4941 377.737 78.4941 cv
376.08 78.4941 374.737 79.8374 374.737 81.4941 cv
374.737 83.1514 376.08 84.4941 377.737 84.4941 cv
379.393 84.4941 380.737 83.1514 380.737 81.4941 cv
380.737 81.4946 mo
380.737 79.8374 379.393 78.4946 377.737 78.4946 cv
376.08 78.4946 374.737 79.8374 374.737 81.4946 cv
374.737 83.1514 376.08 84.4946 377.737 84.4946 cv
379.393 84.4946 380.737 83.1514 380.737 81.4946 cv
383.138 83.6289 mo
383.138 81.9717 381.795 80.6289 380.138 80.6289 cv
378.481 80.6289 377.138 81.9717 377.138 83.6289 cv
377.138 85.2861 378.481 86.6289 380.138 86.6289 cv
381.795 86.6289 383.138 85.2861 383.138 83.6289 cv
383.138 83.6289 mo
383.138 81.9722 381.795 80.6289 380.138 80.6289 cv
378.481 80.6289 377.138 81.9722 377.138 83.6289 cv
377.138 85.2861 378.481 86.6289 380.138 86.6289 cv
381.795 86.6289 383.138 85.2861 383.138 83.6289 cv
385.511 85.7769 mo
385.511 84.1201 384.167 82.7769 382.511 82.7769 cv
380.854 82.7769 379.511 84.1201 379.511 85.7769 cv
379.511 87.4341 380.854 88.7769 382.511 88.7769 cv
384.167 88.7769 385.511 87.4341 385.511 85.7769 cv
385.511 85.7773 mo
385.511 84.1201 384.167 82.7773 382.511 82.7773 cv
380.854 82.7773 379.511 84.1201 379.511 85.7773 cv
379.511 87.4341 380.854 88.7773 382.511 88.7773 cv
384.167 88.7773 385.511 87.4341 385.511 85.7773 cv
387.855 87.9375 mo
387.855 86.2808 386.511 84.9375 384.855 84.9375 cv
383.198 84.9375 381.855 86.2808 381.855 87.9375 cv
381.855 89.5947 383.198 90.9375 384.855 90.9375 cv
386.511 90.9375 387.855 89.5947 387.855 87.9375 cv
387.855 87.9375 mo
387.855 86.2808 386.511 84.9375 384.855 84.9375 cv
383.198 84.9375 381.855 86.2808 381.855 87.9375 cv
381.855 89.5947 383.198 90.9375 384.855 90.9375 cv
386.511 90.9375 387.855 89.5947 387.855 87.9375 cv
390.169 90.1099 mo
390.169 88.4526 388.827 87.1099 387.169 87.1099 cv
385.512 87.1099 384.169 88.4526 384.169 90.1099 cv
384.169 91.7666 385.512 93.1099 387.169 93.1099 cv
388.827 93.1099 390.169 91.7666 390.169 90.1099 cv
390.169 90.1099 mo
390.169 88.4526 388.827 87.1099 387.169 87.1099 cv
385.512 87.1099 384.169 88.4526 384.169 90.1099 cv
384.169 91.7666 385.512 93.1099 387.169 93.1099 cv
388.827 93.1099 390.169 91.7666 390.169 90.1099 cv
392.455 92.2925 mo
392.455 90.6353 391.112 89.2925 389.455 89.2925 cv
387.798 89.2925 386.455 90.6353 386.455 92.2925 cv
386.455 93.9492 387.798 95.2925 389.455 95.2925 cv
391.112 95.2925 392.455 93.9492 392.455 92.2925 cv
392.455 92.2925 mo
392.455 90.6353 391.112 89.2925 389.455 89.2925 cv
387.798 89.2925 386.455 90.6353 386.455 92.2925 cv
386.455 93.9492 387.798 95.2925 389.455 95.2925 cv
391.112 95.2925 392.455 93.9492 392.455 92.2925 cv
394.711 94.4844 mo
394.711 92.8276 393.369 91.4844 391.711 91.4844 cv
390.054 91.4844 388.711 92.8276 388.711 94.4844 cv
388.711 96.1416 390.054 97.4844 391.711 97.4844 cv
393.369 97.4844 394.711 96.1416 394.711 94.4844 cv
394.711 94.4844 mo
394.711 92.8276 393.369 91.4844 391.711 91.4844 cv
390.054 91.4844 388.711 92.8276 388.711 94.4844 cv
388.711 96.1416 390.054 97.4844 391.711 97.4844 cv
393.369 97.4844 394.711 96.1416 394.711 94.4844 cv
396.938 96.6855 mo
396.938 95.0288 395.595 93.6855 393.938 93.6855 cv
392.281 93.6855 390.938 95.0288 390.938 96.6855 cv
390.938 98.3428 392.281 99.6855 393.938 99.6855 cv
395.595 99.6855 396.938 98.3428 396.938 96.6855 cv
396.938 96.6855 mo
396.938 95.0288 395.595 93.6855 393.938 93.6855 cv
392.281 93.6855 390.938 95.0288 390.938 96.6855 cv
390.938 98.3428 392.281 99.6855 393.938 99.6855 cv
395.595 99.6855 396.938 98.3428 396.938 96.6855 cv
399.134 98.895 mo
399.134 97.2378 397.792 95.895 396.134 95.895 cv
394.478 95.895 393.134 97.2378 393.134 98.895 cv
393.134 100.552 394.478 101.895 396.134 101.895 cv
397.792 101.895 399.134 100.552 399.134 98.895 cv
399.134 98.895 mo
399.134 97.2378 397.792 95.895 396.134 95.895 cv
394.478 95.895 393.134 97.2378 393.134 98.895 cv
393.134 100.552 394.478 101.895 396.134 101.895 cv
397.792 101.895 399.134 100.552 399.134 98.895 cv
401.301 101.111 mo
401.301 99.4546 399.958 98.1113 398.301 98.1113 cv
396.644 98.1113 395.301 99.4546 395.301 101.111 cv
395.301 102.769 396.644 104.111 398.301 104.111 cv
399.958 104.111 401.301 102.769 401.301 101.111 cv
401.301 101.111 mo
401.301 99.4546 399.958 98.1113 398.301 98.1113 cv
396.644 98.1113 395.301 99.4546 395.301 101.111 cv
395.301 102.769 396.644 104.111 398.301 104.111 cv
399.958 104.111 401.301 102.769 401.301 101.111 cv
403.437 103.335 mo
403.437 101.678 402.094 100.335 400.437 100.335 cv
398.78 100.335 397.437 101.678 397.437 103.335 cv
397.437 104.992 398.78 106.335 400.437 106.335 cv
402.094 106.335 403.437 104.992 403.437 103.335 cv
403.437 103.335 mo
403.437 101.678 402.094 100.335 400.437 100.335 cv
398.78 100.335 397.437 101.678 397.437 103.335 cv
397.437 104.992 398.78 106.335 400.437 106.335 cv
402.094 106.335 403.437 104.992 403.437 103.335 cv
405.542 105.564 mo
405.542 103.908 404.199 102.564 402.542 102.564 cv
400.884 102.564 399.542 103.908 399.542 105.564 cv
399.542 107.222 400.884 108.564 402.542 108.564 cv
404.199 108.564 405.542 107.222 405.542 105.564 cv
405.542 105.565 mo
405.542 103.908 404.199 102.565 402.542 102.565 cv
400.884 102.565 399.542 103.908 399.542 105.565 cv
399.542 107.222 400.884 108.565 402.542 108.565 cv
404.199 108.565 405.542 107.222 405.542 105.565 cv
407.615 107.8 mo
407.615 106.143 406.272 104.8 404.615 104.8 cv
402.958 104.8 401.615 106.143 401.615 107.8 cv
401.615 109.457 402.958 110.8 404.615 110.8 cv
406.272 110.8 407.615 109.457 407.615 107.8 cv
407.615 107.8 mo
407.615 106.143 406.272 104.8 404.615 104.8 cv
402.958 104.8 401.615 106.143 401.615 107.8 cv
401.615 109.457 402.958 110.8 404.615 110.8 cv
406.272 110.8 407.615 109.457 407.615 107.8 cv
409.656 110.041 mo
409.656 108.383 408.312 107.041 406.656 107.041 cv
404.999 107.041 403.656 108.383 403.656 110.041 cv
403.656 111.697 404.999 113.041 406.656 113.041 cv
408.312 113.041 409.656 111.697 409.656 110.041 cv
409.656 110.041 mo
409.656 108.383 408.312 107.041 406.656 107.041 cv
404.999 107.041 403.656 108.383 403.656 110.041 cv
403.656 111.697 404.999 113.041 406.656 113.041 cv
408.312 113.041 409.656 111.697 409.656 110.041 cv
411.663 112.286 mo
411.663 110.628 410.32 109.286 408.663 109.286 cv
407.005 109.286 405.663 110.628 405.663 112.286 cv
405.663 113.942 407.005 115.286 408.663 115.286 cv
410.32 115.286 411.663 113.942 411.663 112.286 cv
411.663 112.286 mo
411.663 110.628 410.32 109.286 408.663 109.286 cv
407.005 109.286 405.663 110.628 405.663 112.286 cv
405.663 113.942 407.005 115.286 408.663 115.286 cv
410.32 115.286 411.663 113.942 411.663 112.286 cv
413.636 114.535 mo
413.636 112.878 412.293 111.535 410.636 111.535 cv
408.98 111.535 407.636 112.878 407.636 114.535 cv
407.636 116.192 408.98 117.535 410.636 117.535 cv
412.293 117.535 413.636 116.192 413.636 114.535 cv
413.636 114.535 mo
413.636 112.878 412.293 111.535 410.636 111.535 cv
408.98 111.535 407.636 112.878 407.636 114.535 cv
407.636 116.192 408.98 117.535 410.636 117.535 cv
412.293 117.535 413.636 116.192 413.636 114.535 cv
415.576 116.788 mo
415.576 115.13 414.233 113.788 412.576 113.788 cv
410.919 113.788 409.576 115.13 409.576 116.788 cv
409.576 118.444 410.919 119.788 412.576 119.788 cv
414.233 119.788 415.576 118.444 415.576 116.788 cv
415.576 116.788 mo
415.576 115.131 414.233 113.788 412.576 113.788 cv
410.919 113.788 409.576 115.131 409.576 116.788 cv
409.576 118.445 410.919 119.788 412.576 119.788 cv
414.233 119.788 415.576 118.445 415.576 116.788 cv
417.48 119.044 mo
417.48 117.387 416.137 116.044 414.48 116.044 cv
412.823 116.044 411.48 117.387 411.48 119.044 cv
411.48 120.701 412.823 122.044 414.48 122.044 cv
416.137 122.044 417.48 120.701 417.48 119.044 cv
417.48 119.044 mo
417.48 117.387 416.137 116.044 414.48 116.044 cv
412.823 116.044 411.48 117.387 411.48 119.044 cv
411.48 120.701 412.823 122.044 414.48 122.044 cv
416.137 122.044 417.48 120.701 417.48 119.044 cv
419.347 121.303 mo
419.347 119.646 418.004 118.303 416.347 118.303 cv
414.691 118.303 413.347 119.646 413.347 121.303 cv
413.347 122.96 414.691 124.303 416.347 124.303 cv
418.004 124.303 419.347 122.96 419.347 121.303 cv
419.347 121.303 mo
419.347 119.646 418.004 118.303 416.347 118.303 cv
414.691 118.303 413.347 119.646 413.347 121.303 cv
413.347 122.96 414.691 124.303 416.347 124.303 cv
418.004 124.303 419.347 122.96 419.347 121.303 cv
421.178 123.564 mo
421.178 121.907 419.835 120.564 418.178 120.564 cv
416.521 120.564 415.178 121.907 415.178 123.564 cv
415.178 125.222 416.521 126.564 418.178 126.564 cv
419.835 126.564 421.178 125.222 421.178 123.564 cv
421.178 123.564 mo
421.178 121.908 419.835 120.564 418.178 120.564 cv
416.521 120.564 415.178 121.908 415.178 123.564 cv
415.178 125.222 416.521 126.564 418.178 126.564 cv
419.835 126.564 421.178 125.222 421.178 123.564 cv
422.97 125.828 mo
422.97 124.171 421.627 122.828 419.97 122.828 cv
418.314 122.828 416.97 124.171 416.97 125.828 cv
416.97 127.485 418.314 128.828 419.97 128.828 cv
421.627 128.828 422.97 127.485 422.97 125.828 cv
422.97 125.828 mo
422.97 124.171 421.627 122.828 419.97 122.828 cv
418.314 122.828 416.97 124.171 416.97 125.828 cv
416.97 127.485 418.314 128.828 419.97 128.828 cv
421.627 128.828 422.97 127.485 422.97 125.828 cv
424.724 128.094 mo
424.724 126.437 423.38 125.094 421.724 125.094 cv
420.067 125.094 418.724 126.437 418.724 128.094 cv
418.724 129.751 420.067 131.094 421.724 131.094 cv
423.38 131.094 424.724 129.751 424.724 128.094 cv
424.724 128.094 mo
424.724 126.437 423.38 125.094 421.724 125.094 cv
420.067 125.094 418.724 126.437 418.724 128.094 cv
418.724 129.751 420.067 131.094 421.724 131.094 cv
423.38 131.094 424.724 129.751 424.724 128.094 cv
426.437 130.361 mo
426.437 128.704 425.093 127.361 423.437 127.361 cv
421.78 127.361 420.437 128.704 420.437 130.361 cv
420.437 132.018 421.78 133.361 423.437 133.361 cv
425.093 133.361 426.437 132.018 426.437 130.361 cv
426.437 130.361 mo
426.437 128.704 425.093 127.361 423.437 127.361 cv
421.78 127.361 420.437 128.704 420.437 130.361 cv
420.437 132.018 421.78 133.361 423.437 133.361 cv
425.093 133.361 426.437 132.018 426.437 130.361 cv
428.108 132.629 mo
428.108 130.972 426.765 129.629 425.108 129.629 cv
423.451 129.629 422.108 130.972 422.108 132.629 cv
422.108 134.286 423.451 135.629 425.108 135.629 cv
426.765 135.629 428.108 134.286 428.108 132.629 cv
428.108 132.629 mo
428.108 130.972 426.765 129.629 425.108 129.629 cv
423.451 129.629 422.108 130.972 422.108 132.629 cv
422.108 134.286 423.451 135.629 425.108 135.629 cv
426.765 135.629 428.108 134.286 428.108 132.629 cv
429.737 134.898 mo
429.737 133.242 428.394 131.898 426.737 131.898 cv
425.08 131.898 423.737 133.242 423.737 134.898 cv
423.737 136.556 425.08 137.898 426.737 137.898 cv
428.394 137.898 429.737 136.556 429.737 134.898 cv
429.737 134.898 mo
429.737 133.242 428.394 131.898 426.737 131.898 cv
425.08 131.898 423.737 133.242 423.737 134.898 cv
423.737 136.556 425.08 137.898 426.737 137.898 cv
428.394 137.898 429.737 136.556 429.737 134.898 cv
431.322 137.168 mo
431.322 135.511 429.979 134.168 428.322 134.168 cv
426.666 134.168 425.322 135.511 425.322 137.168 cv
425.322 138.825 426.666 140.168 428.322 140.168 cv
429.979 140.168 431.322 138.825 431.322 137.168 cv
431.322 137.168 mo
431.322 135.511 429.979 134.168 428.322 134.168 cv
426.666 134.168 425.322 135.511 425.322 137.168 cv
425.322 138.825 426.666 140.168 428.322 140.168 cv
429.979 140.168 431.322 138.825 431.322 137.168 cv
432.862 139.438 mo
432.862 137.782 431.519 136.438 429.862 136.438 cv
428.205 136.438 426.862 137.782 426.862 139.438 cv
426.862 141.096 428.205 142.438 429.862 142.438 cv
431.519 142.438 432.862 141.096 432.862 139.438 cv
432.862 139.438 mo
432.862 137.782 431.519 136.438 429.862 136.438 cv
428.205 136.438 426.862 137.782 426.862 139.438 cv
426.862 141.096 428.205 142.438 429.862 142.438 cv
431.519 142.438 432.862 141.096 432.862 139.438 cv
434.356 141.709 mo
434.356 140.052 433.012 138.709 431.356 138.709 cv
429.699 138.709 428.356 140.052 428.356 141.709 cv
428.356 143.366 429.699 144.709 431.356 144.709 cv
433.012 144.709 434.356 143.366 434.356 141.709 cv
434.356 141.709 mo
434.356 140.052 433.012 138.709 431.356 138.709 cv
429.699 138.709 428.356 140.052 428.356 141.709 cv
428.356 143.366 429.699 144.709 431.356 144.709 cv
433.012 144.709 434.356 143.366 434.356 141.709 cv
435.801 143.979 mo
435.801 142.322 434.458 140.979 432.801 140.979 cv
431.144 140.979 429.801 142.322 429.801 143.979 cv
429.801 145.636 431.144 146.979 432.801 146.979 cv
434.458 146.979 435.801 145.636 435.801 143.979 cv
435.801 143.979 mo
435.801 142.322 434.458 140.979 432.801 140.979 cv
431.144 140.979 429.801 142.322 429.801 143.979 cv
429.801 145.636 431.144 146.979 432.801 146.979 cv
434.458 146.979 435.801 145.636 435.801 143.979 cv
437.198 146.249 mo
437.198 144.592 435.855 143.249 434.198 143.249 cv
432.541 143.249 431.198 144.592 431.198 146.249 cv
431.198 147.906 432.541 149.249 434.198 149.249 cv
435.855 149.249 437.198 147.906 437.198 146.249 cv
437.198 146.249 mo
437.198 144.592 435.855 143.249 434.198 143.249 cv
432.541 143.249 431.198 144.592 431.198 146.249 cv
431.198 147.906 432.541 149.249 434.198 149.249 cv
435.855 149.249 437.198 147.906 437.198 146.249 cv
438.543 148.518 mo
438.543 146.861 437.201 145.518 435.543 145.518 cv
433.887 145.518 432.543 146.861 432.543 148.518 cv
432.543 150.175 433.887 151.518 435.543 151.518 cv
437.201 151.518 438.543 150.175 438.543 148.518 cv
438.543 148.518 mo
438.543 146.861 437.201 145.518 435.543 145.518 cv
433.887 145.518 432.543 146.861 432.543 148.518 cv
432.543 150.175 433.887 151.518 435.543 151.518 cv
437.201 151.518 438.543 150.175 438.543 148.518 cv
439.837 150.786 mo
439.837 149.129 438.495 147.786 436.837 147.786 cv
435.18 147.786 433.837 149.129 433.837 150.786 cv
433.837 152.443 435.18 153.786 436.837 153.786 cv
438.495 153.786 439.837 152.443 439.837 150.786 cv
439.837 150.786 mo
439.837 149.129 438.495 147.786 436.837 147.786 cv
435.18 147.786 433.837 149.129 433.837 150.786 cv
433.837 152.443 435.18 153.786 436.837 153.786 cv
438.495 153.786 439.837 152.443 439.837 150.786 cv
441.078 153.053 mo
441.078 151.396 439.735 150.053 438.078 150.053 cv
436.42 150.053 435.078 151.396 435.078 153.053 cv
435.078 154.71 436.42 156.053 438.078 156.053 cv
439.735 156.053 441.078 154.71 441.078 153.053 cv
441.078 153.054 mo
441.078 151.396 439.735 150.054 438.078 150.054 cv
436.42 150.054 435.078 151.396 435.078 153.054 cv
435.078 154.71 436.42 156.054 438.078 156.054 cv
439.735 156.054 441.078 154.71 441.078 153.054 cv
442.262 155.319 mo
442.262 153.663 440.919 152.319 439.262 152.319 cv
437.605 152.319 436.262 153.663 436.262 155.319 cv
436.262 156.977 437.605 158.319 439.262 158.319 cv
440.919 158.319 442.262 156.977 442.262 155.319 cv
442.262 155.319 mo
442.262 153.663 440.919 152.319 439.262 152.319 cv
437.605 152.319 436.262 153.663 436.262 155.319 cv
436.262 156.977 437.605 158.319 439.262 158.319 cv
440.919 158.319 442.262 156.977 442.262 155.319 cv
443.39 157.584 mo
443.39 155.927 442.046 154.584 440.39 154.584 cv
438.733 154.584 437.39 155.927 437.39 157.584 cv
437.39 159.241 438.733 160.584 440.39 160.584 cv
442.046 160.584 443.39 159.241 443.39 157.584 cv
443.39 157.584 mo
443.39 155.927 442.046 154.584 440.39 154.584 cv
438.733 154.584 437.39 155.927 437.39 157.584 cv
437.39 159.241 438.733 160.584 440.39 160.584 cv
442.046 160.584 443.39 159.241 443.39 157.584 cv
444.458 159.847 mo
444.458 158.19 443.116 156.847 441.458 156.847 cv
439.801 156.847 438.458 158.19 438.458 159.847 cv
438.458 161.504 439.801 162.847 441.458 162.847 cv
443.116 162.847 444.458 161.504 444.458 159.847 cv
444.458 159.847 mo
444.458 158.19 443.116 156.847 441.458 156.847 cv
439.801 156.847 438.458 158.19 438.458 159.847 cv
438.458 161.504 439.801 162.847 441.458 162.847 cv
443.116 162.847 444.458 161.504 444.458 159.847 cv
445.467 162.108 mo
445.467 160.451 444.125 159.108 442.467 159.108 cv
440.81 159.108 439.467 160.451 439.467 162.108 cv
439.467 163.765 440.81 165.108 442.467 165.108 cv
444.125 165.108 445.467 163.765 445.467 162.108 cv
445.467 162.108 mo
445.467 160.451 444.125 159.108 442.467 159.108 cv
440.81 159.108 439.467 160.451 439.467 162.108 cv
439.467 163.765 440.81 165.108 442.467 165.108 cv
444.125 165.108 445.467 163.765 445.467 162.108 cv
446.414 164.367 mo
446.414 162.71 445.071 161.367 443.414 161.367 cv
441.756 161.367 440.414 162.71 440.414 164.367 cv
440.414 166.024 441.756 167.367 443.414 167.367 cv
445.071 167.367 446.414 166.024 446.414 164.367 cv
446.414 164.367 mo
446.414 162.71 445.071 161.367 443.414 161.367 cv
441.756 161.367 440.414 162.71 440.414 164.367 cv
440.414 166.024 441.756 167.367 443.414 167.367 cv
445.071 167.367 446.414 166.024 446.414 164.367 cv
447.296 166.624 mo
447.296 164.967 445.953 163.624 444.296 163.624 cv
442.639 163.624 441.296 164.967 441.296 166.624 cv
441.296 168.281 442.639 169.624 444.296 169.624 cv
445.953 169.624 447.296 168.281 447.296 166.624 cv
447.296 166.624 mo
447.296 164.967 445.953 163.624 444.296 163.624 cv
442.639 163.624 441.296 164.967 441.296 166.624 cv
441.296 168.281 442.639 169.624 444.296 169.624 cv
445.953 169.624 447.296 168.281 447.296 166.624 cv
448.112 168.878 mo
448.112 167.221 446.769 165.878 445.112 165.878 cv
443.456 165.878 442.112 167.221 442.112 168.878 cv
442.112 170.535 443.456 171.878 445.112 171.878 cv
446.769 171.878 448.112 170.535 448.112 168.878 cv
448.112 168.878 mo
448.112 167.221 446.769 165.878 445.112 165.878 cv
443.456 165.878 442.112 167.221 442.112 168.878 cv
442.112 170.535 443.456 171.878 445.112 171.878 cv
446.769 171.878 448.112 170.535 448.112 168.878 cv
448.861 171.13 mo
448.861 169.473 447.518 168.13 445.861 168.13 cv
444.204 168.13 442.861 169.473 442.861 171.13 cv
442.861 172.787 444.204 174.13 445.861 174.13 cv
447.518 174.13 448.861 172.787 448.861 171.13 cv
448.861 171.13 mo
448.861 169.473 447.518 168.13 445.861 168.13 cv
444.204 168.13 442.861 169.473 442.861 171.13 cv
442.861 172.787 444.204 174.13 445.861 174.13 cv
447.518 174.13 448.861 172.787 448.861 171.13 cv
449.54 173.379 mo
449.54 171.723 448.197 170.379 446.54 170.379 cv
444.882 170.379 443.54 171.723 443.54 173.379 cv
443.54 175.037 444.882 176.379 446.54 176.379 cv
448.197 176.379 449.54 175.037 449.54 173.379 cv
449.54 173.38 mo
449.54 171.723 448.197 170.38 446.54 170.38 cv
444.882 170.38 443.54 171.723 443.54 173.38 cv
443.54 175.037 444.882 176.38 446.54 176.38 cv
448.197 176.38 449.54 175.037 449.54 173.38 cv
450.146 175.626 mo
450.146 173.969 448.803 172.626 447.146 172.626 cv
445.49 172.626 444.146 173.969 444.146 175.626 cv
444.146 177.283 445.49 178.626 447.146 178.626 cv
448.803 178.626 450.146 177.283 450.146 175.626 cv
450.146 175.626 mo
450.146 173.969 448.803 172.626 447.146 172.626 cv
445.49 172.626 444.146 173.969 444.146 175.626 cv
444.146 177.283 445.49 178.626 447.146 178.626 cv
448.803 178.626 450.146 177.283 450.146 175.626 cv
450.679 177.87 mo
450.679 176.213 449.336 174.87 447.679 174.87 cv
446.023 174.87 444.679 176.213 444.679 177.87 cv
444.679 179.527 446.023 180.87 447.679 180.87 cv
449.336 180.87 450.679 179.527 450.679 177.87 cv
450.679 177.87 mo
450.679 176.213 449.336 174.87 447.679 174.87 cv
446.023 174.87 444.679 176.213 444.679 177.87 cv
444.679 179.527 446.023 180.87 447.679 180.87 cv
449.336 180.87 450.679 179.527 450.679 177.87 cv
451.136 180.11 mo
451.136 178.454 449.793 177.11 448.136 177.11 cv
446.48 177.11 445.136 178.454 445.136 180.11 cv
445.136 181.768 446.48 183.11 448.136 183.11 cv
449.793 183.11 451.136 181.768 451.136 180.11 cv
451.136 180.11 mo
451.136 178.454 449.793 177.11 448.136 177.11 cv
446.48 177.11 445.136 178.454 445.136 180.11 cv
445.136 181.768 446.48 183.11 448.136 183.11 cv
449.793 183.11 451.136 181.768 451.136 180.11 cv
451.515 182.348 mo
451.515 180.691 450.172 179.348 448.515 179.348 cv
446.859 179.348 445.515 180.691 445.515 182.348 cv
445.515 184.005 446.859 185.348 448.515 185.348 cv
450.172 185.348 451.515 184.005 451.515 182.348 cv
451.515 182.348 mo
451.515 180.691 450.172 179.348 448.515 179.348 cv
446.859 179.348 445.515 180.691 445.515 182.348 cv
445.515 184.005 446.859 185.348 448.515 185.348 cv
450.172 185.348 451.515 184.005 451.515 182.348 cv
451.814 184.583 mo
451.814 182.926 450.471 181.583 448.814 181.583 cv
447.157 181.583 445.814 182.926 445.814 184.583 cv
445.814 186.24 447.157 187.583 448.814 187.583 cv
450.471 187.583 451.814 186.24 451.814 184.583 cv
451.814 184.583 mo
451.814 182.926 450.471 181.583 448.814 181.583 cv
447.157 181.583 445.814 182.926 445.814 184.583 cv
445.814 186.24 447.157 187.583 448.814 187.583 cv
450.471 187.583 451.814 186.24 451.814 184.583 cv
452.03 186.814 mo
452.03 185.157 450.687 183.814 449.03 183.814 cv
447.373 183.814 446.03 185.157 446.03 186.814 cv
446.03 188.472 447.373 189.814 449.03 189.814 cv
450.687 189.814 452.03 188.472 452.03 186.814 cv
452.03 186.814 mo
452.03 185.158 450.687 183.814 449.03 183.814 cv
447.373 183.814 446.03 185.158 446.03 186.814 cv
446.03 188.472 447.373 189.814 449.03 189.814 cv
450.687 189.814 452.03 188.472 452.03 186.814 cv
452.162 189.051 mo
452.162 187.394 450.818 186.051 449.162 186.051 cv
447.504 186.051 446.162 187.394 446.162 189.051 cv
446.162 190.708 447.504 192.051 449.162 192.051 cv
450.818 192.051 452.162 190.708 452.162 189.051 cv
452.162 189.051 mo
452.162 187.394 450.818 186.051 449.162 186.051 cv
447.504 186.051 446.162 187.394 446.162 189.051 cv
446.162 190.708 447.504 192.051 449.162 192.051 cv
450.818 192.051 452.162 190.708 452.162 189.051 cv
1 0 0 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/VHXJJO+Times-Roman*1 uf/VHXJJO+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Giacomo) ()%%Title: (bifurc.eps)%%CreationDate: 03.04.20 01:14%%Canvassize: 16383%AI9_DataStream%Gb!j.pKfA^%PW39+RbBlJV8\eHD-Npn$"3U!GOe7Br(*:pA*`4qittnc-0]rep#ERhqGgc&rjqtAP&1ubDsVah,1*,m!Rm*s5&_*%Je6K*W$5nP8`q>gpgNd*0lRrNn/TJ9\W!3Q:fbhsP-2S.>Xh^R);ZibCSQ'J1VE'uCQ6.QhedN5K?\*/mn+sR<r%7nQ0;_Qea!,a%RVPo<?aa$.h9HRhhDX,J_8^W,?0Tu_hMcco<jPZt.WfVT^Qt=j7]G-\=,'SDbA[aJL"G+YfrC[*g=8ZB1Fak(K#LfCeD1,/!Q=Ih%"Wql%X\lcO$"u3]7r<K5^^'-Tq0pd0%Y52<2A52aS?qs/1Wkj['$o0hO60j&Y7-oVcEAL/YM\`T/,_,K(QaiURL1-o/Ae=/Bc3<S%]5=p%Xidk6BJ"4/<.t;)?WI4h8Y0hh;KP9aWi?h73/Ki+.,Xg#g%a/GOLs*1%(h-fg>U4eNKWS"5J1_0#Pu_==?H>S:Td3i7fTX?%*7A.7*9m+GZYmJ(@Nb5jWDu5Vcqa2`-S9:Al$kOE^cgN)#jJQ2eVk8O/5@^F2u6PW(VN<$[X1e(hV]+X.AJ%tGT`<j79*KI$4:K6%&u3+\RB?&"-`n:;_J5&+@BedY0Q7j,k!ubaafn]NbPc&/)GF.eC@m.#+J[Whf8]eZVU4SdYgHmH"*`kQXEliYF*9ni\GZPblVs<D%0p!`DR&C5!jFB$IL!$X*)3n3)L`SJR*R4OG6mgsPT.&]sU>VrPj(CPo5Xc:bMBY5!7=6SBoP(:XDpu00"\U9Or_aF]V'oG<;+`.0%:0kmq\rL?DpkNeR3gS3:/;<!N'2.HY==Tr`2tM<BP0[X+;@/t]8rA4=QV.%c<2/hXN%)IT+5.oeMJjEZ755Fq:Fq3J_G;_:I56+@%T4*fM'?adEn.Y\9:kHE>IDSeXKg!:KXGPA^er2c/:[C%>74@j9gSE>pm:.U3(Ofh];@-dOp`S^``fu@F9))!8UckX.;qrg>Zus=B%(aGdYrJ.5RJ,"jXd1N1fVU+I^iEn-irA-p1;MDiCrPMG/KtX8AO.R,-K]"5D_Z&LA*C\*sPchBACsh/A`8'8mA'??MPj2A.d`nEm%m5`-,0rK9DG%o4@GgR/D5:hH#1H6%pLMtXJe#1h_r5;Kt^Ti9Q-M1UA`%ouW8DN->6Zsm>BFC':%3@EP`S`YmS8ntu"[ao$0r8ui%fMSZtFt)5YF(7Us^/<[jPgMOoS\@mldsi'Q.[cNjl'PE'cl,O;+6?j&g?C\]\07u?A/TKpGb9#c_=n`FiS,+Y)3SlsZ9`&;*"X?I%P5)IS%0KZ6?_^n107=LG8+I2j;Q\$HItBqX=F]R"S@e9_op>Z9`+>?'XM=BLfI>mRop>[,2#:G*N4(V;n)/^[Z2W1$\K(QbrMBN<%nNqdnXM=C7Yt0@KJ*B2Cr($E?NZESsEM^F0?h?#D:QY.1>UglS5V!RK%K@J_Z9V']"oJOCS\jnq/\pfp^(&u@5D7uOr(Y?;rD2a1%=Y<)k^]0;&K1l$*nS1-j9gC/EcU\.5VLMT8(#""$+%DMnTpVa-H%GqUnSS2)3,h'$QP;ja2m:onn?tiXoInTA#<=dlk7:/fS"*a+%K0[4*_0k!^92a`Z6Cs+B2#N&7\NH,=]Pt]r"W>MF3%`H[aceWV*r;?Z38]s@j>k^/M<?i305QFAic@;3ajX,lG"=L](2ZKa^*Rjo%3mAFR=d=tjJLaWI2TEb0YY`:/7ZR\/N1pdp:llE>!c>h2W(E]ERB3VrA4C\iUVPW#Zt.:/6GJ(AG_s+,kT^HL%ss?`d22oNZ%3ib%W,BDEXQ\rYC@i3d?)6M?j(HjZM7^;i,^?ji*AQ_;>Hc]6*#hWJJC]_K@,8+2$]O*RMTY5B%*DD;J_C/%$.->cV`LqS5G5,V?,LF+%."4E=R>r-5/I$Y-3H*kc4X]^\(a_"Y.`8r1a<[m[bIQhfF,%Mh-I!9rdM8GiHWh*B8k+s982`FZ:YSecVpbPE7L-:Zj>hPlV@Z6<%-<1?F-EhEd:1:PDH!R_h-!2!L),3p:.D]B4]C(jU*lE%s#0.hBUj=V2BI:''=p(`CV9#A4V)P=Sni!1W_0DHug%1C"GC9<#K+c%g%?DUUWH7[OMdhl[c=3UnD@O'j[W=m#[E?Z)F=moMIRGjaD8eS8I\;NFfl?p(D5TPas7]PBbot[4\D:@!E"q>-9,>'9T^aMj&`_13<%S,/1b&:Kb$X\SCT#]88CCSn6\]KdnrW2)SA;N/=[V:!`$7bad]'PV8aTWMTBUlR:]=U;L0TNb#`ga0d>Nje,"S*E0mQUot](N__[%L^DOs"][Bibb,)JK<5E^Gsi>UDPHOPbCX==%"6%8=?H'dH&ME_),@'a5he3n@b$<HP`jQ@/V3qcnM'(M3<QTj[R>6OQ7ltE?!8VT%2/h\3KYlJ[1p'Ytk&A[E2#%lZduosA.DBm,RB8q80#[nH@5QC\55;QD)bB<)3fdIM_3qlcQDa]$[V1'oUhukJKkI_GOYti.I=q#N%)]/=chA1NdgqKR`EG-5Nru%HTn@tZb-C(%T[RHkr2)/r<hskI9^TGKJqu>m7UrQ/1PRLk3<6!)k*])tt9/!VsP0Ksdat8in.5+P:%L<-qu3L"OlZNs0>7aWUo'Q^ZqT.fDtp@<t26f-=PG3F`Z-u[C[L=O,SZ`uB,0^>P8ZallB_b2j4ds0'eZ>+0M6nL$C99I=4@K^bK%5mr=:VQ\!O48K^51&Pp&/5A"*1"r;+`bJQ`bUDVZi/gJ"goA[KBioGHAuC=82Ao;sL7J(QA69&32^VP+I^?VDADX5+.2r.Ak\&jk%g5P1K=L5gKAfiIg'J1pnX?;+kW+Ie9?4/F_h!Srsg@u=cgT#ggn_E1S`a>#q67`HnP;+gJ#4?6OZ?&^2+l4ZAMI^`lJ`2Df<Z7C(%9Ma5Qafs]'ZZVa</;OAhpis&Ba+uSNQLD8%rEs$OW\=8*<qh511V],$2iZdp(O;$sHM2^8*B",Hc:=oIeWoJk^[bG._qs(!HF)"S%-\LbO+!,(d[77j_C/qRY8o6D$AC$%U<kXX/0T&<)GNKhZ>,4K"b>rB&IVmS`D`.NbX]T/uq\<"Sc)A9@hMbtao[S]`eV<m7P?-S:%AX^%_9s[NK<$05*C"Y*jgU3=6RUs)FPn>T/U.%RQd7AFkQE=4P4rXB9*>!$DZ8J;!Ftdb)>M+j"UP?r<g$5NdC(.G^8foM/qolnr%m7O9_D#opuA:Y&%X(Q5(hV\:oa6,-<lrWH]>[kiR*6dP#SaN`=Gg@EFZPS6pAagQl6+ti_cu+"r<[$Mlhi1C>4`Z0"A*&Zah1#=9%!ED!=%K,(c$u2OQr\+[Y!7"dJ*]4/Saa3\gSS[?D[8s+u^&iL9CR#[J@(u<jlGDJ>U[^'jTl.6L_cGfGB`4ZiBXCsf*qk!.X4/'@%"$.8(N7ljU@^_1Wd]!=@fg_J/+cHgT-C#K6BV"4N"fK.^o<0JrLe0Fek)\Z6pO7gVBQ;Pj&kn.XR!=g%Uq0+j]a5]kliA\NHdGNs%NXS7og6/dWA^E+C,X7scn?Y1p!/j7N#<!>Lg:eY*c7#.&'e*jW./_03Y"*)t,?j;_(:pa#BCu(QQFN\9md/KZd78=!WPP6q[Co9>%U0XbkOl-$F>-(UH!^T8D8ou?U3U1ukqP/571)b`aFut\eComd-7;e#oj\J'h]cE'cNQpZI4J[n/6qnCX[4X(<Dan)Nlc"mlj6*NB%;:]'4/i2?Jd0`/E)V%8pqkM0uhn;M?R9+V[b#)I[ZTs\npScMl+%iupGmBHKrbW<*,QfIqHEpDaJ]/]C?K4o>5i.:@8upfrJ'UH2%g11XQgZs(LUDdfu-Ib"C]a!#&HM4)hpo$S*]Imh_pec4/]WPis4a>rC$k$@a()j;`,qABs@os;Ls"lbYNMmt>=L\Mcr-IsY]@q,8%B'EYmcXf_k=!6lVN!le37a?AU7!lU`NSm[Eh];BM3q(lqih5/12Lmp"nGEm3W;[!TQAd.-_"r41C(;2N9!aimXJjXKoG^[(&7-\J%NPC\7/i;FsrO2A[Kbcb"2-Sh-X]cA>iY28fl1ZN+IG(WB.fCcHRl-fr@HP2'!0+(k/_K,V.Iim[[TT@GEf&";CGg#/#3F_PJKh6s%pH'03q!o<IogaY\k\[f`1+Qu@fHZ;Hr?6`"g&I=<TX91VnF1q<p6utoJ61RP7qV].r'/b%^&eruYst0>YD,02S#t(Ne$0XH7LLR,%J_:&%knG]V$`X_Q!]=3f&eLmLiS/5DE,S\Ik-NKO&-3`!Q:T+:ZU,P[^0UDKC]s&lSNak12T*9qgIJOs*O'G&O6@p4YL<[1ZfdTs%,FXX'DjkN>^rB;*H4f*kMQA>&&EP[QVJ)-M?Y##RE$'rcCV2pHE4i@Cc7ccK8^W;c`7U-g73DM`+33m42h:lBQ(hp=k?hK$%a]uH%;XOSP"fei9,#O^WhVkXC`_f&"-R(/@'9SU\M+B/s7&8@_,1>10&S_1cLpY8%'9VGW=\(aZZncA*In`1tlmkItI)"&.#_p]P7[5t7%T.6kDBHm8(>D@)M-c[a#d>*A$*TDK.7-8kN'!)t#U=jKgBf3^$MI<3Ge^2CK[hb1PY7LYiN,:ShX@4a_-5o?he!M_b:n<#R`d12`%b[M[a*.:4<)m&3%@:6%T"n\daiG._&VW#_MXRR6S#(JL%gniI!S,Rjr4$E&`)kISLU5=B/>9.t$!Ch(D=WIqj@!8EPkWusjq*.fs%!p[7[WdQd0omWZ'b6ZM^&Q$JpMBBaNdH\]KM:Ko0orgu;YQ[pL1W840Zfkb]f#T7tn:=BG%S/9*`\88iIf2X5"+%?eJhX<EmAj(p%6Q)Y0qS1dgC6Kodn0.W4b]2)KSs)oCm[q2bJqebM9(7Cr#hAreV:o[;@JktWqHk$1g1W2,[f;Sjs-'hBk$OfDLIK+ent4s[bs;Mm%,Fn?j`58h?+.!ANjaRQ$s$''=i;I$__mAl_=UYM:B'l4nMp55Dluf)O$5h_uU\iqL^+:@J6=9^%e!IiLgO52E3?q)+4K1:>C=\04%@=#j!rc`]8l?l'!-hlo4JZI1,\n.-(n+I-V0%]IpFK!n6K"Z6ZGTY?rcnJ`EJ*2;hng@W0VE=(p)C-d/^HVP4*;/2YU"pPdl<k%F%MhaJD*m8[AI0d_r[_h+ekHdXk3GM'dHta"Eh0#/DGgiVYi/$QkArMB/^P]=Ej@2@[fl%9;_l2[<-$UlVAN1Vi?O')t;6+8-ESosj%TI"hT?f2>Q_I-(0h5n.K)WFM`kcjUGThFBM-$tG8s0"o!qcBQM_iW+cpk;nPfo+FmB[H`?MS#=gL5@YlRDH,brA%moe#V`s\OuTH%\4p_uY=<B]m744B<i&`)jABGjPg-]0BVdqpFt<MPT[SLuI'dXKXW83AC(+D?WrlZji"Q'^HN4,)2IT]<_ZnWD+<EI/>NQ?"N#8'B%#+s:YJoUBH,a)g##<":CP+_Uq/OXRt9%^Ft,6EF/%+t'Z(_(i=X'eU(>Kt'7V).=85a6#5!s["rFO9q],:"$?R4"#NX`G0!R[rIZ%,B@L;kUeK0Zrh5V/(J743W.VO5(ej77.%A0q&!*q)UZ`GcPUQo4=;T_+a]K#h8L#ob2CHse"G;5\k5t+9ub_`60!9pR@ta[6(jQm%;jeUF71Vl*XuTnM>cUAAPobb!T\1Bo.b5a5^(b[P!tVRpkVjsrd+Q/PA+O!C30/WKnemn68e8J*?chgRoIDrj!l$&GCNp*hH"(J:%eg[psCkZ;uLmi!dClD-'deTq!\1tV/Kd0F[p?R_7p^fm#kM;il0lNsfVe^"LBX:&_;g1L8$j<MCRsl-I0GjgOg!5PPC`X=!SghHj%])kq`p81:Cn7M-g0$DpjR7!+`dUh2FL<PQ;R]'h<8[(SIkt@qQ=`M%]^-j6brR,3hnBp7W9ir=\_Yuq?071P-s,C=agM'*7"VAl1%Dd%O/a.4KQDb[,!"QjbVI^s(fXCYdO5pTZV?a,0AUs&IPK4-9/V_o).DD4(G"BUYfZ1=3G''>`k]a^$,S^9q#lCf`+5t^_XPPXun%]j<qP`.N=j\=GNW_-r\0D?X-+Y[lY^D,bpM=m@RA+Aft]s6@>5%iR`YP%(&d@Ug,Nh5p`I#L/<)AUHgf(F0)eA_r$r(mtQ>n'+lX%\7JR@18m*dm7K%A-nWnl$&)IF>-"9pFZZ7DLH$XkJkMP)\r+NuZ2UeqV>KpZ[uWjZR=G8OHj;h,g$Sfp=Y;n7aGaN1b@;Bo<PYk>%l"*%GQM\iI\)'XP.g$7a=HDG%LV,kUa;WAYn%bS*RmWAA14nl7pK/+t)ATM/ZJg^f%n*5HH1+KVf!hbi:FJhOP\R$Z#a0Ha#UF38%6(TDQ#Y/<%8VAL-;\L<HgD,G%>FZZIk/9;K@8""&/o/?c6tna6?L#G]a3gO\``We$#0?=]B:,[-HN!SU-V3$>K+(plI7t[fA;`_X%F=)<_*@PZll,QEq]9hco<>(_U]h3a,;-m(Zkq7aL*)MZAYPpEQlhuB5id%_),/jt/G7^G)C[I)>S(HADIg)c:X'g/Hg#rYP*+g\#%@KQ<+b-7jpihU?g,QZAr4lVh/is@P=4^.eG>3LTKd\!2ki-idJ$(.S1.a;mpDE-^+S<-j/36%Z!0@#jngcXa_['h;U-iK+J;\#&f%b8*,./iBS-=q.70M<+f903Y=+Wr3sRTVP8`1C,0RPSlA`B)';gFr90:U^:Ug[[K%roF6fFKecY9NZmpD1Dj,O?A[NrX4@!Gd0`ii%eL%j=JOMVZO,E%iql3OJnN+Kt>!+:iMLi)-^n\L>XOJsl/3lGmW-5IgPNl^YJQd.`k581+=D*1G\D+%fQl)X7+JA%r5^a@1k6=I2%]H/W><*>8C[873]Pcf*h7XW;JZ,]I2d__[+/M9cQASs9N+,qa0gm'$2c_$&`*uC8.PL7-u#u2mD%6"7%bMdt,kXIIi_"O'3G/K-Y%JPe+YDQu8+AN9GcTjn_2n;I?dI\gr,)0p6F.)=YQ[=X-aPQN-HeGVl;'4\;`=0i-<9.+*W`aY;EfcN$^]m^6r%Ic15GN%^(iscsY%Ict/>U,$P0%I.rBMJ5!*6V<-N256UZ:raJ*>FCu'?]?kG+I]uEj1s?iXmoi,[c9DmLLOJ0f-iOd4H!_^DMK?M*8KV9N\n;n5jDd[%WEo<o:$pb<ZWoD2Q:gOm%Rp:B8D@48UA<`ir'h`DM0l_L>iAsAIiU.Kmo0Y_guGR5<(QC]/"a(W^G!RSpFf%!G\f`?[pmIgG7=Sl%=Lo\h\EqLNP-cUWo#WCr+:QNqS&1N!GO`*ljtoq6Ss8rtp;U=9X8W[@](M:LHu7sArS:)Dgq*Mkc+TZR*<782h,:9J,JWl44ZmsM%3B1"3ntk)(l!Ze<g`F8ca)186m4rT<H9ne^?/q(u)TQo[rVV$<BC+R9jn>ja?'KdW*BtS:qn`?S*D8OANao'ZpMMNZk;'<%S%X14%hZaliJ,[0AD<)`alrq9_2(<s5hfAYk_9W53NEuL%jgV9XK@mB8K!;\q<$:4109jQg['HpFI/!b-b:Tm2qH0t3[PbS`s(lBs>ZSG0%/_d;Ub4,^Vs!j.]fD(BVEG,L\WrFTa^7Q!5[8C\J**]fTJi"s"YAZINNP>%7]mei51qN9*J$8V9Zq4o:[*]]Ol-cc__rXoVqrHSs%G3jLYI/eHUC(sjFc!Ke=m;D'YO1cH+D:PG!T15+-jnkrsft1,GnVJdXPRD0DX050mhqC[mgq*,mPUjH!%Xf:%'r8mEX&3\e2-]7d%jo2#6JP4mE6N4ENjH[;oo);g.DmDhcf@F2:.e`>;T7k8-/RZ\8d5e5QrEk8*6K$r"W(Oh#@HMIF]@#KoZ)^aAaeW)$SD.6@CUDZB%dJ*t87aI"YbMUJ+bcB.-E\CLO`;TOY\0lCn-gsO$jC;r*Fa*9,kYeB(],H[ImA"uJQ1J]h=cU[o]][c-j""3rhVNQ;>$fm=`)f_R%T6FUijiUZY]l-\J2e&1Ng1^$>=32UB9?G$(IX6O(Y*2>K0=GI'?e[tLTi&5\DY3Sbr"j/@E?jH-W@DO9:Yq(':H@@oe+T&A2/@.&%BPF9551VR:7P@r)6f1@/1>fdPeL9pS^"MQ_GB<UDno"(fHoWdDp0sVQhB"P8HlJ'`DpFU%2kRfJ(V"h[7JC]lFCY-Trjoi*g$&CX%cG40/`l6WtIA68co5!uWqm!Dmo4bS!qQ[6so3REn\3-U+?[VbIHg15\kL8WjL&4kq96iIBIb4MON1[">UQN'uY:hO>YJ-!>)gdDP%^IHPZ\)M,<X3jHXAG(siH5Ks/H1eT&5MoRTNE4#o95%6"H;UJt<gJJOk=i58+,P7Q)b!EAh:IRU`:lpp@36EDl+:Ssc0f)12>X/Q%],H[D5;0^67YTVBIq1DTM5,[4k)/?JAScO">SWiK(c+m8kU(5QpcCh^h+JI2N^i-V[<d_pUe"`qg!$'J<FI,[URaVZUY50,Q2&eQ%j5D.<H5pu`)A@--T<-GbX,PRWk[a&Gn*Ws@M_lsPh4:,u#n5YgrRiLG)mdb)`n%@7'/hpPT;SI7Qrn;$fShrd>Y9Upm)fdPVgVs-%Z_l&IYV(gf(Ie07Ve)3LH.q4PpI0Wq+'7r-HedlYT&fY<J30m*-sf]kkWe1>Ze,f5n*M<C;*2A_Hhtn@jM-F5:S6+kc2D[A;9\'G%L:c8+9DCZ8\\$L<`r#"DN9cO6.XUHWP7P5$]@[UAmM7VcXL7qdNBP%SVqd=JrP7_JU"JrspHpClrSG9LSsIo6ISYH7^E/utI@gF;%\R3,/dg!e2TBk:Uh3R:!FJ!n[??Mm<YC/U@INhul>nj=bGl:>ro6IsZbi`#68q'QSplhbT@pb,D]);Ajd.DUqT&^uCT<*?'Q!ZS]%>MI%Cn#+%\1:EK25%bQ3?RBdVI!uXM*:E:DVbZ'''&SR`9?4f\T1[4tWGUVSb'N?I=RoO.H`MR3HTT!IIOu#IPq/TVG'f)BD(=-X%S5\g_]@2\m>dNG97aB17A"H-(^W4C2O^(8?;LL)YPoaiO:W;]0^pm9+Q`9*<\a2lp?G,MWjnT[1+Z:N]cdqZm\457NlKm=!>0lnf%5C98Mf"d&g(_LrsPjA4Tl$k@!Rlf.G8DmAXS=RntLU->$$#;Vh)ht\?EFr/#fI4#E8[J!NH@.g*okm`TI.2&rWDq4?2Th;&F'"BI%hqhEgN%^W4'u*5q!ZEY/kdEtHX/fWh=j?XFS#LtlW9>G0o^I.;AMdS.3QSgsYW"&fXB:JU7rNdp1%/VY2?G,4q(rH8,kqj6]c34X%T3[FGiXQ%!"lDe+n)2qKH4G)47N99=o'S$PnQ-8#NM8Sq94"tq?EH\j090YJ`^Y)r1X2@9h\_u(L+Kf&b#u%==&Sm?)QH7UGtH1V%D'>E!<ijL6phZ[/)M+g#p7,dN?b+Goqi<3CK<gf]n+5d*5&Ga2gKf4C+6kk'bI:FUX15UWhKCPR]8.N^ni-I>W"Cq;/B?f3",HK'%h10[%\Y'\QVgt@KM%h`!45OI^YC(O#5?Hn3U[hg![p:^L./[?.Mn]I->Be?E"erY6N3eT;=dN$AgAH[d[X%onR!0+gN$AD@\a3t(%&B>;ha?AsITYr8@Kp5`]L6N^TF>6KS(d2TGk)/,/-i"$OR7q_n_>6ZLEmO_j`dIY"M46XR+4n4O8B27Bm'B:DpGuJ::oF<>(!\IB%4m\VilpIl$j0t9tm?(LX87Da%Q4Bd=,Rh:@AhQCBVW'.bYO"&#i@ODf?[A66nm6FIR+0J:ZW!G'_5%ZM@eC_@-ds)74cej!UB.^q%j/U.U./Jll&\CoK<FMWg:d)p#_NiubHV=rU;E9IBdI$"Id>e?84_RppGouWVgO<$l*?U?FmI;R%ds'%pMdbd,Q:$b&CKtIPGC.I!%Si;YPQYfg-CpTMJo;f6"hJ2\Za>F0/5Gm_-LP>idER#/j2kQF4<aE/FA!dU+M_'h-Ag5I"s")DPL3He?3AsX0rf(Q%eNqj14K@[,%A$Bm!DbTT!_KT+m$^<^E`-8ugUO]Us*NampGEt.p;Sn2@.OF'*.!OZ.S<:=05k0IM:P7<[Opq;1:=Tj28EUTo,s,E^hg)t7inj9p%B:hq*>^9I\?:/1JHuII-fT:JprErnM<qS_]*l&H`S!ZOpN7Rcih-/>h/J7G/m.f/THt?mVE-gil6h\:efHaqn<"gEO&opeEZ/8f#%iY0>-qpLgZ;6kp/&e?pQ?Rp\^`H(JCflV7[P"@UOpi2;9l^_#jiT*!Kqq\amJJWXl+Y%P.-r]/;Y)-Y"mq^ek$_j$;Wgf2]n!f03%Ki-'jdAFfS8ma[?0Z2^bQfBRV*aT%,>0$=r5N)-QkiE5!)mnH8oHCB_*!Y[_]7K?`.mSm(Q51a2LU`(Z16&'q\XA/u7U4V-3ONP\%[/**eB*u-:g9`Hfe9T;l%O:cA`MF82j<`#(]nZ&\/4:m6O.e<p$\Ui7E7pO5d:@j]4$5mi,B&$X:Jo$cJMl>=ndNX'VA8);lsn%D%2@*2]5TB4gI0<`H;@MH5:JaFR2<`!VD&=r!i?ob_O+PW:a>?EsQY07t%W)NkNu"SmINM]"+Jcd@gV703/Hj14o8>h2/mDan4CcTu%2e%2^M8G?]ci#IJJuLp;QY%qb,X9>ia!V+QVu6-J/:Z(_WrQU',N?FT&*d[Jes%BH+I4>5pdSk#^tZo.@I,3+j)n.V/r;*J91r\;%,_<4Rp2PVT2_cTDQn.oU)CUse+dj=5Ks'r(6)(,-H>poXY).N"[qB-e)lAt_6:Lq:k)K6X6S%nQ3),:Te04RVl502O`;QHQHi3ET%WR5@7q]K&&8[1Ig.e&;H*!aK!m$qld<[j+.]>f<Yc-)g(PSX#]ir6b^;LKgL0b%+MS]ha',ND,[iT#La9X'2p_C+bcct4_$3t_0]%S<iY\o!3JKP7/f26pC(1=Hf@3^J#`/#*V13SG2qC6oiqidt)_=Gnn+$RI)37@igL]Y)1GV/.q&Ek@;[ZFds-$`-KF4b@4iF;r&A!%]t@r]MM5toJ0j"0m\sGnMj#6#(9fu"^2//@G0X+8Yjj3EbV.i<'lArK"6-FZfi5iO`Mk7BHmkO*aK%:8a[C)"Og+M[c[u[4'.<IK%(=K7j="R)n:K,TZo^eY+2X[Rr1WLd+>TZWdfuf,gidA7AfEq^[L!u#kQ,d);6VKFp=2:Pkh\r,J&V1'!Z;[3aT[E,4QqO3*lQR]^%)@^)Dh<?ec=+oYnD@mfSIVcE<3XaeMfjp'XZ0AV<NHX3M8#$r"fbf*nF3?a"`-Z6n.:n!VpHp?Fgp%5b:Db*-)&o(9R!%e]e<>$c%osU]`cYdL<i1[Jp,jo4QfI*B/=";"<[P&Y54`(nN[PUAUI@bTUVCmCQ)2KtnY4D)GaBoC1ZcjKYI?c@?^e^k?n%Gh!?mY-Np55-[%[/7Z_b`=pH9A;T!=UYua2<Uh`?O\frT!5**D_9<P;U<![+D<?U%^gB>I:>@'p;curjC>4s['GD(Wp*bj=Xp>J]\$l7b0oPK4SHJ1%Ud(rkE-@9QIB9[#/B^f^SIM9uC$b_i(bA]G^O?.-0?K->`@=Mn$^nu,ShS1MA8E$cK8A"j3`'I8YMSsA@;!L9\I^V,^U,`iChTFK%2\ToW>_oLu-DpDZI't9]!KlQ=QUFd*GANkV[UJsa!e;*UMjK'\bW$&:I04+jSliC!-Y$`Z9"0M@QYZop[18js1=\obik?HGN9,J4%:Xqri57gKE5B7KJ4.Qa*IuZdTDk_Ke-70o1n@7GGQH")C9TCLt:/$^7:0PHY2/dsd0`1JO6r,=<q2Dh^h6pFRkL<sSQt]T>Yd3M\%307U19<6O/(o`%J/75j'`*d:j5/LVH"Dtka*!&roJ&3B%e(98A+C'"Xmb,S='@2F_]m?t?)ZtCEbJe,)F^KDG/D!D2P.n7%;S(\t%/:(mS7H06ITaT/=F(Pj*SjShObb.=o]SIOgT12rfSR8h`ZoN6E)0Aofi-[P,^5\9a3h+YY<t8MT#+[n]E1S&\i!d2ICr*)kk^kVS%fFHHBF6J5!O\F^;jNrkmXs8SEn1<_HTlYmda"lk?P:,M>3B&2gUqQS@Fn+8in"0pY4ZuDDO^::fd`1[\DQ%q3,K+-S-Hrt;p:9+g%IQ`;c+X=[eCK'UHpKus-/iYe+bYBNeQAm\%1rna'S')P.$l3SBSn!a5TX%/dYep'opb*:9k<ephQSn1-qSEjC2)n=['.*+ka%;Do%!0fTEk$4<ZPEP(Fl'ds5.sC-cF*L"QeV0p=mCO*dn<iBNOQ,n@A)FHJ.5Z+cX.X5mQ\2F-8@W1hk>'*t","\:R-Z_L`#+]or8T=<%054=iS%m34@DTe.Q9^gfboh2]FJ9_+<B7?&m$Y_a.W]LDg8t]f=-UiX<'6XFXpUr'S6hpAI?I8S9<\>!.&TWk/[:\k@XNN]5mgqh%AG2BlkU\]4LmDr4)($dW=c.A()TK_f.ou=`^s(r)"_Lq1mQ<1?\?J*0QdLILn6u(EQ/0W1??pqap7R[8;@VM/QjKXs3s&b!g&lhE%m?+.-5CSgj^k^7rRrC(!<-`ko#j.Aq@,IN8PtafRR=_d5h.mdI<Al#XAibhFY?oF<1&$.s3BAV77knZ7QQ@jFf]_sIkd&`%m'0Bq%lsXk]Y$KNX--s*_KR>d](#BZb'TQhg,EZkmU3(l)L2chpO)KWV2r'lNh1k=`=2F0tP?TA7Yrgkj*0!:.W_A[-2p2JdXc*DX4ME7^%'?(]B_(pamaUpSJi(FJ8-(ShT^>oR*>d-RnE/,VipF9i,J"k;6B>sigHjiB(Hm0rUe2^O]_UDL/QI;Q33OdT0c\V-H0rDG#INO9/%G`,0Xp)).jF`'7f1cs;!U=ncf*o:nA!/W(-Y(SG99[8S)6HSB)*).B7#subU9bV0E!'5gpa9:m*&!I\DJ<KfrNh)jor_$.P((l[C%+-VN)I(RnHQ-I6>LklIFisU#LNouGD=T3dHGj^@rFA5C&n*UIRL,N7(`g&-#4IS>UK5##emD7WsW>"mpVMrT@`VD5QDdn#fW8nqk%%2$+lS/c:17!@?fm[[J"ZL>Nt0ZNZTfNmip3Jj5,$ei]6M2Q_)lInRV3[_X'B?_;S<#Sq\`_CK^q;oQ\jKN>W.:Z]?psoVPCr(sR%F]34I*S[9FH$0*j:8Z+5Zd3XjRDP.HLgY7orukBcl*Y?NTWNO5,M1`*ec@[[)6A[Tp;M5cdXq&KChF@([APW:+)^B8a(EJL)rCgY%)0(S[LRWREl;[Ru!BX6sQk-[!Cr$Fi%*)-HohFG7,9P4F)p3,mP0*6^Dn^TYf=@Y-,An*/DYAIf$)[nW-m()$R1ZpdHoSSgk-qEj%^@*ZsZQ:L($,$h^-PEG".h<`V1;obTW6B<OBA22+lN]?l<igmoQ0q!-KUc;nrIf".&1bDh*iJTl/N1Ng,PB9nYj0$DgMcf<"$]YX%"ePh^[GMkbQU!8VrnLe'Mdc-g5+$lg[8jul2].@)A41E<<+4Xca_TcI,f`95q//o5)tOkYYf?8X[Pie2)-k*o^ndPn@Mlt/-2#J0%L.3ag#j456L=?lu*U\3AQL?`tqlqAX-ConRN_2B/CP3b?@orjliF&R?%^hF]>$8H1:LFH"^`SKY8H#g7N78r-a@Q:*]o\1PIVE:8%)6$HY68DHDT)&%4f!:*j<6SYVG7:i?Hd-&-*stQSTrCt/1'7,68)GbMYPl#Nd$4t$WQ,dG$5`7%[25GBk;=lM:PG8uDX!tLKIike%IcW\kE4.QY*Wg!.\PhD+U'cAq(!\U!(2hkIbb"ona`/MPQl5_I]g6,]'B'u*f\"Tg1EWQM<IM'(M(")a+Cf!#0F;CN.-<R$Gj<6O%.iTLmfKq.J"J*hrW]]T)jdE5E:2Y6\QhpuR^`B@q>eHp=b@Jq]P<D%^ZepD,\6`&&DXa,4fLr,e<VU?GrFChIV$km>,&t7-r?dhZ%Xl%.LD\!Q[G)7O:Z&OrKREIdAWGFWLl$h;_2BkoAA@I4n!a$_nEg/2_S=Rf_]X,H.9%SN;W\`<[;-ga3o#WpcrX?rR>:R=&pbkaI%eb3]V=a$T0NG$nW"=:\!AH,-h;Jia;G:jZQ3jYQ"Y%5#oYCI=kX8Qg<UTS,d]P?0NW8g(Ur?(>g^D*omTObMBcF6ZRo]n1Z__1qR%]s%8i=p\lLb\ap0Fl(15EP1YmB^FofEp#sLFAPbo<aGIhp6ST`2[BKGRurUfWeW'JZ/"gu8"p?NP"QTQYn/ed8$?9>gXM(.*]$1n%_'Q4Z'<VX!.!@^ubH8s>]j,E<dsrGXjkUO!R8\HY0'cu<9>C1QO(rk,\ai7*iZ0TapN[>=FeLb9H(d'DVTRu`;XdD$dmW.If9R29%%8!GmC%h3o]L4A[?f)Rq2!GW5hu7oVq_m]EOg+e*T;=G-d3md,ZL0hJD>*ke_TN>]IOb:)743H31\:imJW\fWZKYtX_b?[skN)rq%.,6#QksCsP1M8V:=%pse0+5juo?*o!1%R+BS'EN"n%$nrY&$-<=\P7V3e(t[Cc\c"!`')i.@Y4`)0sqP3j3ZE2HMLbS'EPXDtE]>%PYL>+9,D>]cW&S>?EnZs"1o'Gc&tfa27hjd_1cLMq6,Z.17QQ>Qd5K8q0B:1gaJ/QCqPjG3\TOC/(-Ld2P&IpNScEID`4/mWf1`M%?W8qS[r&\>Cq@t-Rk'uR=d?3^MM^q%D#.s/Y@SFJRu:q(VXpg<mYFtU2P!o%*SmX#aD<o@eIndV["rP08`&cBZKZsB7M_7`2ed_D%9K&FX0hcA1@G,a/`3?AV0.<=8/!nQM5/-h5^s.Gl!8?lX>>0X9f-Q]b]/`2)5)%N&7Pr0+\sVNl3]BZ^f#>l-ebNAbiTN,gAm73b%I.G4*%6c.5i*fd(Q([''p$@a(';^Pblcu'p6+>#t(T(e3$0E$hC+=356HNjbKqF)+TT_.Eau&Q[16<,MoWP@F,<C!p7-!%'-Ud*U%gTgl6\dP"6k.>!;3p.u_8NtldGCI$E3A.n4Z"qpiBmuITTb?T*E-h4ti!,&&Y.4p[b=l<4;RgN1-:JWj7<^P",e,(V'/$j(Ym\rK%D3&K#8FG5cMs`n`*l5Lnm+^^Mk?OQ/0[HJ;ZCidAd'X&<nskBeMdc+Q?Y99!<@l)F_[65I,;)`K^kYRY$ao^f&tb7o(pJiAI"(&8%XL)r9aH/Gt-r(7t_cC7%;8u;BTS^tSCabqK*Xp<>Rb23/%0_P[';EBQG=)t3Io3hO8FHN549kGL7ehA>)e&`h!gZ0GStP,Zl0*o(%-fj*d?F<ls]<IlP-'6\5T#pD_.6KVWSQ6LYZ.@?5JVgeL)i:i<g>@krCIt[J=MUnd=BR%VB_%/`jK[U%oh`fT2L"t[nttG9apIgU%#4A2!+(*GbR)]^%+A^d2&,"T#OkDKgmM:#!iS>\r0Y@cgA-a^_pYDf$WqObd9[.ELOBM^0F\Yl]r20\EHKMoCRU/VL\gML?Mg/J.%1-(J*RMB/5]uJ#&@$;6A_F3>F^Yt48=8Lfo2mjKKhJbF6^"$'<E#4W330+oFq1WP6b1uZCa<q==;r51_7)hrHF,OJb%<p+1U_*>F%1Ym!dFPeV*ET^)u%Csm'j\U;:5:n.c.k#%@b/@J4.82@1,[=e1^GOOokuQqV,P^c1E1)bNLZM3Pc5!<kQ=uT]N//P`8Z_mLg?@Vd%MbU@ps'.O-&ej:[s8;Sqbr&F+QY5aQ1=MW12qMHCe6VPH(+-3'cKGb-`\]\%kJ8[*adU18V(jtk=e-,:Z`7Kpih+5t[dtAG]ANh$%SOk,,p(]nD6X7M$i8qSskZ>LlVb1FhNkgjj'*Dk#kmTqBOZH2TdmV*X3Z'daWrnMBY_X:Ngd?MN2mE2C]hWht?0H][(+F\!Z0G_*%7oLSM(7*ua*V^[M273mWchN8CI=m`tG72->5<HtW4s-mUDfXG#j;_5dB`^e,Hf9Qs>V1SA=$Gqp[`?DGFO9Ia_\JK3GH=#<DVm&.%nU:DnO/6TZ@nc74PO-#BGcIs7K=C,4O*u)FVY(1A]Pj-47qrrUQmH0>pUTL*C"5-aY!76Upa>$s[Y9bmLJE$K_rcH\T(MdlFNrW[%hR?@DrR1T=NDEoHj]2<T[H?(S4m3rqgl3P%iQR)s/:TQ/"mF81g\kGmRltoU_^58Fn02ipn;dCk3I;[9cFJ#rXIcS"[tPX5,Wo;B%+go@\)0#c#^X7)umG>>"[73L]oP,*/IG9cnK$s-`f6eP)&+4UN^5^/+Ir3upGBQ9Y%Ga:"Ht*8@bWjY4Nm[SMpG-K-I*5[gQ-/[l%9C^tM@ZBq+j#].n@Z&CU"..DL6t?pI13GX%gm(?WIt_E.F<S+fg/`jm\!Vm%3#V!JXin,8/&X7f65"5fT#]D3?^)c)!2QLG>32C/%<#R=OAsPd1,q/I(CktX1F!5dDQ1*)1De:Fl\[<n0!GpTRn'@+'(q`5bTMd$D5IhTDVXC(=1BK_0\0jFUf%p*R/Z677-i-fSg"(RI%3^TY?j2BE?`!>(d_=/?")s^I)*f"1<'O?a;XEUNUV`KjhcfT^N%tcIdYe_nVo0*rPKYnAef#<?EniUgbDlF$`+"Ju'(hh+ooNAJk%i`p8^"ZT^Oe%U#?ZN)?mfK"6O8o^;IYt87p0lWI[W;)a$dg/1P[SmpT-h2IA%9"]-b"&Ul9ArVJ%Zq!'=ZZ.=lj@r\9YS6d8M"ME%5>9/D8MO:Gj\+pMYEa)4(rP#OSt:2[bAoB`5gq$B\aQklj'"@co:1FNF0)CjS9&(.aZ7+`l2KicKWrH:.+uM/FL?Gg<'[@qpIjVT%m8=<_"e9\2nYG\2=5L^!rkq3qd*0iIEE??=asPu>1R;;c<7rO(AK$G#biK/g8_;,HHk`&pT?]8-$V3f-9,I</%OoA/blS<C!uUSK%'&NhsE3?,=mdr29J73L!h=9RjZ2j9GK5ps/-QLEn"W0-&&BAAU/3k/T"F?H\IB_14!J\i"KQ3D)$SZB,?mHFH6666h]10S`j;G9(%]ho]o!OSt1hKej1&XW'B]od0G9DP['r5hV-geibiF"(JcNGONaPRhh)-5\-=\<JWZ+1DRnIjq!O$MS0cjn$/-H(gSqKt+m<Y"STW%;$B@fi@D\?PXL^5K*-#aS,7"MG-Bf9R9\_=oa>h!eGT(;=^>7IfhfEWqG"@nC$'d@>[tKuZ_>&"oa?ceH$\I+h!=,\6G[;%c#U#F%A56IL]mddZ6]B+:]_D7+Aobj<`K\5#pqaH97H2c!FT(\$$gsJTrlWp_os<+l&N>5bhs2*6U%'/'Zeaq+5"tZSrFXBZ%!hZ(hc\;^%h<Pl)ne\Y/k.]G#BVKj`_,_=kY?u6NGa];EK'r:>G'1KA6-jSThcMdlj&Wq*mc-rn(#]JnnV+^/0DJS_"l74c%^%)j[[uti-?q)?%\2$rp^=R;Ye?n,uB=j^CY'^,!DtUH/femnub&'[\(6@,2XuYqC$bk0;jCDc<oo/YA"`LoZ1/d;If?_[uo'E^SS?(?3oa<)ho%5/S%oaALaD__"V9j/PIHQV-mVg)><n]d^#i.%fbFP.Z5p\G%H&UWuTSc2s1i6,?GSuW%MlfU'ZZWmCjcUs[g(ek:W<Y?dV+&0E"06k1`%E>RdXp\HnK4a+d7N;)j:\Oj^55/+Q<e$7fq2tq`JTmZ)2V`0RllSm?oHt+%nF5H4qh\InpWum0I/`9r",?;n`<kkW?dUk7U4F(at%Hi<m46Eb^\;k)!XrT;@O%<o!_\GQ'`^"4q4<kg*Pj-qb2f;U@Bme*%o);]hCT@qAWp\Km44P=ZGo/l&Mg3`dM[s'iFZ.\U=$f:+.%N/l24YFelKRcUs_SdQ>]kDA$\2fmd&8[/TrqM"YokIK3j<*Z$(qTZTud!`*)&4bAj!1EFb^L4s@GcqLbf.Y@,4TE*DN_YVjlK>Ur%B"ceLGX&DE)kZk2^MjmVpKg(",eXt4r3L1:]@S]\EX9bG>[TlLRJ.Y1.ua\oDkjR_@;Nu>lWgF`]?Ml5loO=P]?L=q%c2I!8m?CV%;igI9[<_q-F.'MUh@]<NFmLn08J<dVTINU*4JSfO'mo>UOiMjSh<X3PG.;sJ^hZ/PKXKX4!\&fu</7I-b=Xu7s-[&M@3?u,p2]pG%bO#-j88[aCl`'9Rlc7Llo;g%LMncT'nb:$M=$!lAE2@IDPUg,*)r0]*q($-Ge+WYDGL:/QE]7X*cJ9O!n%$'Hk<!n6%9qWdbKbq@%Z#QDoT$hgSmT4PqJpVcgGirD:`?Ft&5-/aBB8N[<^L,4Y#=#h)r=RqtmuLe_`*c;F7>'NELj]kiCE(OpiPjcdrk<m^lffY&^)DL2%>g]u`\bP8\q0;T(/&&BdB?q77X]kWndT8*%^E3g;lUIa_Cm=?ZkAOm%B\M3,l1R$\XYf;C]Bg/I3Nba%\<-X:_#VqU:Lb?S8',oX%,eHQc1Zq-,9aQV1qW?YC?]s'.o8SuQ?SS>G+gio)m;o,Z8WG=7f8dE4`Hcg7r1[.FF#Ctkg\ib%G-pjR/mEX]@8>es=1hUAaX)H#%mp@p"/pVJpc`2WF&oB/UC?q<Gqq1-e>`C&=c_X/p[ZOk-a.1mNCo*e9A*N(R5/N=iWN2k:9Y3I.#CE_8"0in?T0416f"[QFVj21[%nT8Ju\m%_!hH]$koDDY'=ip6eX4R<Pdo`6`b@S.^'[AQ1G15L#+!8,amJ`Tboj%3+.7;r-=7l3Jit@b2q2%]u_7okcXMZ!48U=\*%qq?6$J#:lEc,9g#j`#hQ:*ipEBRsTsp@YP/=o!k8BQm5W#:D`bquSH(e/>!mC=7E9n%nEeb4_L6P2D,7NCWdRl]I9U]%]"^*+c5W%@!d;A(_86Do>(eC=M2Uab<,#*b\A"c^RS*S*b!g)T(5__kac%8WU+7)l<-jh^BVGCnDK`_5K1=J)#V&%\*ADg-6g5tBe6P"2Kg<X%jGJO=e3KLpC7pY@?t_2HZ5?_>PDL*)hN;R)l/6)*T>g0Mc'J_)h?*M>\!QW!$6%!m\a8@U7@#m5PrBP)j_:KOX_b1YIWX0/9%uf!%[nUF3Kj&r8Z9,4DpM.pdVn/QWa6JT$B<9M-WhdYqZ$)sZjjO-3j0io+B3/"uY9%r*]qd<j6E6--O%P8HUE^r8H<k.LoiR@#Y#juV%<P@$M&uC/XC'T4EAJs6(+#pu\HBa)$cTJU\ZdfimXc"D)7]T])NGirr<5F=_l^H>55pgRGq2f0+Im%km[hjtWW\ApomP8Uml6:Kb%M:4sJ1%D[DRX@:2hTijqUbC#]2K)qY"g586),gq<W>X&:W+_]9AfJK*j2W4k2<jSdKt!LjhpS!"`Ju=5lN.`NYq?77Eh,``9^4S&%KNLW"iAp.ILT&FZ.`B"B`<ti^.[LRDN!-]:'A!>*)ti/NdieQd<[_cHVa,1eUoi$7%0L2K5k>jMK-$u;%Ne8SNQ\0"G6eEFO26np%8MS(2TGaO.\dBS2M8Z9f@5^\9&q'5Gr_-/Ne#+X.?9Y&d%b0];[W&n8je-QAA(Nd<="Dm+lBM('Q(q-LK]0?1,T.S2HUQk@q/e('%H<B$"iV9"<7&V69qp<)uBnIn%[@QXPn/O/VCg%f5^>j)a\[<q/XD^@2ppqlVDBBp4S+:]QH[j^u8X\2AJf.cG:apC=J747hgYuu=%,/YFf9-n%/H<ROR0_(MlY28Pd-iBVG?$hfi_H$Iu4?24^-%.K\d?!&Bg4B_H[C_RAYR5=?gD2Y\5BA3AcauN;^(.l>OOa-U=2$r2%Mgi\e_f4f/L2i4upg]k/^D@^CcHfM:R(&'H6;dpNUpd.pB4M'4KBW\#s2Qa!^?ZMdkt/Q6Iu8uVk:aQ>05Z>,?K\ubBuXS/-orY;%P?U+8ihLp:cnebG2QK!rWA4^6#1E*64F$aC.-@o!.6.W^F-A8,]GuT6:6URaoIgidpMcZb2AWJ`GE)3RF$'*e^]!qM7Au!Ke%+MZ%I>tdp4-("`-4um*l,&W$qD+fddJ(qJZe[M1Lg+&3Qbuq&f)Iq$hqElm+29:L9/[CpfM_]VM&Gj#i8/`G#cf.`Y9MdR\uJ<_=8%LS%1ZG2:$2m`.W'arc9=oO^Xrd$GqYcuQ\he+%*5B<fW>)hAi#57/elB],_rZGP75J@n>Y-2pcB("Q'Rt";LoXb+4;^hI1gb^RYhQIh%":DK\I>1!qRX@PfmcVA>dpIk?#BtI<3mu#1\HNL@d?g4^;nG$,=a5cCkn8h7O0;\B4%(]3Y8BIZNaTA<nn0__pC(*rP#R/@I)b8;%)ri]2=[!O%(Xh5eeSq1E&,9hkj'$\L^!dukZ!?iFAK4?`pa`]Cq[VhS.abSMcr2[(C"`6Ad8MA@&IO.0P6aD?6l8'oQpc1<Os"<\%_/itb)C3tr#ml,kUtPZErP]n2o5(*Z[I6Ne#78s_Ca@ZVIs52o+6Xpo&QlC+C_f&WJOCV+TU3WZ7Rd"0Mig7AnLd"up=RgGiBG9$%=3AIdDRN)md*Fj=>C;O2Y$D#!i<+7`5:ID*YK++^DdKLZ=@LXr&<eUeB+VVS=J)T#Ns\c;GlW2-8r6*9VoQW!8i(>uS$O%O0<mE1%D$nmSm#3o+RQnp=b>c,m"d+&>.alFHkmj"rEY:feI@_pmK)%8t3pfj7=H5pj7,fAiE8]ZW+qnEF_,B"%8gILRQ+[Q<'sfZ\=TQRE%M`Ifq_pAE1"(^;e$GiZ-=gl7aYZ*g.43D-dX`>p4EU2%4:ol7YGUtq-74.^X4$i0dM?R%c0diT+1H$;D:#`Kf(aK_)XFcqN)n_0N%B'b6`('fc<gfTAr8U2`OSE3\VK)Vo(3[t\W/-Rj#/<g^o;rKuB7bh+ib>^gJ`=^r_EmSJ*@>l.lg2bHZ!Z-GA]l5)eRc#jd%nLrc%&YLlM?E$.dgq"1j(uFi6]R;4#7:O$_$:]gc4:<'3gj,\mH*A+r&gTAOmNR0r=eYCudY]ISAf=J&!H2JcN#l.1*'&'R_h?[:j+IuN%39akEkjA_ea&LIKYj>]1Vcb:,"9QB:@E?PQ_)k(0eF)Ph_,VQ=rPHZRlip^kSO;>DSSDRdF`Ud>9@TU/eH,EniG5aj$<\nD_Z]`5%\tN`*BjMSdqD!g[k<D^HJIX2kmo3or,E6h3N(cjfCT.YHIQd`/K^lf)bO$;l3[4u%@g1A%,JC[91rb5G_BA!,\9C#&@NDW!J>YQm%o",7CqoKEZlF:=VeBPYj@8JgkeVCDfgEE;8s6W)0?GeJb`qY1<!!BKob+AQ8P(^;RnJITM&nGWG[X!.?+=(_5!o[\$'a2]g<2!DF%)f$P;KN[k_]R`SD"E3Zk,d8meScqb/\E384j:/]Tp6p\qQM4FRQ'XV*ISi+u6n-A<WmVB$4FB.7;&Wk[DnV)a%[u`;Y&"i6JUm2R%bYXhTQTmZWK\,pD=^9Y(m"ktdNC0A+6""r_kB$-?>=D-_8`N.Jec%R9HepAb<+q2nIbYsZ(d&nW)lkZ>I&WQ2(d2g-LRIfTYT.l2%p'h%H)d`GN1?.RbL0f"B/8oD6am3f'KV.K92W[cTL:skRE5r&^FNG:A\W"Khl?[8hkPWSM:@D<Sb8-S0$;E>/0,i7:j#.QPi-qC_%a=MM),bf&gZ:D;C1$s@Wp55q-dM7)&=/;=m,@GQlm?/gnh6gamE9I)P^A(9$-"OU>M!$o4Kp+BU4/?j5+h>(sAP-6'*aZ!+,4Y6-%Vs<_U93W_EZAc/k`6tj^>PP-[!<FhV$oSR.(U[R>$1@TZ]'NBU#@t<1F-i=i_s[0a)HP.b)7"f`SaAPJm)qVlR)Xo!c(&\>gp2F'%>W#Q*R3m@q%nYSd:(oMX]X##a'P7'dr&%WM,HEVr53DBt)Rjb=pZG:_G3,Qcn,Z"*E2D3K![5)tV9/8tFt#-+h(:9jBNM=!f_%aI%!uO*_9KN;=^q,1jNKq?cm)u8q@O5MLamS%MBa'aWj$f9;X]4jd<VT&[LSOm5m[F6j,*Mn5LsiUG4[EBo8ja1$f(DCMF^;r4p;q%B%Zb'S]AY`Zai)ae\nXp240pI'EMFlbFQh`f4]b",\e_'S,[e]\r&<_epc-eZ8M)l-[ZY6HsT$?4"m2B0kii+u"eqnY:SOI<7d`Rs6%=gZb2EUhC;PI1lbQ.Ee-[c;[H_-/5&7c1%d_J($\pRPKc;8(iJhXeMPKV"lLBcZM_CqJP,[+6D$De"*+d97n1pX2-]d5pEtAC'UA%%2VGR=skbO%QW8+X"PR-T@S"aR6%_#qK<a%XSQtUf<4Ng=?H+f*@&=>ZF)KcFXlkQYZ_:Ff5T<d4BdN^9*f<G*j%d\V,5`<JC^^@%)&o.1Fu$H#abh>>:hV4T0C#8s<iifp_Rel7ke+3K,B-]tLSc'7<r[+>-_2aD59*S=h]S"DQfm/3;3NU_PJQ:B.iKd?/j3YS;WDYI%O=%OJZN69(/+h1)f,D?-?dHVU6I2Y%rPRLi>IP%$nh:o-Y^UVCHWH;W3jAc&XRQ)!?D%X7[sYT@57`HTK5/E]kIa2T_Lkt4==cDS%&\2p>clA0hd<%jN0<I_g,e0W6iN#<>Ql(jqrC-^3A)$+`)(s^B"HrVsqfu*AmbK%uDCumJ<qg%^EI?)"Xpju.lj6,>@u!iu5&?G%%FQ,+`Dm?]uE27qg;V,aRrqlmu9("Cf>ZQ&"f*j)tSMM;f0AE/DHIB=7!Z%[Bo]*tfk^>?t.8Le/FktW8?24WbTbefW@=6Ua`R?He%A<EAKQZ]I@ZR3Yfo>6d#+5!uLf^?N4Mr1sVO5CEsO8W!K=plA"o$09N$rI>-8Zugo@[$K3>PL+SZ,0C^m6l+f8iK>I=5eHGR;.@l%&`(''b)l+QZ/b<t@nk=mh9KX3i,3\<ZbOK8YE4bXg<$I3IC8QDHFuu:&jPFq9@CnU'%o:8:7/X*Q>O4Q[!'AmG,+"s38R:$E6[b;%3mm<6r\;#bAF?9Q#*5W[ctsl8HGSmsB)QH4d8\-riAt/s_JiB+3VmulbGr&W9V,:!MCj;pO6s8U_Yrj>_80?<TS=>nHHodX&Ekir%U`Vd\0Knu7S]S_;H@s.@*-0tSCp8=6:>'j"*/SV4C;1foS5(_*+d7kqV31JjAbu@345BL0Fk'MrGS=C/b:90q4:bupnJE6B^#`9'%-!mt<3Gs/sj#JC/G>^,c-Eh+.0tC<8^2M/&,\7.Hb$VTN86_HOlO_BO9^g3/Fl)O.78&Uo*a;=jfJdJ;UbY?jR&8D-hNI.E1raT,%(D\q&%3!.JkOeG&`Is4Rd$UW#3J,8jI`q4hA*M`,D!W)tVYacQk\9CW\*EdBNI?H!(f=O?f[r,rbWPEgYVC8u_h=$JS2gW=j1CP!%`_<IhYC!!Z0OFi>fk7ls-jMa2"_57gqr9;/<eL8BF"Wdd22p@jEfGgkWS0N:)moNj1;-?"mM&uL!82InY/i4X3r4:c/E;n0,kJ.C%/<g6RNS#q>L:QY+&I(=L.?rVs6KI7g!f\,F7?:_`=<tumBJunR4SS4ek?+XeoYt#4QG`W@XM7lZ4![TVIJ:CFZ8,j)W@u"*\>A7E%A"W.pbCf33h,`E,U$0qL=DPU^<I.U#D/?&A%Us4qj7?ZVC+>R--G\`r?(=hQ<Ha^D\<dQg;HZ")bc/JHnS,Til*F*..[LKeC`93d%7[K#/@c<h,0X553WN:6I<t5mi;U3W$0l@=n%<DY'n9/?Q8r1.*1^rg#O4RHn%It:NoI7PF\2;FuW_dB4>K_\5;l+T1@>)*3bobX$%mf!4rYpD>8%P0OI\[u]hAP#IKMLO>'-gDCDQ87XPCS/^&2N6\4po\/39`"^Yl?0Q/>_195p7`>_6Q*V*T,6VN6^`BgBHPA4;tBRT%(?7bNiXRUk1D&U;E6Y-+]KT<;&V]iJU4ReAiR`&?3.qfRA.:N2W2tF>nT8m9#'N2$YO%^WaC3jOjs>:5:^_B;0V7Xk5e5YtWiTiS%T84OU`V0(m`2rF/O+tI[SX7m@4^O?-g(Fa\fGW-bU0,?Y9pr1J4`>mLke_u$b!&CF!84P)m="3F7DXl6N"#o>]`mh(mL0Vmh%s.^%k@L>(44KtlD6RfA;qp*L-NDQHF$bb<MqH863C."Q^T18t:[GKoS>O@LghUEa)N^:M[b&N>R`Nc,f3TEXAYDj4=E'DtS9o*rL*<'6%><LTQf4L(.*k:sufI,(B+NA3aNNiDFALT3QRuPTu_Y'6[Yg(2L09K9^D6r3M>\CsZc),Z$b;!a20/*P,qiGIqiU+:&BMqk6P@gS?%X.i:#rU_drFRFgsgZ:BRg]]114a:Tk:U\qqmtpmlh3RqVH:c_un,tWX93M+dXqKlSK!R;1X5o(3KQ*4?51o<glm`%TcrmZb8uji:%A<F#-4*bl3odBX`D-gd?\4W,q3PPKG$6neXPoR,KCcuDOWq;AEP),^$dn=HFjB*fp%?gjX^Ehi)n"0]VVto''^sj^3`;\F)&)Q/d%E3J04[@i3(7J1=-\p9jE*<KPq)BXd#4hDSr*M)fdf9I#N>6+?*URQSpQE)C9+'I1ki+pSOO-,ZL4/oQV1FYDMdq#7t>PE0%BnDl0%o-6QW*V7nc^A,"Ec-k)p)BIt^!@nJ[L\8%9BTV;%HoJs+mnLQLjff@.K^YQC"+D?nYk3"(Z,f^QZHN+ao]NDDK@h&Wil^ug)l3iP%rPM0H5I$si,Pbq8^q2RCO7Mh@q'^*0E6$ST#9!DkO.CLd!G?c;bcsZq@HqG"FK&_9;mt[nPh!t_)tjNM:#,_rDQ]n0F#5.]W1;k-%m;oiCcW=K5Pt9]/i[RA)<I6i#o$rIDq^ZbC%U^/XUo*4XSh#hs!qNb:$hBK]$Z*njK..j7.<<E54n!uJ$qY$Z,`G+B$E]eB0s)g1%%"H[QmF;0K2U=pu+)V@lA=XWNk'B!?c*-Kj8`p?DYBkekGT\9(DIUUo*RB=[:5Qq^6?6'*1-56K`YLo"E!J0%IS`cT$;X1A`YJoh%$^lEYh$N]^eJ0nX?DpIF-7c:dS+%S2'f)oNok>L`I**"[-G6c^3Vr10kaL'#Q@(AHlcF>:#jS[sqJYtfA3)_NZS,+m)/r<EiE'JR%KZWFBp+^Z[5Yj""XEr@V=i9RV^2`j@0ae8JdBK1c_i+^0iVhC^-E6eLSj.Cd#/.NpP\iSm1WHuVc1GV*-p(niGo\,'>X?N+jp0QN%`mN:<f.fI"L=k<R=_DrKUtN9rG<GT\"9_H45Kplj*Rl)WpmcAp>Wonpqh2H%Vk4Ph<$mT1(jg6&>$3oOdF3Eo2Sd0/],OUIS^5AS%9d5(mf:uBAJ'i1`1cs*,A1Ng+39'bG:;'ls2]B/bIh)qCg8Nik%&9<>m(lEqkX^mFNEWgJLo.09DiJ^nc%=0(&cL]YFB;5r>q^[J%/mn'H$Lcd1Y00_%-,mbB4IbFN%&VPBf6/]jrhP1se:^>1n!R9m[!@;eZkQsggmLD:I_XnCBN44fBg6HQ]Tp(n&!<p)Hsc%2*Me&F%a877\?roGFrfJXPT;;?ns5t%c@SWbjK:NnufC>Wo:3HRj)<oNEYL85]a<+mUqj/KLs5P8gfVg?hLXBqskqe[Qld_>(ZJ!rkD02q0%iXo9R)U<?3-oHbV)K>e[A"%3Qn*h+)p.q\feoi*Gk>oh:_b9thE:0B&ZgX_W;\\Bkop"K=)KJGERS>Rd;</F\N;6r6MKjZioPt.;%9*sA;=*W/PFj>q?Chtp)mQS!e464P-LlgZ,)3EsHI7na"kKqkM05i3%V@m+Vjo(G2.&%N)gZ=T@NmnHIiu)7&`\C!F$P)"P'K_JX%Hm]IOAj:AD,`WjR`Upt-d>"&CN/&fZ;7Sg6d$(W2?$gkAU&DpI7id(CctYjQ3qReT+h<b-)KXt:RYE\9kCl'*A/q)g)_]>-r23H(%?p!7n]SnRVBD<6=j)rqR^.<YF)XfYH=RTJn;a'@cg`CQdcss>$cg*7"a`LF^4Z(EO?SpI%bs&kle$SN7.iMHk?5!L1`c-BiI]G$U%e&/DkA"%?;r^f3t4']n75eaLsXa\>Z?C22kFdGBIMDr6"%<Dm2Yb.'O<=s&F?_M?rO&c&QOGkXT8ToAh7Ta=$E5rO;Gii>,U2d4O%:n@u:WnqF\&p;H-/=kS.oh[Fp+_GQ%mF$($?Jpde7c/",?JpcZf.a?fH\!t2R4Gu6m%>5C1.O<UKH>t;B"W.-kKoTS4b*)D)E&i?%iH&\bAXS&C*#_.*gJQdVjr>:["A:$>LX2Z&@Br+F%Ll(lrkmpG&/((W6N6%+1kZ!BEV*%u6Si5`plssgGTPeKn8i8T35B*[F(j>6%\GVb9BLi=#"'kiH3Ad&as-)WmUd?-*1#FuJ=M_T;!A99kLF.\/=hm$S.Jj,uJ*\-nEh%c-\Ak.%LM!.<Y/6euj*TS36I2@AEiDkt%2U=B?@1I7Eru;prO8Zn9BLi<@LBK3o*#c7si=DPJA+A3D4GS[L@*QcBkStLmKDPY8KqC`m4X2WV*#dFf]VombCo^-LQUpoWo3VIT%C(aZBU94@0eKdYdmuORtYnVmV]UE@Oe,LdsP;%;n`%>V*9lf\#)7p-q[]\]DhRA:Z4]e!pERu,X+'E$0`*I.PIq47iN4s_"l&Vo"%7K-]-b)05^,B!NX]ZQ+4RH^o)+C:<gUK(9SKoB*l$I`$$Nf-H3`D57'J/!j\!HQX+Nd=emIa'`6R[qpMhi3)<O4+%fp^]Sh4j".9%<01\d+X?Wd)G-$r;*Gj\"\7W2HdEiMR^HS1gSsiFNc$')iU$4)W"@dDd^$&QFt9!]Cq*Op%?H[^C@qoN^.,Wr!W;ue0DN$W"?n"L%6NDXd_iJ=&nf'joMFu:&kjpG[>0$3c&RLeZEg2p`BKMpo.f%X>h]u3S-S8B9q2:PbO0"D8QKngCd8Vi(L5(1J\Vpltn6GV0;7Elt%Ru!^c)-IX+;ra5;>SOT)U8[Fhn]Q52n^*@p3W!63WX0P;1hnsu=jLY^b36K8]CF'jDG[(pkV%VtM@:'V$2nEt'32krK&7"sXa-ED%lZ\#8).(aBHp[JXB0:&ODmg\HF5oQ!?4euf+:A4GFqjJD[\JWp_4:`lC$mD/9m0#=B0VA_;MJ7!c-[K*M"TM'aN6)Yrim2YE/fj6%lpVnaA*5+A+Xd0>fu[8#7[gDJUCmUtk+Z!`PK("E&7Y42dV^%IlA^;Bh`&Gjs)6rl<l?T,&L,p$L_<E-UCTSdW13O]HcEXM"kFtP%YV'X@Fib<_6Bt24p`gu&>XfDn1,pGPF.@nG"!Cn2<!)):7?:%\T2?>'!=5<[,R*rL*iZrs!5ZO@*3I&(@Re`j$BmJUK2PT:;)OV(%"BC`f,%jm3qMfEE32drn[PDSe<$_U-,RGF=1-DI3LoQ:5GtlIq'$O70&haMQPgV@N#.PgEehnb2!lBd4:HB]hJr]:#9\+<F^bc(2%Oa'(-nH<\`,P/K?+<iH];5B/DoAhbmUJMZc%&`U%O=Db!JS;'\gEB0YPpGBQ';fKT6:tsB4b;gSJF<N,3Q23=pOnJRo83]e&X]@E%]^nj#d7%6NU@V-9U;7u#\ekj3cO$rmcp]0"<+R$u$O8D]aeEVD=l_$2F9s9fKKoR\/\DMIK&i.!:8aVuE/0!@7FE4c(EH@)UWXi#%GA)n"3!DjSl[UrJP1N[[5.lmu8`T=m"UYV=!cSj8G6Cp1N8Kl[FA\C,&d%QlW8VZ_$kd$G1,^GGf*H^2W^bB7,RGe]HsIG#-U^[_%Bi3J;U4fiRe0p1o2C@^(7Zmqt-\<i+HO?SjP#52O3'q#)jU%n$:6<SE5]r?Uko_.m,"*27A0t]#;0"ppo2M52(slCFGr]WiKVP@W%4H9&ZR$'j;-gqpTnLtcY^u6'k4CG#&BNb;oJPCB[p<TB5Y6+Ar)utUh4;?sTU.fn(."2e;08&INY>_SZLBSh.@2!/79F)A\60'>=%.Gt1tV=0!5:r_Gsp)];o1*g3SV)0ZcaDd#glidr\8hap9*a''N,064mfNC^eJp#2@X>5ptA5/aWn4\@W1h04T&0P[^e4o0a?q`UA%;09MYAEPBE%3Qk13^l<oGXFA8RDD:!G"Z#$#V&U=%LBFV(MVAG.'>-L9[OP7C+0Rc]`\[NM":h#&qtuoD1GehneFm.^Bcl#PO3Ks%!1U]q+Oi$,7`l9S7Yn4(&qL%t.YM/'@Y4TE3QeNLY>D'iWiAT4\tf^5c-W]tTodoOJk/6lKSKlg&B,lUg4?;)=X+JD_\iILJ-Vj,%nW+eBPcK(4((&m7a9e*+'SWclU?\`b^pd]$P74T=AY988:ROrZ]]ks-Wu>]rd,R*,U'a;UUe<f^.U=98&*cDLg)<mD!'&(37;,@B%h;t=b"FtBS#Xru,,6FrfZ:G8C;1]oa!U1tAU'hl>@kpO[#o"+3d0?j+)A<=>iTP'a+s[S)DJK_04.Yl6KbI3*<$*#l")XFbG?G`i%EJ&nSAJ1$287ju8Z:<RYK*i>"B29C%XX9-!M(/UYJ6;pYO2FJ([YE2l8LYc2;.V`<Cl4Kh@N0j'dKP>=AZEiTQk4LOMBKC$-51@n%aAf#lj$WmR5soL%5k$oMV@`iG3C,^i)?cuGR>Gm/"!rs=,4Prdd;Yd:#s&rK@!E\>9#(Ga7fXD-"G!jmA<[85J@rm#UBG#29FqFb%7o:N5;:5#%#U`/$#gu9HHO;iNQ3,3C&l3;06mCh[$XKGg7(PeN.naE1@5.PL7.F5&SIh;iFe8:pV.ejF_@o]-#bstGkTC0g?':`i%R@-l0&./L@.$9;p.+<K%8kR@VXK"R*CfR2mU&#V(?&c4p;?PO(i-R/+Ju5rB;Lhbl7noXr"NB%6#_p2fG,/NS`pp>'[K2?$)'Cb/%l-,u#+,gW36q;o/H)fFqJQgbq_&tgl@PnFjbIg(?&i%q<iFWYDhe]gI;SXqbd6L-.L_6e#A&Oj/9G!2gjJcTRLl/bN+Zrs'OoUA2%do]B_9a$\X6"_04GTK"B8c_6<6lSBIe<'nI#h`B>#g>.GiGJYZ7-;n^<"U=L6R,HPJ8/m#M4@81%o#>S!['7dC!\Q166R:Wb*bR>%^^/j4B.Kg/=:76l8JMM!<^_fXY>V&*ODuQ2OY@(H#dl.=rFZ$E9GA@01i7V+"VjE^QP[l?L^E(?\,h+p"Z0Y!:*C08HI*Ug:=YiM%8K@>Q8Gcql78"0S8^^U6V;<&e82A)G'>]\s>@#`-YnaL,&O8;g!<Q%kGCr>(m(meJQ'!It!MC+\%XEjSBW,cuLo:I_j`O]RAU'`d%8[gZSUC^:u&47J3DP_G%/J'M61'[qqW"V?BFq!W61!W$%YRLnnZn\SGd!<u;SP0X6feib'@A:D<AMblK3;)Nf7)W)YrfD$')%Wh]%b*sCD@hHSWbR^"-,5/;sTU[aQ8n@MUkTGd_V3pit:VVk7RPg.o'W5%s>)6:lgcicI0W:1;.&\L^9kN6Gl]a"=gn\.hg#*QR_@e/j%Wg(StNC?0"7:bCH+I)5EaP8FPb#D#)%2B=`(bS+>,g1h9EuZn8&1^(0*+iZp;1ZWHRNTrh,EW@/1RWm(L\!)Fg8Ao;Wl]o2<4$%j%kq2spW-AM4S9V'l:d`TD=3q(bGjpHiXrGgp:(`@K#c5TT[AKne87kL=RM*[Yj#*+qMF8U52DAsG0N(3\+npN<49h3U=>Xt)9L.Xq%AcObN71@t/1'bd>@K+1&W&#!$"ejUZ.h6DbT5BXK@'i#.arYoiKT7H1@#s6Tq9UYkD*IS!JX[/j;=O)F39:[j7b%[^%CHAjV,%hY%j<`1;*1..dY(.B7o/P0A(nIEIE#;QB6GPUH#mC/9)l+68R%fG?;@:XfU`p:Y-'CN1CB>*)iJfNg<EL[_lBKX>P%cA);]#Y.#Qg\`%0>`P$5u:(":E[;:hpW;KNEHhTB<q7[9VVe+6GU=5&=paA,iZfe"=>=D9Q^UcFuI2O7AQbjSO#+%8dPX#V!en9_L!t(6S!O`6r+/+%-X7P,BcN?FJS>t^6AVGZ$mMAV,6U^_'12!td.h[Him=>@[>VC9:=1ITk3-#_Z[m1X+C<'e%Nusp,"KX?[/kOL9+4-R709JZM>S+l%Nn,@h2?8.q6kU*!-I@'aj9\_DLh6WROLkdO=s"%1LpN)i$&:tTfG]G'#XTddA;=QC"CErNN7oj&$tBtgS0jN].#Gn8OXW]:Xr%.r%!V$H;CF#^1<g4rS'LH&FJ>bMb%=rJm5pQr;'*Jncf-6]EXMd1#)@^=_+IL2\R>i(S+CIj*YW3WPPY1-eE<[YM.8Rk^Z[gLCZA:mQ%7A6;9!-H@>ME*'tNWnB+!W?n&-0/;@`/h\f]SI-gl"'o.'Jto5hf[HN:sgH"[E:1+6AV^aU)bH+=H?297%B!o"t_nFNFar=YrtAc%-s8A2+X(WsSO>%j?37`:<p=:TB\LAV!-`4#TSPCb&4+.$d$#4jJqF=bLnKY/7`+#pLgDQk-?KI:A6oD@Ta;DWdtfBgaGc-59gJ/P%1rL9L5@gi,,3.nWBJQpVCbUH-b6_*<pe4'tLnbN]+L+)W%\_sYK?>uACCqR]*!:la<7`n-9ctEFa".L/.\e_HhsuGOd4/R(PdCEQ%"kp+R5a"S>J:\%l_Is_ed'Fi+<1F)CDDC]6RYDq_,&088+]8Y`LW]l-U0]f?%N%h_&7(q?n0nVCr$.?S`![^b#U?JeJWN'iVkbdp%LqoDqQnVB7=Xfk'&0c04jsC@I"@,<.oJI5^@KN<U$1&#HdKi,S6O4Np]EP"tWQ&]ZC(\n!Ym5OikTh:ECQ=[2:I:RfR55%@@>;*/%Jl*Vgg^Xs*DBacoM:EhiKGS_c4pW9BCSWZoA<m^aN_><DqFrq#[aB2UG\rrW-taBE-0PK22P%`s)i+h\#o+=#!g"+"7crCb9FqcV%RLp,NE8cU<La%hh[>5*O:^3k7;@ES:W'TH@c&QfilQD]'+aT,?+O=Kn,3hR,0mk'Q&E"f8pPJYd[)2,iJIll,h\.fA0pTbH7"KZG%#`p==.7A:/1]gJfSP2EqcPQgnRZ@BE8CS>?E*\,NMG?kQ'7u0pi@.%:<_B+s+K7pY.NR"Q;1\e1Fb.\d9(am$$RHf\#=NW!5DT]*%&.WE6>nnYDHRPQd#sD6eHt;rD(a0o"_%+<3=%R&n0c4RZ')BA4k^XM$<K,ZD+V7MO1K+I3%>S(#0i3NE-&+k86UM-!&[Ag`n.J.u%>nZj#OG"3_!.i!%Bd(?G,"<$gcEeWiOi5VR_19_M4t=q!3)bVM"OcL\kUem#e=^5F+>AW\30":m'*-uLA58#W?uW*\@VTKm^l4)D%<==gOV7+nii\.#p@3UC"UBtMkC]bLp1I4h^nh[D&UI5b@P[o/pXWq-bRt#C#,`7I1$rHY]D:3*@MZG4XLk0?,_([G*&ZeAG@tEs0%)AQD7KXPiiFUY5n3ktl_)b>2T+gN@IZUA1g5t6_$'q%,`#)K5%PiX>s3TP9kEs`8NU<9NkaX*^sNr2H@+$f&f!aNog\dMtoO26qX%F_9U3BS</Q1\Tu8.TVF%l%j=P<M<;`(FX6+i?`kEVoC?O7`p%g2,gJ2-7sh_6A#&)>[lN^!M_)%ID>i)cr:u]ZOE"O/-8CR>DGc!%&N,CF66\,YRQr5fdQWFU(m'ITIk2R:TLC'2)Dtmk4gaEuWdP"bNK?CPd56Lq'kTt0$8rf$krLI@UQ-ka=B\P"U(meN8@5ISM'P]j%&HMS=pAqk$@edKF"%a>$G(O6;<lCU3e(>S=<Jb343,*uui!<7pcP40X((t1>69GSu0cG1(&&Ta0JY@IL-4?ggpd3arKTP!rBJ`U3%'e-1%FsI6r0s]J.FSp9t!OGLV@j&)R`Z'IP&enfK+9=qCOMbpVb^4'Y@;&2`PDQk>7gE'lBd&$u*%A`I[>9@'LMOb-.?n:372A.o%?8H!kSW[e(nRKi6k'IkAAgu,5doc'R\6D`qB+"$M6jkq<[-]Q+N5Fe1OiZP^MFL5FkcE5g$j'O%W#Kl+.8b0<A3jbt4UVI3WW7+@%XX7JX4i(mZ`6'VWNRd+XhuC[/Q:Vp"Tm1#(\S[+Qgu@#gpg>5d+RZnb_UF)fZ8)UeY`O.=&]uTBNRbtXg;EYY(jHlW=^!Z`p9+)t%#ejqZAX-05C3'(;s5I@[hN?4@7_I(lCYN5H8%-3@CfnZ4(p=:ROFXon(1@b>6GX3;/eD3_G]uThX#5:LK]-1T@k"/s7<(8!5k$o=%.BA[o<g1.>s4?sI<RIDr.9a6KfXA[#\iiAV't1QFMR8V@8k'[&q>\V7\lIL.V<TEFmkA\RNSkrZ5F2]aJtNnehT9B>3=:dfA=oXV%gRD5DWCfsPB23"E$Td1!B=4q><OK@nH;DtQb/g=";TclILQ^QSU#!Wo[a^:<[OIKQa.!@gc)ck(&#J+>NEnJjJo'4>$_HtY'hc2b%0so>($FX?mbcK1^j9RNHBQ8tt0H)WG30_8q&+((KLN\&Q;Phh9GS<BTR?b&2TsX^/Z0RE!6fbo>(a6f)@>1'9nV)\K7n/7W<kt;0%jp3`Jk_]%Y)CZXm@1.j&MN.YpkSqtbnjbNTbqpeZ[6nVOG?<+Qp<-kV\mj?S4>.OPbNTrYp:k!)><B0qW\5>X?DCehNFKm7LJlda%Tq,YLGDn+GnVA!`SS"_"FsubWDX88\7VL5.a#h#P]iV:F7\=A!3n&>V3G-Z"0QAEpZLB*jK&1%>E%$Dl*ni&DGRoueiFR.k2\EEd%=W+7\9"VhW],pS;;R$X.47=>?03Ih@ULEsD@.tAD_iGTBZ066<Es*@`i+$L-.k)H)@1.j&MH/MnY!OB-/_WV>D!#90FpRL'DX1Gk%nJ\9GINHc["Ojp$?NXKL8$\GJ6Ygkmr]T7ND5Q<7QZ9m>&h\1NL67T-m1V:8g9,GX^X6ZU@[sm+Zn9Qt4Jp7OgrLi;81k>j^]$8`%Ahb%rCu#H)@S2h/aN/nG*FnE,Z2C<V[s2Sa(q-h^CPF:K,G)5bR[(2DTsX^/Z0R@>;>BoIL?p`2I'6Z2j'=D"Hj.35RV\51EH21"%=_-mE-l812Ph[#bm1bI@)I/ND&MI6Jbt;.#:tkm(fQG"uO1R%3JpB!\[_.RPFt?4.Yr:8f'MB!pmN3A+a*\?FFsZ7akpTB8PsTO2%OibO)<jYttOHT1;PP81'1Q,sHPWhXmMr+onAYW-Cdk<mGd64f[VJ+0c"?CRL[k"Md>tL.r&+(&],7M<#WR==dM`6dG:9u]Vg6E.t%2g.o,*O's$j@+u>mhNaK,(/Cj$b^%Dh]oI:m?8b#ZG760IUSLIaUi+P-8mWS`Apk3FcSJDd8%#GQ=d9lLVFe?mO3%)(%[Hlk[`D?%Lj`622!qT9dPI$F&/>NS8>/-Zm8m4]5%O4A(0W0Jpe\*WN1ed)!he)fB6#Qb.C8o_Til17^t'O-WO5?P?OY,`&Z0%VNA:G-+2jmP%s3)&XVf<@lN*]WV:l8I>Zr9YYa"0j^M!(n2Au2SX...$%l^H+d;jigmlS<m2?*O1$ZcjiE0dc)dkY/juF.ilV"W(i2O-0@Cj0rED%&m_a37d2p_Qqfbq7;JbL.B=LV]=47jp@NJg;-#iE-:c\llZ?#JTi),=7g>K[",Ud2J>*;c2kW#.A%B#S),R`/@G!F`PqY`7\R36'%JoHn&_FfU3md@NTBi?uLH/ZgR7YPcu!ZajMHkqgd]`_:QU@Z.6:Q?Q<PWn"]S$C,=1_G_fLIq_;'apOLSk@*')G^r/I`Z_rP\"a0%dc'Z?Y3@K'V7\9!lgGRH>k]USj)<+h+Gj6COIA1]n<rKDZ$!lbnPG*I4?aQ5R,_WtWeB`BnJ"8Na_G8W6YZ:=A(M<&4a_k$0jstf%[pXJD'2Z[LHhq`Z/)UOE=:(JFR3Teo!o'bqVJ0JL6cj38cqZ=A27"&EGJnRR::!i!3L"]:2g1a2_LhWePhCAd=QLu;8g4mEkl\#?%4c.Ap"BdRaLL@2cG9oV^[8SX!a`(/c8%bM^/1Y;N?0Uj&B@ketmQ%J8E[97oi@?q20Vr1[<DET1RmO*F<.m%>A<FESe\[3!;V^9F%*Xd_i&u[Xa8hTN$-A$Cs.qA6>C%lg]f=>k&%-/.=V:)N(U"!14q1+F1XoTRGZUXi6&S,F7EQAr#`Jrsh-+Ci\42o5+K^/0-'$eR)%j%T[DAlco$LXPVZ`i]\E5)j8BTRr`*HFRB_/mu>1$4a.8hbD<e\PJ5.aC5SI4Z9)RX6`H5G\]5m.RJsNR]8d;U+Ys_1>6GCb0nL6%l0rn0f*uB)a'3pbgB,[5]N6Y(.A'QhSY$?NKF1UD[1B,?Jg=0a16n+>%\^+\HT`-\oP9uE>*ReScWRlJP`j`D[(H3ikFTHH)3`XP%B.AhEGp_)iSu(6jT!.[S[9Gd-knDBKk$-InL6Vh4q.o\NJI3Lt8JN0i:auR4i2F.bog05j)0@K`C8B99*<iaVRS`&Ujblgb@g-^\%#q7<?3kMTmR;I%4*,coJ;"S)!-H.ZSPO5&Rb"f$;X)KD;*:bmDN#7P>%]-POHT`-\o\#$tKIW\$ju)!`cu*Hl/B`Dj*WGKn)MM]'%T&H5u3klI>M_S26\ID[[pLEFk/<m1ONZ^"OCN7<AA_"LF.5Kp,Hc9re'Q5a,U*>M^GS<BUR?b&JTsX^ohn&7;7s*S1s1ri%>REZf%)Hs"i=pp)X4d=1/V_OE7$Ri[j<bcbt"@3g%(bf:l$S*5iBoC$b1PR[-+!s?$IP8MaJjqOBASKjLF#^e0?VIs2H=Gs0n*^uacfXNV%)a/0e_gjKN<;r>H%M2-lOTKq8>tO\QoHIg:e7OG\WM6I\mYL!VRc^EIHjK--mclfB#n?n?W'HFHhGal;,&!qQg.*MWc8^VSXOQRs%#kF_)(%#g?=QrXS><L2;0\#p>S?"&l,@7TtR[%8Rk+Zto]<gfs'j5LiSnb.8(MJaQ0^Hl[5YG\Z\>BJ;!`LH8i]e0Kc^Ygu[H\T*%B.JU2lll$4PJM>0&o.Q)2%q`ChKAB1lZQmFpP?hKS_%9,$\i[[fO0q@h2M1H$714f;$NROK"U<N7(!=;<]lW+(6<MQXR[jB.H)Fp%NAhHVRopW0+%j/[)nX+o*0h4*oXs;H]j_"H<CYS0d5X0(O7Ff/AJAceNZ^"OCSBmbO\l&T.V+@EAeRN\++.6jU!WLH',f%O-Y&uY%k]$8bcgc@-N^&J8>e^o^Le3E0ijW<*&:jrVfh9$+J;Q?pAR(P:*'oZTI$TFPVoB(!;V9uKp4D7hO79C[\KdWNAt"sig+KbE]<,_G%>>DjiF*[]XM@J*<8#E4hNhXoLQpRl:7dn2+"A).<pk;^k,t"uG;f$\!F1k!j*8uK-Z_Sqk&f77Zh0hG]6:lcVjU.7@'l.&>1h3us%MVb'9%^@eF_Z7tMO9??_l:Q)POP@WlmXjEihjDQed.g%Gd3aHW1FH[t6YL]<s5UY<0@0%ccZA:?W<!a\>,G/R@`_RE`&ul\&[0f:%ns(=`9IPK8M*0FuYH55A`@W!s.9?6_"qs=#`bW)@T\W;a=T)(Mh;-ZRppGG_iC$iUpJnn.%&`+.GSX[W$gJ"l(_s;29d>H=#\QH"%VN"$^qhpU\hV([Ti]<"e@7'!5Z%\[gBVn?=.rI\/]DHn,c\.32WT9GEmr8_i_1!83380Qah6o!FC;LQNP/'4B$d0P_DMs9nMKp)*%S!#km3GYNq.B=F\]>$G>mT^ePH0%f/ZPEtY$=X@&JHe<i#&IBB$YmNj"Bd"QI^--:TbOt\YK)76B29#P-WLLD]O:+`.qSB@C%lg]%f@0dh,"GsN4<!/30J)+gOXgdTj"j;N9Zj\@V]n[+ni1]!Q!MImC@)]cI*nc>V6n:4aCmMr;Ng-)Kar>$oo(BKfP-"*k`p<U)MS<H%EBFHrOJU,17LWlp9fR_I$-/laN(#$t01q,GGd#/>Tn[>'mi#1uAWJb^`1'mI.j%Bq^H9&F:Y5,"F6(k$YPK.Qq&Y8!=^9:3_NMih%RW&Bq(6S(%>$0`[$<t0pA&2!(+cU]8.ZIE9GS<BTR?b&2TsX^/Z"lIGUgbb.SF^'[bXJJNgLa-p0gj-<8K!QnW?=gKMgcF@`-NT'%>piofE@5<'pISa1^gu4Ab?6>iBTb48WO)K5U"RLUqPgE/UOB6PL._jBN=5VWYpu)%PFs396!j1>TW=-52=fOU$n9b&Z,E!:/P>Ph%(U]e\V51U/*U`@]3V0Wu+ZE]W2lt234Lta"fLB"H?9unXSVJCBqDHXeQGu8[].+\-lgoiG=cHK/UiMGROk7LV10-T'G(4^Z?#fU$%1;uu7Na40tT,m#m1:d]sr$=*Ik;4W>+:2<HL@M"Cr#t.1E845,bDgEP0dU@NNAhHVPGF.:&#%h8I6D(a!lj/s\BjUm7?WVcY\Tam%Q';[eJdI)/NUUuW\h`9=&MJ.6D[PKqc&J'IWJhNDEVSFpLLi4YrQsb4S==aS?4+6(CiV29-=Brl>c^js\o%U]\VZSmRiF`(1ND)k%A*$',Dt..p"UegpLij\9njbf\m51lcZHT5piU>'p"()Ul]]epipPLi2IXnl+iJS!8Mh?_>_@ZoR1u'UhP0,Cf8?lcad7lb&_h@"]%/S[)bBsK;Y.<N)3YNI2.^J!VHORE@R\53?<;7:YCZ?qdQ,SWP?Z_:WYYt"._+U)I7r_!PuT4@Sd5>2>A3F'Hr"J07(`_*kkiU4FO%7tZ>T)AO@<aKZrLmGBX#^f;;_!AMkT!U2>WTRV#Io;JrM):THU)MWKNUI`4fZHtd/V6k"XrqG_eR7p(62"DFF/fs?-Vc`^dL!F&[%$qnp4MeG,k(Hi<;d=`acMk4blhoHV"5Eu']:]<\>H/,@lYm@lbS?lgrPd9R,[(ErRkJliL!=*^=jEH_q\@'fE[uTHuQrhhX/-HZI%+T0_;%9%F[KgR;*nb@#K(d=bIO$tH:iIWr9Um0DQU#"OQ4a0(4=)lc2jK:Y>55G@E)4I)%CQ:sl8!F>Lj+L4p)(Fu7nJ[>c9FQo0%>5<<X.Q)(:-Lc=`5"=h,9]%)NbNel1a%HB64&mSR02TPTj-c0;/:>nR89baQK`QXOe:>eGb"7@^]#N_oO?g>'eFT_oF_]T=$1N7C%5*KJ/VTeJoCM(ca0jB)4Z^uqT8?$$boj0@X,a^[(V4gsUI;c@:Ob=qb5;[E"4sOS!6RcsDq!TIF[Zt<GTdnU$a.!?]k,aeYR89Zs%hn<=e#E>$o;r;r@12d@b2keP4\C%8'$b]8l+>4Y96oqVbXLnoYP,t3`JMq'l6N.8R[@-/68X?gK*8^,KGRWjXFq:9)5H[.pY8D$Q%dDKDbO+NogXYU?u8iVF,jdn.O1fi:p$n9b&Z%Pc8e&S0sO*FOV=]U_tR89Zshjn&6!HnllYup-)eV(NoMm4FdD.;<7"oV%!%.KW,%<OsMM3#KJ=721kTr+?WJ#6=!G20El,q@ZF$2N)C9&U0Ane*W+V15>?jW:1,["WKgKS=;ud(rHBM*LVTaKHgc7mFY$I/1f4UPmhZ`%DITC@j84W=[CV-_aQm8+)(TSkLV#WpD@O3@3f[_G.%US]6ZZTBH)BO&/tsR+Oq<Wr4<C/^^9MY5jAj<`@-nZGGLbb=9F5o/>iSP3%9lj@TMS%<qn'8*!<QuaeL[n70'cWojP`:8Y?h)njZg\)0NZd\7]MSIA.W&6B,[3@L0PU1G>*Ql905*Gj8m,k03rIggFi`2;dd(sJ%Z_FrFCckX87l^-<SiJieMb"ct9L)I.9c&"^@5;d:1.9!aBu+bR9(3q&KHCE'1nGn-\mJ$C(HU@-fe\+Pm\</.0`0V/kchFO4[P5`%\<[QRftfuf_@]10Vj8)6<n=EG'@D&@=tj2)S3BmX5Dj597Dq!F>$,JP3o%RCTD\ZJ:]C<DX\fRnP8q_)FBg?cU"K.4j8](qTCIF2%in6WjHtqKApl)W)51/RP:*T4)QmdR14u(pK`km5mX,nL]g*nrN_js,o7/+#oi[HY[6sE5s(HU@9n)07RY2@?ArG`h+QZcoi1[jli%/>F+ij(CKgfgf,2`QqfK#U7T>I/c-+BtKNOdFp$-`aYJ[)62bXGY[!r<m"%Hdc'YQY-D72I9at4qiBYrihep5j'._@Rm<5l,b[L:%b2c!Uc>C5T-klkri.fM'b/#Y).Uu#s<XN9kg9G)6M0l<`>?O.R'6fl#f.G5_b^FJrE=*kG>K5mDM9[?R0Lf4Jn][^B.cq!\o<6pc%;Q79i+u:2X(9I#Y#o.K+O#@T<ISik[MS%6om`qCk/<S@1`Q`\:@$hrN?6a5KNZf5h6@ab@KHgbLc8`LH/8WqJ.N.6Ih8ER]d`A;=%bI4VE-Glf4S<^A=Y&sHNZYRcm3p5$6mi=-!4:X-kZuN=LAA/W03?CKo8!*PLM(>Rl6A>VYVUu`+Uf]i\B]QlrRg=B'S<RT1:SG\^%[ljC<H1$INIX:EhnD(e<\K@F?2a$gfGjajbp7W^.T2HHNK$dI@Y@l4BG$JEM/:*pB7hAf*_s[;R<H]ZUZF*U^nqEcq;E3Y>D.d!G%Q=W7F%Y&\GmH)3*?_=U8,2][/lWa^ISg/Vq\mlMeTNlRkLhuNF^!h\#G9oVV[8RL+]H[A0=:'-$YONsVXuS"D=lrZInFmCDhLEMP%pUb50:Y3P]`3luL`:YG56k7i*J*u%:dC/*6m)Z4Q5#n:Y(sdkAA\sL;4u!1PdE%G1K!9$jaL&2"Tp3!1]FR<4+j(0$;ec.b[WiIJ%fdgX1/9<V4%Y+4r*PCRJ=qB)i@+[clGo#%)+3t(S<pbIE&<7mg;tG5sXfQUmV(Eb#((A*Bbb)1D$2(d2nKu-A8^9q2QMFK@r8$!_%[_eae)`%)cb*Fc5YdIBK%!;)M6ku*-hk,V>J8?)jFZ&3t6RH,LnWkn\Yh?A+VD6ZlHRuA&1nVnSLJ6T8h9IPYo[*3,4Hk[tp3I(#%mhUqu4jktJLhk_[U)q>p5r`r>\@\u^TbOq[YK)5(UBtRq9dq.RU:&IOPgp8?h;=c/j(iX/PZK;=@77AVqp]uQ;<&M5%E(%1rD,D)%E;&,Jc=US^6cj9:cqZ<cBVs#_;ec.X[WiIJE@YU3XEl;^rpK-aN&O'RPZJCD_\EQH`q/CSGhe#o,I>`%Kd-k9hjmOnb8j2mMhcHh%$_;2S1o4%CGS?2[L6Rt.b+Z3>]<gi$9QYbFMPRYCji!-d@r.8u%8VC7raT@P*M$Su+Imkt1f$\&R<fT',\f-Q]G)Pe+a6=q(/8jJ%<^)1[G<`%hp:WSts3YoIHAF:bG8>\A2/Ko@*6eWHe"LGY6nuCAq.,J("QAF@DPFCVgQ`2hekWLFX?F^_>?2)$]V+XC.qPP_l0rn0%fAf(X9%"rfl3fhu'Z6JgHpF^NToRPqi1L0-@j7Fi`\AEBjgs[n:p$-p\B;b[$!7t#Bb*-7IV_nW7Z+h)iU%SEC])t-NP"3h:WIQT%n;fYsAtM&sKU^'N\Ali8f6QN"F)a'JeQYXdU7JPG7Mpt_BH1)KM^^=fBaI9@:7fTG0<Df:.5Kqs*Xam;Gc4kAJsB0+q&4/qns6&P%P\"a0dc'Z?Y2)VRhaBr2+nM$^_bdq@cY<u.MudlH.p0kc3.a]p=E%PJktjuV][pZ0?mBaC"'1;-O#N3Q_m31+ANl@hIlDO6>)#4I%,r(B&r>=!T'b\=i?U6uc5>X^'VTLG(*>"5R1OE2(<]lW+(@Uou0^S$to5?ugreTa>SS"_"IOOU_md.O-fH/$&]!tcLjc"2k5b@"Z%<(-)KT-d&>aZa.&K<b?JjL9B;a+EENO,5AdM,HIq7;Jf(.B=L^]>$G>/n9E43)`nsou&W*)H((ge$mdGR"`2+,7%phZ#+2`\O4JU%nQq7[X3]j'JPh\/C\8Ta,5h)oXGg-hV;:%">pn;-M^i"[8D50p2CMRA=M]SMb&g):VbCNL;s-l[PEX]Q@u-bZ'H0Q.ReY4G3[joM%M'W0%PW0cHUdHKrZ#42toTMPu&9.ONa"WH(Yj-`K>01Vi(A0uU#f<"Yeg4h">@!L&M:PG,i@F$bYpd.-T$qkKQ*TDPFSNJSCX:Ub%+g5$sf.`.8jqA!O0ZLcT\J<Cf%Cbms?OJCQ8qpklVc]BFF&aY/nUe3UX<u+GT1XmR41f[^JDiNrFX>m`Tb'[/NVcpIZ%be\A3BTk%U.g)9+"c5>9"Rj0`d0cV)QsgC)6+*O6C1dfi1CW0Ua431lKl7QB,9)67-smoe#h^+KS!VL8YB5uqH&_fb_?0D1`Jh\bRro)27-T,%/obBT6RcjA?4XqCAsHt\Wg)fjD^+cLTra4'%]/"=SR"nI4lfTmYBq1B;+8]6@D6/Y%U5IeNY:El*'lQ2PjDUFmLXDC\CY6,4KmVA%;!r\;M=<0TF#$cVKQ_S6opj&a*U@Rp\<OkC"$nWr6\0Tt0LZ@O9;@XQJU=A8"QADT*=ktIm(8E(8_Y+@-B9\L*=/D#O*KO@Bi`C!%LXPVZcE8Be7<8+.WjZ>\.H$FinpF=j@LEh#bBCajaG]JN.6,(WXB9Zm6`ROm/5%R2<@V^D2j)_0Z8,J9Pn&:NFA3Lc^PckUr?/7_%4Vu[Ml,[o,BA(5eBNO1`OJe:o2)$Q0c!SC$j@.\Jd'2CuGo'@hL3l'!X?N+tI)Qd+Ts30,g-k`1`&T9i]M,$:h/,=8)B_'IJq>.s%DnRhU5%BKj1IOi!0oN1O@ZDQa^6]3$`@S*8.)ddpl`jhWmtpMqW\f/>>J,g^YDKS@<^2glIs6'Aa,:lu;fE5M"Zi>dQu"NJb_XLS%[4ho$#t5D#Sj/#Mb9''"$hnru(iC_CI!(i*\Kd]PFu(QneO+"opGL:(=8I8gAt`!`QggP.PL-d%@rm-.4(/QIag5Fkqgf-/N-)Y3%G%ThQ-:\VBhJl>[/DSa#<AL@`42]K&f>cX_c!SF203UK_8m1sdgATj\obbrI:g:"1;su?JKeh6!CE[-R"l!'?Ap_cY$hlgl7hEsp%]IEEg$?]EJAB&sZ(9DJ+AQ,USO#IZ\Sllp]mRi8L41cOEo8F?o,;7nT@gF^XXaD^9ng!8dh>mit[gIcec$?p]mq.cGG7?ppCbq4-%\ULTYN8MN!%fcG!YY9_D\Z3[3k;FCOPe[>KZK[Y#"<0h^J0hqP\WY.[/@o&R3J)5$%d-+o<]lW+(@Uou0`R*Ama[OkmT[>\]H3B(%Z210$qtl]FqBabdE*^6;\phJ<rK?Jm\?=_.?,,<DhV*r0.@r=)0%3A?YTbmZ:q69hClMT-)dPFT+:HjB[BTS&jL9B;a+?aJo9iK9%iWX+q=XgBm9"ViV\E5gCB<EsN]t3>dm+!tu5&jm+='T+m"`&=%?2WlgkF=QV("?9V$.J>:MN&uMa0!EB[F<TLO*AVqjMdXG+:BR_%Zc_ie=#-Rd42Wfi&Mp8Lp376:]U>%intEGf]<c9(^gh$!aK&jc6U@u;B*-A#N0oY!W:[kVj<Yd3OSsF-d!cdBq78(*1?5(!@L^j)%5"oYf0Xbp6i?&a]AZWBJ*U`@]foNsmiiH=KhQ>FT*^nfO2>U[Tno?lJ$Y]o;&EJlJg<Hh&Hmn).*ni&t6_/K$W)@DX]SZ-]K!S@@%ANl@hIlDP16hjM6FcB'61`cm$p3LhrdPDqTPt8tg-k%4%>T&3iIEID%9YAA3.tqqL1TIOENo+>lD5I&%:-W:c*p[u]a$@K<0f/.U%jkb5E@MjN;l-p)>_4/2`Ag'h+#_F&5dq<uj.E``(DMs9nMID0qX4p>t*q>u4e#\d6%]/"=SR&!W%ecE8Pf]e6TEup"6J:"'1d]X\%q!l9M;YGQ;(`4\]4@iX2Nbc8N6tS!W;@&J3P])sNpcVkk9n7^'HsC#=Bp[M$h9bL*OH6"uV,Re'TJ6iiYU]Ca*_IABA/91uNZcC_%jj1qcEab5=aUi+P"N0]D3Lou89)'E3j!hj["3Sbg1NQJUr8$!_8l9"E5OrQ:Fd56a.Nsc==1j<Z9Vb?n/;_4D;U<#3h`1.fM:YjC%V%E'c_h.7)6/n55'B#Jbj^Xg0aRhXHmEF/G,GBiFbp!S6n/PH[W5mFDONOYU:6$I<@EdqVnghm*8q)\RG)G7YBC)'B-%El)ekWPL%<]u[jJ)>9P^Z;sIY3S#Of.XY:?ZKE_fC^)clPEgLl50:/Y!tjW*Xa=`'l1*0EJQI,i0q;g(@kq[7$%Ri:\W_MKV?IUBgM$#[pW>s%-`W>&Hb>4)YCa)9<^)akIp[?S^74H^_mg2hRlB:p;#-Ck`UG(-d8ReRpe`;!p;'Anp`PS>aM.0cj+UJk,su9,Zr='sT`S.Z-bdTi%#lcY>X,/EG7-X@<%G)nS`V!VUY"Lf]'C-=`dd@e#QZs0(>g)`sO1HsL'?jmA-)7Aae06*c$:V+*KTK0H4&Pf6o\;JV$m9[d&c4md%LJ#.46DFiI\dTLl!0M8<M^/<&+?1<k/E*RK\@S*Y6k_T&BS^%j@);E$[ZsHJYW22WR"Zf>,7&>*[&s.hjUWZP`Bu`+r3N4"_lDdX%Gg>#W<m%FtddHSLY#1tr6aMnVDY1;BYkec"H6f&n9>3,2@@`*4JfkFK0-Xu8^+1(a[@La)bgR,!Q,4+d=?Oi#=ntnJrS?.Li*E"s%X5qXK[:4R.qjaR5R6*H'E6LYGbaAaBDnK:r@?k-?OD=.sbC$Y".?+Sl(2kDpbM]IdAXQ>j_r%"j]4Yrj;I5(Gp,4I\LHQ!n+f7om%`K0#S+Ji*d71^`*CL::P=m6Ji><&ugXDnph6>b.d\;B_DK%N[N/#%*0q`u7cmq"NZ:S*>D_mrsH<C=Q<Eku]b9CL@T'C*7Xe.W8_%4A(e^#a1"B,+2Mu5Eu']&+((KY#BZG9dP1N]>g<Gs!B]UA(<q\pNL9%A)P^^U:f\.k4aaEgo6elM`-.qUbF=,0KF_-$XE0q5D.(P%)nmstL.#lk(f$JFFDt6#7m(GS1b3/!6YZ:=B@jZT&$mk;M<qTRH,7K6,h&4e(]IhuLe<e;+]I>*K'_Tr_1bm4,t"uG;_7I(hMY8k%iWX13=\Y2n5*ZV-hf'Ub='WeQ]8l,t9rq,q9=mu)?fM<,GBFAGB<EK*TqU%0$^=_LM8gotTh*H'^D3$Wnkb=+8P#'p'1)1l54BC>%mQtoOL1Z<O(EFQ*.YNdYf5MBh]:"ngqOt:.P<7S!qTg6JrRkQ>J,G5^rmP6Sr*R5:qPSi>q!"]krV8Cer8"P@s3&1Vo'><p^]4*o%Ieid7\%hmt++F4,0E3s0Im/>QlS$$Q_s`'Qjl?+8r4Dt317Co5:I"fshu)Tr^B#,44VR~>%AI9_PrivateDataEnd